Kubernetes(k8s)


#主要作用
1.在集群上部署容器化应用
2.集群规模化部署
3.更新容器化应用的版本
4.调试容器化应用


#特点
1.可移植    #支持公有云,私有云,混合云,多重云(multi-cloud)
2.可扩展    #模块化, 插件化, 可挂载, 可组合
3.自动化    #自动部署,自动重启,自动复制,自动伸缩/扩展


#容器优势
1.快速创建/部署应用                    #与VM虚拟机相比容器镜像的创建更加容易
2.持续开发、集成和部署                 #提供可靠且频繁的容器镜像构建/部署，并使用快速和简单的回滚(由于镜像不可变性)
3.开发和运行相分离                     #在build或者release阶段创建容器镜像，使得应用和基础设施解耦
4.开发,测试和生产环境一致性            #在本地或外网(生产环境)运行的一致性
5.云平台或其他操作系统                 #多平台运行
6.Loosely coupled,分布式,弹性,微服务化 #应用程序分为更小的、独立的部件，可以动态部署和管理
7.资源隔离
8.资源利用                             #更高效


#基本概念
Kubernetes        #平台;省略中间八个字母,简写为k8s;主要用于容器(docker)集群化部署
Pod               #豆荚,一个Pod包含一个或多个docker、存储、独立网络及管理控制策略;k8s中创建/部署/管理的最小单位(对象)
Node              #k8s工作节点;一个Node为VM或物理机,具有运行Pod的必要服务(Docker/kubelet/kube-proxy);由Master组件管理
k8s对象           #为k8s系统中的持久实体;包含规范和状态(Spec/Status)
name/uid          #用于标识k8s对象;在同一Namespace中保持唯一
Namespaces        #命名空间;主要用于集群资源划分,一般用于较大集群的划分
Labels Selectors  #标签选择器;多组key/value,关联到对象上,方便客户端辨识出一组对象
Annotations       #注释;与Labels类似
Volume            #不同于docker volume(只是目录挂载);主要是生命周期可管理;用于k8s中容器数据的持久化及数据共享
Replica Sets      #容器副本集;Replication Controller的升级版
Deployment        #部署;为Pod和Replica Set提供声明式更新;常见使用场景如下:
  1.使用Deployment创建ReplicaSet,ReplicaSet在后台创建pod;检查启动状态
  2.更新Deployment的PodTemplateSpec字段来声明Pod的新状态
  3.状态不稳定时回滚到之前的Deployment revision;每次回滚都会更新Deployment的revision。
  4.扩容Deployment以满足更高的负载
  5.暂停Deployment来应用PodTemplateSpec的多个修复,然后恢复上线。
  6.根据Deployment 的状态判断上线是否hang住了
  7.清除旧的不必要的 ReplicaSet


##k8s核心工具(三驾马车)
kubelet           #运行在cluster(集群)所有节点上,负责启动pod和容器;用于Node(节点)参数注册
kubeadm           #用于初始化cluster;用于多节点环境准备
kubectl           #k8s命令行工具;用于部署和管理应用,查看各种资源,创建,删除和更新组件


#k8s组件 
##Master组件                      #提供集群的管理控制中心
1.kube-apiserver                  #用于暴露k8s api
2.etcd                            #k8s默认存储系统
3.kube-controller-manager         #运行管理控制器;包括以下控制器
  a)节点(Node)控制器
  b)副本(Replication)控制器       #负责维护系统中每个副本中的pod
  c)端点(Endpoints)控制器         #填充Endpoints对象(即连接Services＆Pods)
  d)Service Account和Token控制器  #为新的Namespace 创建默认帐户访问API Token
4.cloud-controller-manager        #负责与底层云提供商的平台交互;k8s 1.6中引入
  a)节点(Node)控制器
  b)路由(Route)控制器
  d)Service控制器
  e)卷(Volume)控制器
5.kube-scheduler                  #监视新创建没有分配到Node的Pod，为Pod选择一个Node
6.插件 addons                     #实现集群pod和Services功能
  DNS                             #k8s集群DNS服务器
  用户界面                        #用于查看集群状态基础信息
  容器资源监测                    #提供一个UI浏览监控数据
  Cluster-level Logging           #负责保存容器日志,搜索/查看日志

##Node组件                        #提供k8s运行时环境,以及维护Pod
1.kubelet                         #主要的节点代理，它会监视已分配给节点的pod;主要功能如下:
  a)安装Pod所需的volume
  b)下载Pod的Secrets
  c)Pod中运行的 docker(或experimentally，rkt)容器
  d)定期执行容器健康检查
  e)通过创建镜像pod(如果需要)，向系统的其余部分报告pod的状态
  f)向系统的其余部分报告节点的状态
2.kube-proxy                      #通过在主机上维护网络规则并执行连接转发来实现k8s服务抽象
3.docker                          #运行docker容器
4.rkt                             #运行rkt容器
5.supervisord                     #轻量级的监控系统,用于保障kubelet和docker运行
6.fluentd                         #一个守护进程,提供cluster-level logging(集群级别的日志记录)



#环境准备
1.vmware15安装ubuntu server 1804
2.修改主机名,配置静态网络
3.克隆master(主机)和node(两个节点)
4.安装docker,具体安装参考docker教程


#安装kubelet、kubeadm和kubectl
1.安装apt-transport-https           #用于支持https的apt源
apt update && apt install -y apt-transport-https

2.增加aliyun的k8s库支持             #注意事项:xenial(1604)未修改为bionic(1804)
echo 'deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main
' > /etc/apt/sources.list.d/kubernetes.list

3.gpg报错处理
apt update                                                 #执行后会报错
gpg --keyserver keyserver.ubuntu.com --recv-keys BA07F4FB  #BA07F4FB为上一步的报错key的后八位
gpg --export --armor BA07F4FB | apt-key add -

4.安装
apt update && apt install -y kubelet kubeadm kubectl

##注意事项
swapoff -a     #临时关闭swap分区;解决k8s运行报错
/etc/fstab     #注释swap部分;永久关闭

