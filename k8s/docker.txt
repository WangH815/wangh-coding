#docker   #表意为码头工人。现指一种轻量级容器技术
简介
Docker是一个轻量级容器技术,类似于虚拟机。一般运行在Linux系统中,实现了虚拟机技术的资源隔离,性能远远高于虚拟机技术。    
Docker支持将软件编译成一个镜像（image）,在这个镜像里做好对软件的各种配置,然后发布这个镜像,使用者可以运行这个镜像,
运行中的镜像称为容器（container）,容器的启动是非常快的。Linux系统也可被编译成一个镜像。
目前各大主流计算平台都支持Docker容器技术。


#基本概念
image      #镜像;用于创建容器的模板,类似于Java中的Class
container  #容器;独立运行的一个或一组应用
registry   #仓库;存放镜像的仓库


#常见操作
docker --help                                #docker命令帮助
docker xx --help                             #docker某个命令帮助
docker ps                                    #查看正在运行的容器
docker images                                #查看本地镜像
docker image ls                              #同上
docker pull CONTAINER_NAME[:VERSION]         #从镜像站拉取镜像,默认拉取最新稳定版;可指定版本
docker inspect CONTAINER_NAME[:VERSION]/ID   #查看本地镜像详细信息,可通过容器名或ID


#docker时区不一致处理
方案一:
##创建容器时使用-v选项
docker run ... \
-v /etc/timezone:/etc/timezone \
-v /etc/localtime:/etc/localtime \
...
-d container_name

方案二:
##容器已创建
docker cp \
/etc/timezone container_name:/etc/timezone \  #容器名可以使用容器id代替
/etc/localtime container_name:/etc/localtime
###批量操作
for name in `docker ps -q`;do \
docker cp \
/etc/timezone ${name}:/etc/timezone \
/etc/localtime ${name}:/etc/localtime \
done


#使用教程 
环境：Ubuntu 18.04

1.安装和卸载docker       #可暂时将阿里镜像源改为官方源;修改参考Ubuntu使用手册
apt install docker.io    #安装docker
apt remove docker.io     #卸载
docker -v/--version      #查看docker版本

2.启动和关闭docker服务
service docker start      #启动
service docker stop       #停止
service docker restart    #重启
docker info               #查看docker概要信息

3.增加其他用户使用docker的权限
cat /etc/group | grep docker   #查看docker组是否存在
groupadd docker                #增加docker;root操作
usermod -aG docker username    #将用户用户添加到docker用户组中;root操作

4.镜像源
vi /etc/docker/daemon.json     #没有则创建此文件,重启docker后生效
service docker restart
#设置为网易镜像源
{

"registry-mirrors": ["http://hub-mirror.c.163.com"]

}
service docker restart               #重启生效配置
其他常用镜像源
https://hub.docker.com               #官方默认镜像源;镜像标签可直接访问此网站查询
https://registry.docker-cn.com       #Docker官方中国区镜像源
https://docker.mirrors.ustc.edu.cn   #中科大镜像源
https://reg-mirror.qiniu.com         #七牛云


镜像操作
#列出本地镜像,默认位于 /var/lib/docker 目录下
docker images 
REPOSITORY   TAG   IMAGE ID   CREATED   SIZE  
REPOSITORY   #镜像所在的仓库名称
TAG          #镜像标签
IMAGE ID     #镜像ID
CREATED      #镜像的创建日期（不是获取该镜像的日期）
SIZE         #镜像大小

docker search CONTAINER_NAME          #搜索镜像源可用镜像
docker pull CONTAINER_NAME            #从镜像源下载指定镜像
docker pull CONTAINER_NAME:VERSION    #同上;指定版本
docker rmi IMAGE_NAME/ID              #删除本地指定镜像;rmi表示remove images
docker rmi $(docker images -q)        #删除本地所有镜像

#镜像备份与恢复
docker save -o xx.tar IMAGE_NAME   #基于镜像的备份(导出),不含容器信息
docker load -i xx.tar              #载入
##备份所有镜像
for option in `docker images|awk 'NR > 1 {print $1"-"$2".tar#"$1":"$2}'`
do
  docker save -o `echo $option | tr '#' ' '`
done

#容器的导出与导入
docker export IMAGE_NAME > xx.tar  #基于容器的备份(保存),会保留所有运行环境(包括底层镜像)
docker import xx.tar               #导入


容器操作   #可认为是镜像的实例
docker ps                                     #查看正在运行的容器       
docker ps -a                                  #查看所用容器,包括启动过的历史容器
docker ps -a -q                               #显示所有容器ID
docker ps -|                                  #查看最后一次运行的容器
docker ps -f status=exited                    #查看停止的容器
docker rm CONTAINER_NAME/ID                   #删除已停止容器
docker rm $(docker ps -a -q)                  #删除所有容器,前提是所有容器都是停止的
docker rm $(docker ps -f "status=exited" -q)  #删除所有退出的容器
docker rm $(docker stop $(docker ps -a -q))   #停止并删除所有容器
docker stats -a                               #循环显示所有容器的资源使用信息(包括没有运行的) ,只显示一次
docker stats -a --no-stream                   #显示所有容器的统计信息(包括没有运行的) ,只显示一次
docker stats --no-stream | sort -k8 -h        #统计容器信息并以使用流量作为倒序
docker system df                              #显示实际硬盘占用
docker system events                          #显示容器的实时事件
docker system info                            #显示系统信息
docker system prune                           #清理文件  
docker top CONTAINER_NAME/ID                  #显示容器本身的top信息,类似于Linux top,更简洁
docker logs CONTAINER_NAME/ID                 #显示运行容器的日志

创建启动容器
docker run
#参数
--name CONTAINER_NAME         #设置容器名称
-p host_port:container_port   #映射主机和容器内的端口;port
-e ${env name}=${env value}   #添加环境变量;environment
-v host_path:container_path   #将主机目录挂载(映射)到容器内;--volumes(卷)
-d                            #后台运行容器并打印其ID
-i                            #执行交互式命令;interactive(交互式)
-t                            #表示容器启动后会进入其命令行,加入 -it,创建并登录进去,即分配一个伪终端;tty
--restart always              #设置跟随docker进程自启动;也可通过 docker update --restart always xx 修改

交互式容器
docker run -it --name=mycentos7 centos:7 /bin/bash  
exit                                                      #命令可退出当前容器,退出后容器停止;-d参数退出后不停止

守护式容器
docker run -di --name=mycentos7 centos:7                  #创建容器
docker exec -it CONTAINER_NAME/ID /bin/bash               #进入/登录容器shell环境
docker exec -it CONTAINER_NAME/ID ping CONTAINER_NAME/ID  #一个容器ping另外一个容器
exit 退出容器后容器仍然在运行

启停容器
docker stop CONTAINER_NAME/ID
docker stop $(docker ps -a -q)      #停止所有容器
docker start CONTAINER_NAME/ID
docker restart CONTAINER_NAME/ID
docker restart $(docker ps -q)      #重启所有正在运行的容器

文件拷贝
docker cp FILE/DIR CONTAINER_NAME:PATH   #拷贝到容器
docker cp CONTAINER_NAME:FILE/PATH PATH  #反向
docker save IMAGE_NAME > FILE_NAME.tar   #将镜像保存成文件
docker load < FILE_NAME.tar              #从文件加载镜像

目录挂载
在创建容器的时候,将宿主机的目录和容器内的目录进行映射,这样我们就可以通过修改宿主机某个目录的文件从而影响容器。格式为：
docker run -di -v 宿主机目录:容器目录

获取容器或镜像元数据(详细信息)
docker inspect CONTAINER_NAME/IMAGE_NAME


Mysql 5.7
1.拉取镜像
docker pull mysql:5.7
2.创建守护容器
docker run -di \
--name docker_mysql57 \
-p 3306:3306 \
-e MYSQL_ROOT_PASSWORD=root \
-v ~/mysql57/data:/data \
--restart always \
mysql:5.7
# -p 代表端口映射,格式为 宿主机映射端口:容器运行端口
# -e 代表添加环境变量, MYSQL_ROOT_PASSWORD是root用户的登录密码
3.登录容器
方式一:
docker exec -it docker_mysql57 /bin/bash       #登录容器shell环境
mysql -uroot -p                                #登录mysql
方式二:
docker exec -it docker_mysql57 mysql -uroot -p #直接登录容器mysql


Redis 5
1.拉取镜像
docker pull redis:5
2.创建容器
mkdir -p ~/redis/data   #创建本地目录
#创建容器
docker run \
--name docker_redis5 \
-p 6379:6379 \
-v ~/redis/data:/data \
-di redis:5 redis-server --appendonly yes
3.登录容器
方式一:
docker exec -it docker_redis5 /bin/bash   #登录容器shell环境
redis-cli                                 #登录redis命令行
方式二:
docker exec -it docker_redis5 redis-cli   #直接登录redis命令行


nginx
1.拉取镜像
docker pull nginx:stable      #stable表示稳定版,其他支持版本可从官方镜像库查询
2.创建容器
mkdir -p ~/nginx/data         #创建本地目录
#创建容器
docker run \
--name nginx_1.16 \
-p 80:80 \
-v ~/nginx/data:/data \
-di nginx:stable

CentOS7 安装使用docker
1.安装
yum -y install docker
2.创建docker用户组(如有需要,参考ubuntu操作)
3.增加普通用户到docker用户组(同上)
4.设置docker服务自启动
systemctl is-enabled docker  #判断docker是否自启动
systemctl enable docker      #设置自启动



