SQL 教程
http://www.runoob.com/sql/sql-tutorial.html

SQL简介

SQL 是用于访问和处理数据库的标准的计算机语言。

SQL语言的分类
1.DDL 
(Data Definition Language 数据定义语言)用于操作对象及对象本身,这种对象包括数据库,表对象,及视图对象
包含的操作语句: 
create:创建数据库和数据库的一些对象
drop:删除数据表、索引、触发程序、条件约束以及数据表的权限等
alter:修改数据表定义及数据属性
2.DML 
(Data Manipulation Language 数据操控语言) 用于操作数据库对象对象中包含的数据
包含的操作语句: 
insert:向数据库插入一条数据
delete:删除表中的一条或多条记录
update:用于修改表中的数据
3.DQL 
(Data Query Language 数据查询语言 )用于查询数据
包含的操作语句: 
select:用于查询表中的数据   //使用率在80%以上
4.DCL 
(Data Control Language 数据控制语句) 用于操作数据库对象的权限
包含的操作语句: 
greate:分配权限给用户
revoke:废除数据库中某用户的权限

常用数据库包括：MySQL、Oracle、SQL Server、Access、Sybase、DB2 等等。

SQL 是什么
1.结构化查询语言，全称是 Structured Query Language。
2.可以访问和处理数据库。
3.是一种 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言。

作用
1.增删改查数据库中的数据
2.可创建新数据库
3.可在数据库中创建新表、存储过程、存储过程和视图等
4.可以设置表、库、存储过程和视图的权限
5.存在着多种不同版本的 SQL 语言，但常用语法差异不大，除了 SQL 标准之外，大部分 SQL 数据库程序都拥有它们自己的专有扩展

要创建一个显示数据库中数据的网站，需要：

RDBMS 数据库程序（比如 MS Access、SQL Server、MySQL）
使用服务器端脚本语言，比如 PHP 或 ASP
使用 SQL 来获取您想要的数据
使用 HTML / CSS

RDBMS
RDBMS 指关系型数据库管理系统，全称 Relational Database Management System。

RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。

RDBMS 中的数据存储在被称为表的数据库对象中。

表是相关的数据项的集合，它由列和行组成。


语法
关键词一般不区分大小写，推荐使用大写
字段名部分数据库也不区分大小写，建议按照各语言的要求使用

常用的 SQL 命令
SELECT          -- 从数据库中提取数据
UPDATE          -- 更新数据库中的数据
DELETE          -- 从数据库中删除数据
INSERT INTO     -- 向数据库中插入新数据
CREATE DATABASE -- 创建新数据库
ALTER DATABASE  -- 修改数据库
CREATE TABLE    -- 创建新表
ALTER TABLE     -- 变更（改变）数据库表
DROP TABLE      -- 删除表
CREATE INDEX    -- 创建索引（搜索键）
DROP INDEX      -- 删除索引


SELECT
用于从数据库中选取数据，结果被存储在一个结果表中，称为结果集。

语法
SELECT column_name,column_name FROM table_name; //查询指定字段的值
SELECT * FROM table_name; //查询全部字段的值


SELECT DISTINCT
查询结果集中，可能会包含多个重复记录，如仅需要不同（distinct）的记录，可使用DISTINCT 关键词

语法
SELECT DISTINCT column_name,column_name FROM table_name;


WHERE
用于过滤记录

语法
SELECT column_name,column_name
FROM table_name
WHERE column_name operator value;

SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号），如果是数值字段，请不要使用引号。

WHERE 子句中的运算符
=	                  //等于
<>	                  //不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !=
>	                  //大于
<	                  //小于
>=	                  //大于等于
<=	                  //小于等于
BETWEEN	... AND ...   //在某个范围内
LIKE	              //搜索某种模式
IN	                  //指定针对某个列的多个可能值


AND & OR
用于基于一个以上的条件对记录进行过滤
如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。
如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。


ORDER BY
结果集按照一个列或者多个列进行排序

语法
SELECT column_name,column_name
FROM table_name
ORDER BY column_name,column_name ASC|DESC; //ASC为默认排序，降序可用DESC


INSERT INTO
用于向表中插入新记录

第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：
INSERT INTO table_name
VALUES (value1,value2,value3,...);

第二种形式需要指定列名及被插入的值：
INSERT INTO table_name (column1,column2,column3,...)
VALUES (value1,value2,value3,...);


UPDATE 语句
用于更新表中已存在的记录

语法
UPDATE table_name
SET column1=value1,column2=value2,...
WHERE some_column=some_value; //where子句省略的话会更新所有记录


DELETE
用于删除表中的行，即表中的数据。表结构、属性、索引等将保持不变

SQL DELETE 语法
DELETE FROM table_name
WHERE some_column=some_value; //where子句省略的话会删除所有记录


SELECT TOP 子句
用于规定要返回的记录的数目。

SELECT TOP 子句对于拥有数千条记录的大型表来说，是非常有用的。

注意:并非所有的数据库系统都支持 SELECT TOP 语句。 
MySQL 支持 LIMIT 语句来选取指定的条数数据， Oracle 可以使用 ROWNUM 来选取。

SQL Server / MS Access 语法
SELECT TOP number column_name(s)
FROM table_name;
或
SELECT TOP number percent column_name(s)  //前百分之多少的数据
FROM table_name;

MySQL 语法
SELECT column_name(s)
FROM table_name
LIMIT number;

Oracle 语法
SELECT column_name(s)
FROM table_name
WHERE ROWNUM <= number;


LIKE
用于在 WHERE 子句中搜索列中的指定模式。

语法
SELECT column_name(s)
FROM table_name
WHERE column_name LIKE pattern;


通配符
与 LIKE 操作符一起使用，用于搜索表中的数据。

常用通配符
% 替代零个或多个字符
_ 仅替代一个字符
[charlist] 字符列中的任何单一字符
[^charlist]或者[!charlist] 不在字符列中的任何单一字符

其中搭配以上通配符可以让LIKE命令实现多种技巧：
1、LIKE 'Mc%' 将搜索以字母 Mc 开头的所有字符串（如 McBadden）。
2、LIKE '%inger' 将搜索以字母 inger 结尾的所有字符串（如 Ringer、Stringer）。
3、LIKE '%en%' 将搜索在任何位置包含字母 en 的所有字符串（如 Bennet、Green、McBadden）。
4、LIKE '_heryl' 将搜索以字母 heryl 结尾的所有六个字母的名称（如 Cheryl、Sheryl）。
5、LIKE '[CK]ars[eo]n' 将搜索下列字符串：Carsen、Karsen、Carson 和 Karson（如 Carson）。
6、LIKE '[M-Z]inger' 将搜索以字符串 inger 结尾、以从 M 到 Z 的任何单个字母开头的所有名称（如 Ringer）。
7、LIKE 'M[^c]%' 将搜索以字母 M 开头，并且第二个字母不是 c 的所有名称（如MacFeather）。

MySQL 中使用 REGEXP 或 NOT REGEXP 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式


IN 
在 WHERE 子句中匹配多个值。

语法
SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1,value2,...);


BETWEEN
用于选取介于两个值之间的数据范围内的值，可以是数值、文本或者日期。
大部分数据库中包含前后两个值，有的不包括，具体参考对应数据库文档。

语法
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;


别名
可以为表名称或列名称指定别名，让列名称的可读性更强。
别名中间含空格，别名需要加上引号或方括号。

使用场景
1.在查询中涉及超过一个表
2.在查询中使用了函数
3.列名称很长或者可读性差
4.需要把两个列或者多个列结合在一起

语法
SELECT column_name AS alias_name //列别名
FROM table_name;

SELECT column_name(s)
FROM table_name AS alias_name; //表别名


JOIN
用于把来自两个或多个表的行结合起来，基于表之间的共同或类似字段。

常用形式
INNER JOIN  //如果表中有至少一个匹配，则返回行
LEFT JOIN   //即使右表中没有匹配，也从左表返回所有的行
RIGHT JOIN  //即使左表中没有匹配，也从右表返回所有的行
FULL JOIN   //只要其中一个表中存在匹配，则返回行


INNER JOIN/内连接
在表中存在至少一个匹配时返回行。

语法
SELECT column_name(s)
FROM table1 
[INNER] JOIN table2
ON table1.column_name=table2.column_name; //连接条件使用 ON 关键词,inner可以不加
或：
SELECT column_name(s)
FROM table1, table2
where table1.column_name=table2.column_name; //部分数据库支持这种形式


LEFT JOIN
从左表（table1）返回所有的行，即使右表（table2）中没有匹配。
如果右表中没有匹配，则结果为 NULL。

语法
SELECT column_name(s)
FROM table1
LEFT [OUTER] JOIN table2
ON table1.column_name=table2.column_name; //outer可不加


RIGHT JOIN
从右表（table2）返回所有的行，即使左表（table1）中没有匹配。
如果左表中没有匹配，则结果为 NULL
SELECT column_name(s)
FROM table1
RIGHT OUTER JOIN table2
ON table1.column_name=table2.column_name;


FULL OUTER JOIN
只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行.
结合了 LEFT JOIN 和 RIGHT JOIN 的结果。

语法
SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name=table2.column_name;


UNION
用于合并两个或多个 SELECT 语句的结果集的唯一值，如需包含重复值，可使用UNION ALL
UNION 内部的每个 SELECT 语句必须拥有相同数量的列。
列也必须拥有相似的数据类型且每个 SELECT 语句中的列的顺序必须相同。

语法
SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;
或
SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;


SELECT INTO
可从一个表复制信息到另一个表。

语法
CREATE TABLE newtable SELECT * FROM table; //创建新表的形式
或
SELECT * //复制表中全部字段的数据到新表
INTO newtable [IN externaldb]
FROM table;
或
SELECT column_name(s) //复制表中部分字段的数据到新表
INTO newtable [IN externaldb]
FROM table;


INSERT INTO SELECT
从一个表复制数据，然后把数据插入到一个已存在的表中。
目标表中任何已存在的行都不会受影响。

语法
INSERT INTO table2
SELECT * FROM table1;
或
INSERT INTO table2
(column_name(s))
SELECT column_name(s)
FROM table1;


CREATE DATABASE
用于创建数据库

语法
CREATE DATABASE dbname;


CREATE TABLE
用于创建数据库中的表

语法
CREATE TABLE table_name
(
column_name1 data_type(size),
column_name2 data_type(size),
column_name3 data_type(size),
....
);


约束/Constraints
用于规定表中的数据规则
如果存在违反约束的数据行为，行为会被约束终止。

约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。

CREATE TABLE + CONSTRAINT 语法
CREATE TABLE table_name
(
column_name1 data_type(size) constraint_name,
column_name2 data_type(size) constraint_name,
column_name3 data_type(size) constraint_name,
....
);
在 SQL 中，我们有如下约束：

NOT NULL    //指示某列不能存储 NULL 值。
UNIQUE      //保证某列的每行必须有唯一的值。
PRIMARY KEY //NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。
FOREIGN KEY //保证一个表中的数据匹配另一个表中的值的参照完整性。
CHECK       //保证列中的值符合指定的条件。
DEFAULT     //规定没有给列赋值时的默认值。


NOT NULL 约束
强制列不接受 NULL 值，如果不向字段添加值，就无法插入新记录或者更新记录。

语法
CREATE TABLE Persons
(
P_Id int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255)
);


UNIQUE 约束
约束唯一标识数据库表中的每条记录

UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。
PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。
每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。

CREATE TABLE 时的 UNIQUE 约束

MySQL：
CREATE TABLE Persons
(
P_Id int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255),
UNIQUE (P_Id)
);

SQL Server / Oracle / MS Access：
CREATE TABLE Persons
(
P_Id int NOT NULL UNIQUE,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255)
);

如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：

MySQL / SQL Server / Oracle / MS Access：
CREATE TABLE Persons
(
P_Id int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255),
CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)
);

ALTER TABLE 时的 UNIQUE 约束
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Persons
ADD UNIQUE (P_Id); //单个字段唯一

MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Persons
ADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName); //多字段唯一

撤销 UNIQUE 约束
MySQL：
ALTER TABLE Persons
DROP INDEX uc_PersonID;

SQL Server / Oracle / MS Access：
ALTER TABLE Persons
DROP CONSTRAINT uc_PersonID;


PRIMARY KEY / 主键约束
唯一标识数据库表中的每条记录。
必须包含唯一的值。
列不能包含 NULL 值。
每个表只能有一个主键或没有主键

CREATE TABLE 时的 PRIMARY KEY 约束
MySQL：

CREATE TABLE Persons
(
P_Id int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255),
PRIMARY KEY (P_Id)
);

SQL Server / Oracle / MS Access：
CREATE TABLE Persons
(
P_Id int NOT NULL PRIMARY KEY,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255)
);

如需联合主键(定义多个列)约束，请使用下面的语法：
MySQL / SQL Server / Oracle / MS Access：
CREATE TABLE Persons
(
P_Id int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255),
CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)
);

ALTER TABLE 时的 SQL PRIMARY KEY 约束
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Persons
ADD PRIMARY KEY (P_Id);
或
ALTER TABLE Persons
ADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName);


撤销 PRIMARY KEY 约束

MySQL：
ALTER TABLE Persons
DROP PRIMARY KEY;

SQL Server / Oracle / MS Access：
ALTER TABLE Persons
DROP CONSTRAINT pk_PersonID;


FOREIGN KEY /外键约束

一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。
用于预防破坏表之间连接的行为。
防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。

CREATE TABLE 时的 FOREIGN KEY 约束
MySQL：
CREATE TABLE Orders
(
O_Id int NOT NULL,
OrderNo int NOT NULL,
P_Id int,
PRIMARY KEY (O_Id),
FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)
);

SQL Server / Oracle / MS Access：
CREATE TABLE Orders
(
O_Id int NOT NULL PRIMARY KEY,
OrderNo int NOT NULL,
P_Id int FOREIGN KEY REFERENCES Persons(P_Id)
);

定义多个列的 FOREIGN KEY 约束
MySQL / SQL Server / Oracle / MS Access：
CREATE TABLE Orders
(
O_Id int NOT NULL,
OrderNo int NOT NULL,
P_Id int,
PRIMARY KEY (O_Id),
CONSTRAINT fk_PerOrders FOREIGN KEY (P_Id)
REFERENCES Persons(P_Id)
);

ALTER TABLE 时的 FOREIGN KEY 约束
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Orders
ADD FOREIGN KEY (P_Id)
REFERENCES Persons(P_Id);

定义多个列的 FOREIGN KEY 约束
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Orders
ADD CONSTRAINT fk_PerOrders
FOREIGN KEY (P_Id)
REFERENCES Persons(P_Id);

删除 FOREIGN KEY 约束
MySQL：
ALTER TABLE Orders
DROP FOREIGN KEY fk_PerOrders

SQL Server / Oracle / MS Access：
ALTER TABLE Orders
DROP CONSTRAINT fk_PerOrders


CHECK 约束
用于限制列中的值的范围。
对单个列定义 CHECK 约束，那么该列只允许特定的值。
对一个表定义 CHECK 约束，那么此约束会基于行中其他列的值在特定的列中对值进行限制。

CREATE TABLE 时的 CHECK 约束
MySQL：
CREATE TABLE Persons
(
P_Id int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255),
CHECK (P_Id>0)
);

SQL Server / Oracle / MS Access：
CREATE TABLE Persons
(
P_Id int NOT NULL CHECK (P_Id>0),
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255)
);

定义多个列的 CHECK 约束

MySQL / SQL Server / Oracle / MS Access：
CREATE TABLE Persons
(
P_Id int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255),
CONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes')
);

ALTER TABLE 时的 SQL CHECK 约束
MySQL / SQL Server / Oracle / MS Access:
ALTER TABLE Persons
ADD CHECK (P_Id>0);

定义多个列的 CHECK 约束
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Persons
ADD CONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes');

撤销 CHECK 约束
SQL Server / Oracle / MS Access：
ALTER TABLE Persons
DROP CONSTRAINT chk_Person;

MySQL：
ALTER TABLE Persons
DROP CHECK chk_Person;


DEFAULT 约束
用于向列中插入默认值。
如果没有规定其他的值，那么会将默认值添加到所有的新记录。

CREATE TABLE 时的 DEFAULT 约束
My SQL / SQL Server / Oracle / MS Access：
CREATE TABLE Persons
(
P_Id int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Address varchar(255),
City varchar(255) DEFAULT 'Sandnes'
);

使用类似 GETDATE() 这样的函数，DEFAULT 约束也可以用于插入系统值：
CREATE TABLE Orders
(
O_Id int NOT NULL,
OrderNo int NOT NULL,
P_Id int,
OrderDate date DEFAULT GETDATE()
);

ALTER TABLE 时的 DEFAULT 约束
MySQL：
ALTER TABLE Persons
ALTER City SET DEFAULT 'SANDNES';

SQL Server / MS Access：
ALTER TABLE Persons
ALTER COLUMN City SET DEFAULT 'SANDNES';

Oracle：
ALTER TABLE Persons
MODIFY City DEFAULT 'SANDNES';

撤销 DEFAULT 约束
MySQL：
ALTER TABLE Persons
ALTER City DROP DEFAULT;

SQL Server / Oracle / MS Access：
ALTER TABLE Persons
ALTER COLUMN City DROP DEFAULT;


CREATE INDEX 语句
用于在表中创建索引。
在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。
一般仅在常常被搜索的列（以及表）上面创建索引。

语法
在表上创建一个简单的索引。允许使用重复的值：
CREATE INDEX index_name
ON table_name (column_name);

CREATE UNIQUE INDEX 语法
在表上创建一个唯一的索引
CREATE UNIQUE INDEX index_name
ON table_name (column_name);

撤销索引、撤销表以及撤销数据库
DROP INDEX
MS Access：
DROP INDEX index_name ON table_name;

MS SQL Server：
DROP INDEX table_name.index_name;

DB2/Oracle：
DROP INDEX index_name;

MySQL：
ALTER TABLE table_name DROP INDEX index_name;

DROP TABLE
用于删除表。

语法
DROP TABLE table_name;

DROP DATABASE;
用于删除数据库。

语法
DROP DATABASE database_name;

TRUNCATE TABLE
删除表内的数据，不删除表本身

语法
TRUNCATE TABLE table_name;


ALTER TABLE
用于在已有的表中添加、删除或修改列。

在表中添加列
ALTER TABLE table_name
ADD column_name datatype;

如需删除表中的列，请使用下面的语法（某些数据库系统不允许在表中删除列的方式）：
ALTER TABLE table_name
DROP COLUMN column_name;

要改变表中列的数据类型
SQL Server / MS Access：
ALTER TABLE table_name
ALTER COLUMN column_name datatype;

My SQL / Oracle：
ALTER TABLE table_name
MODIFY COLUMN column_name datatype;

Oracle 10G 之后版本:
ALTER TABLE table_name
MODIFY column_name datatype;


AUTO INCREMENT 字段
在新记录插入表中时生成一个唯一的数字。
我们可以在表中创建一个 auto-increment 字段。

MySQL
CREATE TABLE Persons
(
ID int NOT NULL AUTO_INCREMENT,  //默认地，AUTO_INCREMENT 的初始值是 1，每条新记录递增 1。
LastName varchar(255) NOT NULL,  //可通过ALTER TABLE Persons AUTO_INCREMENT=100; 语句修改递增值
FirstName varchar(255),
Address varchar(255),
City varchar(255),
PRIMARY KEY (ID)
);

SQL Server
CREATE TABLE Persons
(
ID int IDENTITY(1,1) PRIMARY KEY, //使用 IDENTITY 关键字来执行 auto-increment 任务
LastName varchar(255) NOT NULL,   //默认IDENTITY 的开始值是 1，每条新记录递增 1。
FirstName varchar(255),           //identity 改为 IDENTITY(10,5),表示初始值时10，以5递增
Address varchar(255),
City varchar(255)
);

Access
CREATE TABLE Persons
(
ID Integer PRIMARY KEY AUTOINCREMENT, //使用 AUTOINCREMENT 关键字来执行 auto-increment 任务。
LastName varchar(255) NOT NULL,       //默认AUTOINCREMENT 的开始值是 1，每条新记录递增 1。
FirstName varchar(255),               //AUTOINCREMENT 改为 AUTOINCREMENT(10,5)。
Address varchar(255),
City varchar(255)
);

Oracle
通过 sequence 对象（该对象生成数字序列）创建 auto-increment 字段。

请使用下面的 CREATE SEQUENCE 语法：
CREATE SEQUENCE seq_person
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;
上面的代码创建一个名为 seq_person 的 sequence 对象，
它以 1 起始且以 1 递增。该对象缓存 10 个值以提高性能。
cache 选项规定了为了提高访问速度要存储多少个序列值。

必须使用 nextval 函数（该函数从 seq_person 序列中取回下一个值）：
INSERT INTO Persons (ID,FirstName,LastName)
VALUES (seq_person.nextval,'Lars','Monsen');


视图 / Views
是基于 SQL 语句的结果集的可视化的表。
包含行和列，其字段就是来自一个或多个数据库中的真实的表中的字段。
向视图添加 SQL 函数、WHERE 以及 JOIN 语句，也可以呈现数据，就像这些数据来自于某个单一的表一样。
视图总是显示最新的数据！每当用户查询视图时，数据库引擎通过使用视图的 SQL 语句重建数据。

语法
CREATE VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition

更新视图
语法
CREATE OR REPLACE VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition;

撤销视图
语法
DROP VIEW view_name;


Date 函数
用于日期处理

常用内建日期处理函数。

MySQL Date 函数
函数	        描述
NOW()	        返回当前的日期和时间
CURDATE()	    返回当前的日期
CURTIME()	    返回当前的时间
DATE()	        提取日期或日期/时间表达式的日期部分
EXTRACT()	    返回日期/时间的单独部分
DATE_ADD()	    向日期添加指定的时间间隔
DATE_SUB()	    从日期减去指定的时间间隔
DATEDIFF()	    返回两个日期之间的天数
DATE_FORMAT()	用不同的格式显示日期/时间

SQL Server Date 函数

函数	     描述
GETDATE()	 返回当前的日期和时间
DATEPART()	 返回日期/时间的单独部分
DATEADD()	 在日期中添加或减去指定的时间间隔
DATEDIFF()	 返回两个日期之间的时间
CONVERT()	 用不同的格式显示日期/时间

Date 数据类型
MySQL
DATE       - 格式：YYYY-MM-DD
DATETIME   - 格式：YYYY-MM-DD HH:MM:SS
TIMESTAMP  - 格式：YYYY-MM-DD HH:MM:SS
YEAR       - 格式：YYYY 或 YY

SQL Server
DATE            - 格式：YYYY-MM-DD
DATETIME        - 格式：YYYY-MM-DD HH:MM:SS
SMALLDATETIME   - 格式：YYYY-MM-DD HH:MM:SS
TIMESTAMP       - 格式：时间戳类型


NULL 值

表的列默认可以存放 NULL 值。
NULL 值的处理方式与其他值不同。
NULL 用作未知的或不适用的值的占位符。
无法比较 NULL 和 0；它们是不等价的。
无法使用比较运算符来测试 NULL 值，比如 =、< 或 <>。

IS NULL

SELECT * FROM table_name
WHERE column_name IS NULL;

IS NOT NULL

SELECT * FROM table_name
WHERE column_name IS NOT NULL;


NULL 函数
ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数

如果值是 NULL 则 返回 0：

SQL Server / MS Access
SELECT ISNULL(column_name,0))
FROM table_name;

Oracle
SELECT NVL(column_name,0)
FROM table_name;

MySQL
SELECT IFNULL(column_name,0)
FROM table_name;
或
SELECT COALESCE(column_name,0)
FROM table_name;


通用数据类型

数据类型定义列中存放的值的种类。
数据库表中的每个列都要求有名称和数据类型。

下面 SQL 中通用的数据类型：

数据类型	            描述
CHARACTER(n)	        字符/字符串。固定长度 n。
VARCHAR(n) 或
CHARACTER VARYING(n)	字符/字符串。可变长度。最大长度 n。
BINARY(n)	            二进制串。固定长度 n。
BOOLEAN	                存储 TRUE 或 FALSE 值
VARBINARY(n) 或
BINARY VARYING(n)	    二进制串。可变长度。最大长度 n。
INTEGER(p)	            整数值（没有小数点）。精度 p。
SMALLINT	            整数值（没有小数点）。精度 5。
INTEGER	                整数值（没有小数点）。精度 10。
BIGINT	                整数值（没有小数点）。精度 19。
DECIMAL(p,s)			精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数小数点后有 2 位数的数字。
NUMERIC(p,s)			精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）
FLOAT(p)				近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。
REAL					近似数值，尾数精度 7。
FLOAT					近似数值，尾数精度 16。
DOUBLE PRECISION		近似数值，尾数精度 16。
DATE					存储年、月、日的值。
TIME					存储小时、分、秒的值。
TIMESTAMP				存储年、月、日、小时、分、秒的值。
INTERVAL				由一些整数字段组成，代表一段时间，取决于区间的类型。
ARRAY					元素的固定长度的有序集合
MULTISET				元素的可变长度的无序集合
XML	        			存储 XML 数据

SQL 数据类型快速参考手册
不同的数据库对数据类型定义提供不同的选择。

数据类型			Access				  SQLServer				 Oracle		MySQL		 PostgreSQL
boolean				Yes/No				  Bit					 Byte		N/A			 Boolean
integer				Number(integer)	      Int					 Number		Int	Integer	 Int Integer																
float				Number(single)		  Float Real			 Number		Float		 Numeric													
currency			Currency			  Money					 N/A		N/A			 Money
string (fixed)		N/A					  Char					 Char		Char		 Char
string (variable)	Text(<256)/Memo(65k+) Varchar				 Varchar	Varchar		 Varchar									
binary object		OLE/Object/Memo/	  Binary(fixed up to 8K) Long		Blob		 Binary
		                                  Varbinary (<8K)		 Raw		Text		 Varbinary
		                                  Image (<2GB)			

用于各种数据库的数据类型和范围。

Microsoft Access
数据类型	    描述/存储
Text	        用于文本或文本与数字的组合。最多 255 个字符。	
Memo	        Memo用于更大数量的文本。最多存储 65,536 个字符。注释：无法对 memo 字段进行排序。不过它们是可搜索的。	
Byte	        允许 0 到 255 的数字。1 字节
Integer	        允许介于 -32,768 与 32,767 之间的全部数字。2 字节
Long	        允许介于 -2,147,483,648 与 2,147,483,647 之间的全部数字。4 字节
Single	        单精度浮点。处理大多数小数。4 字节
Double	        双精度浮点。处理大多数小数。8 字节
Currency	    用于货币。支持 15 位的元，外加 4 位小数。提示：您可以选择使用哪个国家的货币。8 字节
AutoNumber	    AutoNumber 字段自动为每条记录分配数字，通常从 1 开始。4 字节
Date/Time	    用于日期和时间	8 字节
Yes/No	        逻辑字段，可以显示为 Yes/No、True/False 或 On/Off。在代码中，使用常量 True 和 False （等价于 1 和 0）。注释：Yes/No 字段中不允许 Null 值.1 比特
Ole Object	    可以存储图片、音频、视频或其他 BLOBs（Binary Large OBjects）。=最多 1GB
Hyperlink	    包含指向其他文件的链接，包括网页。	
Lookup Wizard	允许您创建一个可从下拉列表中进行选择的选项列表。=4 字节

MySQL 数据类型
在 MySQL 中，有三种主要的类型：Text（文本）、Number（数字）和 Date/Time（日期/时间）类型。

Text 类型：

数据类型	      描述
CHAR(size)	      保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。
VARCHAR(size)	  保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。注释：如果值的长度大于 255，则被转换为 TEXT 类型。
TINYTEXT		  存放最大长度为 255 个字符的字符串。
TEXT			  存放最大长度为 65,535 个字符的字符串。
BLOB	 		  用于 BLOBs（Binary Large OBjects）。存放最多 65,535 字节的数据。
MEDIUMTEXT		  存放最大长度为 16,777,215 个字符的字符串。
MEDIUMBLOB		  用于 BLOBs（Binary Large OBjects）。存放最多 16,777,215 字节的数据。
LONGTEXT		  存放最大长度为 4,294,967,295 个字符的字符串。
LONGBLOB		  用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。
ENUM(x,y,z,etc.)  允许您输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。这些值是按照您输入的顺序排序的。

SET	与 ENUM 类似，不同的是，SET 最多只能包含 64 个列表项且 SET 可存储一个以上的选择。

Number 类型：

数据类型		 描述
TINYINT(size)	 带符号-128到127 ，无符号0到255。
SMALLINT(size)	 带符号范围-32768到32767，无符号0到65535, size 默认为 6。
MEDIUMINT(size)	 带符号范围-8388608到8388607，无符号的范围是0到16777215。 size 默认为9
INT(size)		 带符号范围-2147483648到2147483647，无符号的范围是0到4294967295。 size 默认为 11
BIGINT(size)	 带符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到18446744073709551615。size 默认为 20
FLOAT(size,d)	 带有浮动小数点的小数字。在 size 参数中规定显示最大位数。在 d 参数中规定小数点右侧的最大位数。
DOUBLE(size,d)	 带有浮动小数点的大数字。在 size 参数中规显示定最大位数。在 d 参数中规定小数点右侧的最大位数。
DECIMAL(size,d)	 作为字符串存储的 DOUBLE 类型，允许固定的小数点。在 size 参数中规定显示最大位数。在 d 参数中规定小数点右侧的最大位数。

注意：以上的 size 代表的并不是存储在数据库中的具体的长度，如 int(4) 并不是只能存储4个长度的数字。
int(M) 跟 int 数据类型是相同的。

Date 类型：

数据类型	 描述
DATE()	     日期。格式：YYYY-MM-DD。
			 支持的范围是从 '1000-01-01' 到 '9999-12-31'
DATETIME()	 日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS。
			 支持的范围是从 '1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'
TIMESTAMP()	 时间戳。TIMESTAMP 值使用 Unix 纪元('1970-01-01 00:00:00' UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS
			 支持的范围是从 '1970-01-01 00:00:01' UTC 到 '2038-01-09 03:14:07' UTC
TIME()	     时间。格式：HH:MM:SS。支持的范围是从 '-838:59:59' 到 '838:59:59'
YEAR()		 2 位或 4 位格式的年。
			 4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。

即使DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，
TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。

SQL Server
String
数据类型		 描述/存储
char(n)			 固定长度的字符串。最多 8,000 个字符。Defined width
varchar(n)		 可变长度的字符串。最多 8,000 个字符。2 bytes + number of chars
varchar(max)	 可变长度的字符串。最多 1,073,741,824 个字符。2 bytes + number of chars
text			 可变长度的字符串。最多 2GB 文本数据。4 bytes + number of chars
nchar			 固定长度的 Unicode 字符串。最多 4,000 个字符。	Defined width x 2
nvarchar		 可变长度的 Unicode 字符串。最多 4,000 个字符。	
nvarchar(max)	 可变长度的 Unicode 字符串。最多 536,870,912 个字符。	
ntext			 可变长度的 Unicode 字符串。最多 2GB 文本数据。	
bit				 允许 0、1 或 NULL	
binary(n)		 固定长度的二进制字符串。最多 8,000 字节。	
varbinary		 可变长度的二进制字符串。最多 8,000 字节。	
varbinary(max)	 可变长度的二进制字符串。最多 2GB。	
image			 可变长度的二进制字符串。最多 2GB。
	
Number
数据类型		描述/存储
tinyint			允许从 0 到 255 的所有数字。1 字节
smallint		允许介于 -32,768 与 32,767 的所有数字。	2 字节
int				允许介于 -2,147,483,648 与 2,147,483,647 的所有数字。4 字节
bigint			允许介于 -9,223,372,036,854,775,808 与 9,223,372,036,854,775,807 之间的所有数字。8 字节
decimal(p,s)	固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。5-17 字节
				p 参数指示可以存储的最大位数（小数点左侧和右侧）。
				s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。
numeric(p,s)	固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p,s限制如上。5-17 字节
smallmoney		介于 -214,748.3648 与 214,748.3647 之间的货币数据。	4 字节
money			介于 -922,337,203,685,477.5808 与 922,337,203,685,477.5807 之间的货币数据。	8 字节
float(n)		从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。4 或 8 字节
                n 参数指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。
real			从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。4 字节

Date 类型：
数据类型		 描述/存储
datetime		 从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33 毫秒。	8 字节
datetime2		 从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100 纳秒。	6-8 字节
smalldatetime	 从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。	4 字节
date			 仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。	3 bytes
time			 仅存储时间。精度为 100 纳秒。	3-5 字节
datetimeoffset	 与 datetime2 相同，外加时区偏移。	8-10 字节
timestamp		 存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp 值基于内部时钟，
				 不对应真实时间。每个表只能有一个 timestamp 变量。	 

其他数据类型：
数据类型			描述
sql_variant			存储最多 8,000 字节不同数据类型的数据，除了 text、ntext 以及 timestamp。
uniqueidentifier	存储全局唯一标识符 (GUID)。
xml					存储 XML 格式化数据。最多 2GB。
cursor				存储对用于数据库操作的指针的引用。
table				存储结果集，供稍后处理。


函数

SQL 拥有很多可用于计数和计算的内建函数。

Aggregate /聚合函数
计算从列中取得的值，返回一个单一的值。

常用 Aggregate 函数：
AVG()    - 返回平均值
COUNT()  - 返回行数
FIRST()  - 返回第一个记录的值
LAST()   - 返回最后一个记录的值
MAX()    - 返回最大值
MIN()    - 返回最小值
SUM()    - 返回总和

Scalar 标量函数
基于输入值，返回一个单一的值。

常用 Scalar 函数：
UCASE() 				  - 将某个字段转换为大写
LCASE() 				  - 将某个字段转换为小写
MID()   				  - 从某个文本字段提取字符，MySql 中使用
SubString(字段，1，end)   - 从某个文本字段提取字符
LEN()    				  - 返回某个文本字段的长度
ROUND()  				  - 对某个数值字段进行指定小数位数的四舍五入
NOW()    				  - 返回当前的系统日期和时间
FORMAT() 				  - 格式化某个字段的显示方式


AVG() 函数
返回数值列的平均值。
SELECT AVG(column_name) FROM table_name;

COUNT() 函数
返回匹配指定条件的行数，NULL 不计入。
SELECT COUNT(column_name) FROM table_name;
或
SELECT COUNT(DISTINCT column_name) FROM table_name;
注释：COUNT(DISTINCT) 适用于 ORACLE 和 Microsoft SQL Server，但是无法用于 Microsoft Access。


FIRST() 函数
返回指定的列中第一个记录的值。
SELECT FIRST(column_name) FROM table_name;
注释：只有 MS Access 支持 FIRST() 函数。

Server、MySQL 和 Oracle 中实现 FIRST() 功能
SQL Server 
SELECT TOP 1 column_name FROM table_name
ORDER BY column_name ASC;

MySQL 语法
SELECT column_name FROM table_name
ORDER BY column_name ASC
LIMIT 1;

Oracle 语法
SELECT column_name FROM table_name
ORDER BY column_name ASC
WHERE ROWNUM <=1;


LAST() 函数
返回指定的列中最后一个记录的值。
SELECT LAST(column_name) FROM table_name;
注释：只有 MS Access 支持 LAST() 函数。

SQL Server、MySQL 和 Oracle 中实现 LAST() 功能
SQL Server 语法
SELECT TOP 1 column_name FROM table_name
ORDER BY column_name DESC;

MySQL 语法
SELECT column_name FROM table_name
ORDER BY column_name DESC
LIMIT 1;

Oracle 语法
SELECT column_name FROM table_name
ORDER BY column_name DESC
WHERE ROWNUM <=1;


MAX() 函数
返回指定列的最大值。
SELECT MAX(column_name) FROM table_name;


MIN() 函数
返回指定列的最小值。
SELECT MIN(column_name) FROM table_name;


SUM() 函数
返回数值列的总数。
SELECT SUM(column_name) FROM table_name;


GROUP BY 语句
用于结合聚合函数，根据一个或多个列对结果集进行分组。
SELECT column_name, aggregate_function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name;


HAVING 子句
在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与聚合函数一起使用。
HAVING 子句可以让我们筛选分组后的各组数据。

语法
SELECT column_name, aggregate_function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name
HAVING aggregate_function(column_name) operator value;


UCASE() 函数
把字段的值转换为大写。
SELECT UCASE(column_name) FROM table_name;

SQL Server 的语法
SELECT UPPER(column_name) FROM table_name;


LCASE() 函数
把字段的值转换为小写。
SELECT LCASE(column_name) FROM table_name;

用于 SQL Server 的语法
SELECT LOWER(column_name) FROM table_name;


MID() 函数
用于从文本字段中提取字符。
SELECT MID(column_name,start[,length]) FROM table_name;

参数	描述
column_name	必需。要提取字符的字段。
start	必需。规定开始位置（起始值是 1）。
length	可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。


LEN() 函数
返回文本字段中值的长度。
SELECT LEN(column_name) FROM table_name;

MySQL
SELECT LENGTH(column_name) FROM table_name;


ROUND() 函数
用于把数值字段舍入为指定的小数位数。
SELECT ROUND(column_name,decimals) FROM table_name;

参数	描述
column_name	必需。要舍入的字段。
decimals	必需。规定要返回的小数位数。


NOW() 函数
返回当前系统的日期和时间。
SELECT NOW() FROM table_name;


FORMAT() 函数
用于对字段的显示进行格式化。
SELECT FORMAT(column_name,format) FROM table_name;

参数	描述
column_name	必需。要格式化的字段。
format	必需。规定格式。


快速参考
SQL 语句	        语法
AND / OR	        SELECT column_name(s)
                    FROM table_name
                    WHERE condition
                    AND|OR condition
			        
ALTER TABLE	        ALTER TABLE table_name 
                    ADD column_name datatype
                    or
                    ALTER TABLE table_name 
                    DROP COLUMN column_name
                    
AS (alias)	        SELECT column_name AS column_alias
			        FROM table_name
			        or
			        SELECT column_name
			        FROM table_name AS table_alias
                    
BETWEEN		        SELECT column_name(s)
			        FROM table_name
			        WHERE column_name
			        BETWEEN value1 AND value2
					
CREATE DATABASE		CREATE DATABASE database_name

CREATE TABLE		CREATE TABLE table_name
					(
					column_name1 data_type,
					column_name2 data_type,
					column_name2 data_type,
					...
					)
					
CREATE INDEX		CREATE INDEX index_name
					ON table_name (column_name)
					or
					CREATE UNIQUE INDEX index_name
					ON table_name (column_name)

CREATE VIEW			CREATE VIEW view_name AS
					SELECT column_name(s)
					FROM table_name
					WHERE condition
					
DELETE				DELETE FROM table_name
					WHERE some_column=some_value
					or
					DELETE FROM table_name 
					(Note: Deletes the entire table!!)

DROP DATABASE		DROP DATABASE database_name

DROP INDEX			DROP INDEX table_name.index_name (SQL Server)
					DROP INDEX index_name ON table_name (MS Access)
					DROP INDEX index_name (DB2/Oracle)					
					ALTER TABLE table_name
					DROP INDEX index_name (MySQL)
					
DROP TABLE			DROP TABLE table_name

GROUP BY			SELECT column_name, aggregate_function(column_name)
					FROM table_name
					WHERE column_name operator value
					GROUP BY column_name
					
HAVING				SELECT column_name, aggregate_function(column_name)
					FROM table_name
					WHERE column_name operator value
					GROUP BY column_name
					HAVING aggregate_function(column_name) operator value

IN					SELECT column_name(s)
					FROM table_name
					WHERE column_name					
					IN (value1,value2,..)
					
INSERT INTO			INSERT INTO table_name
					VALUES (value1, value2, value3,....)
					or
					INSERT INTO table_name
					(column1, column2, column3,...)
					VALUES (value1, value2, value3,....)

INNER JOIN			SELECT column_name(s)
					FROM table_name1
					INNER JOIN table_name2 
					ON table_name1.column_name=table_name2.column_name

LEFT JOIN			SELECT column_name(s)
					FROM table_name1
					LEFT JOIN table_name2 
					ON table_name1.column_name=table_name2.column_name

RIGHT JOIN			SELECT column_name(s)
					FROM table_name1
					RIGHT JOIN table_name2 
					ON table_name1.column_name=table_name2.column_name

FULL JOIN			SELECT column_name(s)
					FROM table_name1
					FULL JOIN table_name2 
					ON table_name1.column_name=table_name2.column_name

LIKE				SELECT column_name(s)
					FROM table_name
					WHERE column_name LIKE pattern

ORDER BY			SELECT column_name(s)
					FROM table_name
					ORDER BY column_name [ASC|DESC]
					SELECT	SELECT column_name(s)
					FROM table_name

SELECT *			SELECT *
					FROM table_name

SELECT DISTINCT		SELECT DISTINCT column_name(s)
					FROM table_name

SELECT INTO			SELECT *
					INTO new_table_name [IN externaldatabase]
					FROM old_table_name
					or
					SELECT column_name(s)
					INTO new_table_name [IN externaldatabase]
					FROM old_table_name

SELECT TOP			SELECT TOP number|percent column_name(s)
					FROM table_name
					TRUNCATE TABLE	TRUNCATE TABLE table_name

UNION				SELECT column_name(s) FROM table_name1
					UNION
					SELECT column_name(s) FROM table_name2

UNION ALL			SELECT column_name(s) FROM table_name1
					UNION ALL
					SELECT column_name(s) FROM table_name2

UPDATE				UPDATE table_name
					SET column1=value, column2=value,...
					WHERE some_column=some_value

WHERE				SELECT column_name(s)
					FROM table_name
					WHERE column_name operator value

