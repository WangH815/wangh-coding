#Python3 

#参考资料
https://www.runoob.com/python3/python3-tutorial.html
https://www.yiibai.com/python

#标识符
##作用
用于开发者标识特定对象的名称,例如：变量、常量、函数、语句块、类名等
##规范
1.由字符(一般为字母、数字和下划线)构成,第一个字符不能是数字；长度不限制
2.区分大小写
3.python2仅仅支持ASCII字符
4.Python3支持Unicode字符,具体见unicodedata模块中的Unicode 字符数据库版本
5.不能使用保留字,可通过标准库的keyword模块获取保留字
  import keyword
  keyword.kwlist
6.常见习惯
a.尽量见名知意
b.包名全小写
c.常量全大写
d.变量、函数名小驼峰(例如：listSort)
e.类名大驼峰(例如：CheckList)
f.其他命名(例如：Hello_World)


#字面量
用于表示一些内置类型的常量


#注释
#                    单行注释
#!/usr/bin/python3   脚本中声明使用的Python版本
'''
多行注释  #或者声明跨多行的字符串
'''

"""
多行注释
"""


#行与缩进
缩进表示代码块,而不使用{},多条语句写在同一行可使用分号隔开


#多行语句
单行字符建议不超过79
sum = a + \        
      b + \
      c         #等价于 sum = a + b + c ,在[],{},()中无需使用 \


#输入输出
input("\n\n 按下enter退出")
print(var)          #换行输出
print(var,end="")   #不换行输出


#模块导入
import somemodule                            #导入模块(somemodule)
from somemodule import *                     #同上
from somemodule import somefunction          #从某个模块中导入某个函数
from somemodule import firstfunc, secondfunc #从某个模块中导入多个函数 


#数据类型的判断
type()       #打印详细数据具体类型,例如 type(1) ,输出<class 'int'>;父子类类型不同
isinstance() #判断类型之间的关系,isinstance(1, int) ,输出 True;父子类类型相同


#数据类型：(标准类型)
##Python3 中有六个标准的数据类型：
Number      #数字
String      #字符串
List        #列表
Tuple       #元组
Set         #集合
Dictionary  #字典

Number/String/Tuple  #不可变数据
List/Dictionary/Set  #可变数据

##常见操作
var = value        #变量赋值
del var1,var2,...  #删除对象引用
var = None         #置为未定义

##1)Number(数字)  #不可变

###bool
var = True/False    #bool;Python2中没有布尔型
bool()       #返回False
bool('')     #返回False;其他字符串返回True
bool(0)      #返回False;其余整数返回True
bool(0.0)    #返回False;其余浮点数返回True
bool(None)   #返回False
bool(list()) #返回False;包括空列表/字典/元组等空对象

###int
0b开头为二进制数
0o开头为八进制
0x开头为十六进制
var = 1             #int,python3无long;科学计数法参见float;
var = 0b101         #二进制整数,八进制和十六进制同理
var = -0b101        #同上;负数

var =  bin(5)       #int转二进制str
var =  oct(5)       #int转八进制str
var =  hex(5)       #int转二进制str
var =  int('11',2)  #二进制str转int
var =  int('11',8)  #八进制str转int
var =  int('11',16) #十六进制str转int;第二个参数可为其他进制(不仅限于2,8,16)
int(1.1)    #返回1
int(-1.1)   #返回-1
int(1.1e2)  #返回110
int(0b11)   #返回3
int(True)   #返回1;False返回0
int('11')   #返回11;不能转换非十进制字符串
int(' 11 ') #同上,去除左右空格(包含制表符、换行符等)

###float
var = 1.0     #float,浮点,无double
var = 1.      #同上;0可省略
var = .1      #表示0.1;0可省略hos   
var = 0.1e2   #科学计数法(不严谨);表示0.1 * 10 ** 2;e可以大写为E
var = 0.1e+2  #同上
var = 0.1e-2  #表示0.1 * 10 ** (-2)

float(x)           #将x转为浮点数
float()       #返回0.0
float(0)      #返回0.0
float(False)  #返回0.0
float(1)      #返回1.0;其他整数和进制数同理
float('11')   #返回11.0;不能转换非十进制字符串
float(' 11 ') #同上,去除左右空格(包含制表符、换行符等)后处理

###complex
var = 1 + 2j   #complex,复数;默认表示 (1+2j)
var = (1 + 2j) #同上

var.real       #返回实部,浮点格式
var.imag       #返回虚部,浮点格式
complex(x)     #将x转为复数;x为数字类型或者数字类型(十进制)字符串

##2)String(字符串)  #不可变
var = ''        #空字符串
var = str()     #同上
var = 'sdas'    #双引号也可以,使用完全相同；多行字符串可使用三引号指定
var = r'sd \n'  #\为转义符,字符串前加r可使转义失效

len(var)        #返回字符数
var * n         #返回重复n次的字符串
var1 + var2     #连接字符串
str(x)          #将x转为字符串
str(5).zfill(2) #返回'05'
str(-5).zfill(2)#返回'-05'
str(5).rjust(3) #右对齐;返回'  5'
str(5).ljust(3) #右对齐;返回'5  '
var.strip()     #去除字符串左右的空格/制表符/换行符等;lstrip()/rstrip()是去除左/右的
var.strip(str)  #去除字符串左右的指定字符序列(str)
'1223212==341'.strip('123') #返回 '==34'
var1 [not] in var2          #判断字符串是否var1属于var2的子串

###字符串切片
var[starIndex:endIndex:step]  #返回 starIndex <= index < endIndex 的数据;索引表示相对位置
####     var = '1  2  3  4  5  6  7  8  9'     #实际无空格
####正向索引为  0  1  2  3  4  5  6  7  8
####反向索引为 -9 -8 -7 -6 -5 -4 -3 -2 -1 
####默认startIndex=0;endIndex=len(var);step=1
var[index]   #截取单个字符
var[2:6]     #返回'3456'
var[-7:-3]   #同上
var[-7:6]    #同上
var[2:6:2]   #返回'35'
var[6:2:-1]  #返回'7654';step为负数表示反向截取
var[2:]      #返回'3456789'
var[:2]      #返回'12'
var[2::-1]   #返回'321'
var[:2:-1]   #返回'987654'
var[:]       #返回字符串本身
var[::-1]    #取反,返回987654321

##3)Tuple(元组)      #不可变可重复
var = ('asda','asda',12)
var = 'asda','asda',12     #同上,不推荐使用
var = (20,)     #一个值tuple
var = ()        #空元组
var = tuple()   #空元组

var[n]          #按照索引访问
len(var)        #返回元素数
del var         #删除引用

##4)Sets(集合)         #可变无序不重复
var = {'asda','asda'}  #不支持var[n]形式的访问及修改
var = set()            #空集,不能使用{},{}表示空字典

len(var)       #返回元素数
var.clear()    #删除(清空)所有元素
var.add(x)     #增加单个元素
var.update(x)  #向集合增加序列(list/tuple/dict)中的元素
var.remove(x)  #删除指定元素;不存在会报错
var.discard(x) #删除指定元素;不存在不报错 
var.pop()      #随机删除一个元素
var1 - var2    #返回在var1中且不在var2中元素的集合
var1 | var2    #合并集合
var1 & var2    #返回相同元素的集合
var1 ^ var2    #返回两集合不同元素的集合

##5)List(列表)        #有序可变可重复
var = ['asda','asda',12]
var = []      #空列表
var = list()  #同上

var[1:5:2]        #切片见String
len(var)          #返回元素数
var[n] = 123      #修改列表元素的值
del var[n]        #删除元素
var.clear()       #删除(清空)所有元素
var.pop(n)        #移除指定索引的元素;默认为最后一个
var.reverse()     #反向
var.sort()        #排序;会改变列表
sorted(var)       #排序;不会改变列表
var.insert(n,obj) #指定位置插入元素
var.append(var2)  #追加单个新元素(对象);列表嵌套
var.extend(var2)  #追加var2序列中的多个元素;序列为dict时,追加元素为key
var.copy()        #复制列表;浅复制,深复制使用var.copy.deedcopy(var)

##6)Dictionary(字典)  #可变,key-value形式,key不重复;key一般使用数字或字符串
var = {}        #空字典
var = dict()    #同上
var = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}

len(var)        #返回元素数
var.keys()      #返回键的迭代器
var.values()    #返回值的迭代器
var[key]        #返回key对应的值
del var[key]    #删除指定元素(键值对)
var.pop(key)    #同上
var.clear()     #删除(清空)所有元素


#运算符
##算术
a + b   #加
a - b   #减
a * b   #乘
a / b   #除
a % b   #取模(支持浮点),值为余数部分
a // b  #整除,向(坐标轴)左取整
a ** b  #a的b次幂

##比较(关系)
==      #(对象)等于
!=      #不等于 
>       #大于
<       #小于
>=      #大于等于
<=      #小于等于

##赋值
a = b   #简单赋值     
a [算术运算符] = b  <=> a = a [算术运算符] b  #例如 a += b 等价于 a = a + b

#多变量赋值
a = b = c = 1            #多变量赋相同值,实际指向同一(内存)位置
a, b, c = 1, 2, "runoob" #多变量赋不同值
del var,var2   #删除变量
var = None          #变量重置(未定义)

##(二进制)位运算
###int(整型)数据存储方式
1.python中int一般分为普通整型(一般是32位)和长整型(大于32位);长度可认为无限制,存在sys.maxsize
2.数据存储方式
a)原码: 最高位为符号位,0为正1为负;其余代表数值本身绝对值;正数的原码、反码和补码都相同
b)反码: 除符号位外,其各位取反
c)补码: 反码加1
注: 0有 +0/-0之分
&        #(补码)按位与
|        #(补码)按位或
^        #(补码)异或
~ x      #(补码)取反;等价于 -1 - x 
x << n   #左移,23 << 3 等价于 9 * ( 2 ** 3 )
x >> n   #右移,23 >> 3 等价于 9 // ( 2 ** 3 )

##逻辑
###x/y为表达式,x=False/''/0/0.0/None/list() 等时表示False,不确定可使用bool(x)判断
x and y  #x表达式的值为False时返回False;否则返回y表达式的值
x or y   #x为True时返回x表达式的值;否则返回y表达式的值
not x    #x为True返回False;否则返回True

##成员
in,not in  #一般用于判断元素是否在序列(字符串、列表、元组等)中,返回True/False

##身份
###判断两个标识符是否引用同一对象
is,not is


#条件控制
1.if else         #else可不存在
if condition_1:   #condition为布尔表达式;True/False其他情况参见逻辑运算符x部分
    statement_block_1
else:
    statement_block_3
    
2.if elif else    #else可不存在;每个statement_block中均可嵌套条件控制语句
if condition_1:
    statement_block_1
elif condition_2:
    statement_block_2
else:
    statement_block_3
    

#循环控制
1.while     #else可不存在;一般很少出现else   
while condition:
    statement_block_1
else:
    statement_block_2
    
2.for       #else可不存在;一般很少出现else 
for <variable> in <sequence>:
    statement_block_1
else:
    statement_block_2

3.break/continue
break     #跳出当前循环体;对应else将不执行
continue  #跳出当前循环,执行下一次循环

4.pass  #空语句,是为了保持程序结构的完整性;一般用做占位语句


#迭代器(iterator)
##用于遍历集合(String/List/Tuple)元素
myList = [1,2,3,4]
it = iter(myList)   #iter()用于创建迭代器对象;
##方式一
for x in it:
    print(x, end='')
##方式二
while True:
    try:
        print(next(it))      #next()访问迭代器元素
    except StopIteration:
        sys.exit()           #退出程序


#生成器(generator)
##使用了yield的函数称为生成器;返回(生成)了迭代器对象
import sys
 
def fibonacci(n):  # 生成器函数 - 斐波那契
    a, b, counter = 0, 1, 0
    while True:
        if (counter > n): 
            return
        yield a
        a, b = b, a + b
        counter += 1
f = fibonacci(10)  # f 是一个迭代器,由生成器返回生成


#函数(function)
##定义
def function_name(args):
    statement

##函数调用
function_name(args)

##匿名函数    #使用lambda表达式;只能写一行;不能调用参数列表之外或全局参数
lambda [arg1 [,arg2,.....argn]]:expression
    
##参数传递
1.可变对象(list/set/dict等);可能会改变参数对象内容
2.不可变对象(num/str/tuple等);可能会生成新对象引用

##参数类型
1.必需参数
def func(str,num):    #func('a',1)调用时参数顺序需与定义时保持一致
2.关键字参数
def func(str,num):    #func(num=1,str='a')调用时参数顺序需与定义时不一致也是可以的
3.默认参数
def func(str,num=1):  #func('a')调用时默认参数可以不提供
4.不定长参数
def func(str,*num):   #num参数会以tuple的形式传入;如：func('a','b','c')中,num=('b','c')
def func(str,**num):  #num参数会以dict的形式传入;num参数以key=value的形式,如：func('a',2='b','c'=3)
def func(str,*,str2): #*后面的参数需关键字参数的形式传入;其余待补充

##return
return [expression]表达式用于退出函数,但不是函数必需的语句
return       #退出函数,不返回任何值
return None  #同上


#变量作用域(范围)
L (Local)       #局部作用域;一般为闭包函数或lambda表达式中
E (Enclosing)   #闭包函数外的函数中;也可看做是局部变量
G (Global)      #全局作用域;非闭包函数外
B (Built-in)    #内建(内置)作用域;python语言内建,任何语句中皆可使用

##使用规则
L –> E –> G –>B 的规则查找

例如：
x = int(2.9)         #内建作用域
 
g_count = 0          #全局作用域
def outer():
    o_count = 1      #闭包函数外的函数中
    def inner():
        i_count = 2  #局部作用域

##作用域的引入
1.模块(module),类(class)以及函数(def、lambda)才会引入新的作用域,
2.if/elif/else/、try/except、for/while 等代码块不会引入新的作用域,其语句内定义的变量,外部也可以访问

##作用域修改
num = 1          #全局变量
def fun():
    global num   #函数内使用global声明全局变量,使得函数内部可以修改全局变量
    num = 10

def outer():
    num = 10           #Enclosing
    def inner():
        nonlocal num   #nonlocal关键字声明Enclosing作用域的变量,可以使得内部可以修改
        num = 100
        print(num)
    inner()

##内建作用域可使用下列语句查询
import builtins
dir(builtins)    #返回字符串格式列表

##特殊情况
###错误使用变量
a = 10
def test():
    a = a + 1  #局部变量a未声明
    print(a)
###修改后
a = 10
def test(a):   #通过参数传递
    a = a + 1
    print(a)


#数据结构
##列表作为堆栈(先进后出,后进先出)
stack = [1,2,3]
stack.append(4)  #进栈
stack.pop()      #出栈

##列表作为队列使用(先进先出,后进后出)
from collections import deque
queue = deque(["Eric", "John", "Michael"])
queue.append("Terry")    #进队
queue.popleft()          #出队

##列表推导(生成)式
var = [1,2,3]
[3*x for x in var]        #返回[3,6,9]
[x**2 for x in range(3)]  #返回[0,1,4]
[x*2 for x in [1,2,'3']]  #返回[2,4,'33']
[[x,x**2] for x in var]   #返回[[1,1],[2,4],[3,9]]
[x for x in range(3) if x > 1]    #if为过滤条件
[x*y for x in var1 for y in var2] #双重for循环

##遍历
###dict遍历
knights = {'gallahad': 'the pure', 'robin': 'the brave'}
for k, v in knights.items():
    print(k, v)

###遍历多个序列   
for q, a in zip([1,2,3], ['a','b','c']):
    print(q, a)

###同时获取索引和序列元素值 
for i, v in enumerate(['tic', 'tac', 'toe']):
    print(i, v)


#module(模块)
import module1[, module2[,... moduleN]          #模块导入,
from modname import name1[, name2[, ... nameN]] #部分内容
from modname import *                           #全部

import support    #导入support.py

dir(modname)  #返回模块内定义的所有名称的字符串列表的形式

##命令行提示符
sys.ps1  #主提示符'>>>'由ps1定义,可修改
sys.ps2  #副提示符'...'由ps2定义,可修改


#输入和输出
##输出格式美化
1.表达式语句             #输出值
2.print()函数            #输出值
3.文件对象的write()方法  #输出到文件;标准输出文件可使用sys.stout引用

##输出字符串化
1.str()        #输出字符串化(用户易读);数据类型
2.var.format() #字符串格式化输出
2.rstr()       #输出字符串化(解释器易读);函数,参数可以是任意python对象;可以转义特殊字符

##print()   #调试输出最常用的函数
print(var)                   #输出var的值;输出后换行
print(var,end='')            #输出后不换行;end默认值为换行符(\n)
print(var,end='...')         #指定结束符 
print(var1,var2,...varn)     #输出多个变量的值,默认以空格隔开
print('PI：%5.3f' % 3.1415)  #老版格式化输出;推荐使用format()格式化

##format()  #格式化函数
'{} == {}'.format(var0,var1)       #{}表示变量位置,其数量参数数量保持一致(少于也是可以,但没有实际意义)
'{1} == {0}'.format(var0,var1)     #{}中含数字表示格式化参数的索引
'{0[key1]} {0[key2]}'.format(dict) #字典(value)格式化
'{key1} {key2}'.format(**dict)     #同上
{:.3f}    #表示float的格式化;保留小数点后3位
{1:6.3f}  #表示格式化第二个参数;有效位(包括小数点)6位,不足补空格;保留三位小数
{0:10}    #格式化字符串,保留10位,左对齐,不足补空格

##input()  
str = input("请输入：")  #读取键盘输入并赋值给str


#文件读写
f = open(filename, mode)          #创建文件对象
with open(filename, mode) as f:   #同上,在异常情况能关闭文件

##filename
filename = './tmp/1.txt'  #相对路径
filename = '/tmp/1.txt'   #绝对路径

##mode   #非必需参数,默认为读模式,模式组合参见 https://www.runoob.com/python3/python3-file-methods.html
r   #读模式
w   #写模式
b   #二进制
a   #追加

##常用方法
f.read()      #读取全部数据,返回字符串或二进制对象
f.readline()  #读取一行数据;返回为空表示到了最后一行
f.readlines() #读取所有行
f.write(str)  #写入文件并返回写入字符数  
f.tell()      #返回操作指针位置(字节数)
f.seek()      #移动操作指针位置(字符)
f.seek(n,0)   #从起始位置即文件首行首字符开始移动n个字符
f.seek(n,1)   #表示从当前位置往后移动n个字符
f.seek(-n,2)  #表示从文件的结尾往前移动n个字符
f.close()     #关闭文件 

##序列化和反序列化
pickle.dump(obj, file, [,protocol]) 
pickle.load(file)


#file
f = open(filename, mode)  #常见方式
##完整方式
f = open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
###参数说明
file        #必需,文件路径（相对或者绝对路径）
mode        #可选,文件打开模式;具体见 https://www.runoob.com/python3/python3-file-methods.html
buffering   #设置缓冲
encoding    #一般使用utf8
errors      #报错级别
newline     #区分换行符
closefd     #传入的file参数类型
opener

##常用方法
file.close()                 #关闭文件
file.flush()                 #刷新文件内部缓冲,缓冲区的数据立刻写入文件。
file.fileno()                #返回一个整型的文件描述符(file descriptor FD 整型)
file.isatty()                #如果文件连接到一个终端设备返回 True,否则返回 False。
file.next()                  #返回文件下一行,python3不支持
file.read([size])            #从文件读取指定的字节数,未给定或为负则读取所有。
file.readline([size])        #读取整行,包括 "\n" 字符。
file.readlines([sizeint])    #读取所有行并返回列表,若给定sizeint>0,返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。
file.seek(offset[, whence])  #设置文件当前位置
file.tell()                  #返回文件当前位置。
file.truncate([size])        #从文件的首行首字符开始截断,截断文件为 size 个字符,无 size 表示从当前位置截断；截断之后后面的所有字符被删除,其中 Widnows 系统下的换行代表2个字符大小。
file.write(str)              #将字符串写入文件,返回的是写入的字符长度。
file.writelines(sequence)    #向文件写入一个序列字符串列表,如果需要换行则要自己加入每行的换行符。


#os文件和目录操作
##具体参见
https://www.runoob.com/python3/python3-os-file-methods.html


#错误和异常
##错误   #一般是语法错误

##异常处理
###例程一
import sys
 
try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except OSError as err:        #OS异常
    print("OS error: {0}".format(err))
except ValueError:            #value异常
    print("Could not convert data to an integer.")
except:                       #其他异常
    print("Unexpected error:", sys.exc_info()[0])
    raise                     #不执行raise之后的语句
##例程二
for arg in sys.argv[1:]:
    try:
        f = open(arg, 'r')
    except IOError:
        print('cannot open', arg)
    else:        #放在所有except语句之后,未产生异常时执行
        print(arg, 'has', len(f.readlines()), 'lines')
        f.close()
##例程三
try:
    raise KeyboardInterrupt  #主动键盘中断
finally:                     #finally语句在任何情况下都会执行;若异常没有被except捕获,则会在finally语句之后被抛出
    print('Goodbye, world!')

##主动抛出异常
raise NameError('HiThere')

##用户自定义异常
class MyError(Exception):          #自定义异常类,继承于Exception
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

##自定义异常的使用
try:
    raise MyError(2*2)    #主动抛出异常
except MyError as e:      #捕获异常
    print('My exception occurred, value:', e.value)

##预定义清理行为
with open("myfile.txt") as f:  #打开文件多是用这种方式,可保证文件在任何情况下都会关闭
    for line in f:
        print(line, end="")


#面向对象

##类的定义
class people:
    name = ''    #属性1
    age = 0      #属性2
    __weight = 0 #私有属性,__开头的为私有,类的外部无法访问
    def __init__(self,n,a,w):   #定义构造方法
        self.name = n
        self.age = a
        self.__weight = w       #给私有属性传值
    def speak(self):            #定义普通方法,self指的是实例本身;比函数多了一个self参数
        print("%s 说: 我 %d 岁。" %(self.name,self.age))

p = people('runoob',10,30)  #实例化类
p.speak()                   #执行实例化类的方法

class student(people):   #继承people类;可以多继承,逗号隔开即可
    grade = ''                      #定义子类属性
    def __init__(self,n,a,w,g):     #定义子类构造方法
        people.__init__(self,n,a,w) #调用父类构造方法
        self.grade = g              #子类构造方法不同于父类的部分
    def speak(self):                #重写父类方法
        print("%s 说: 我 %d 岁了,我在读 %d 年级"%(self.name,self.age,self.grade))
 
s = student('ken',10,60,3)  #实例化子类
s.speak()                   #执行实例化子类的方法
super(student,s).speak()    #使用子类对象条用父类已覆盖(重写)的方法

##类的私有方法：
__init__     #构造函数,在生成对象时调用
__del__      #析构函数,释放对象时使用
__repr__     #打印,转换
__setitem__  #按照索引赋值
__getitem__  #按照索引获取值
__len__      #获得长度
__cmp__      #比较运算
__call__     #函数调用
__add__      #加运算
__sub__      #减运算
__mul__      #乘运算
__truediv__  #除运算
__mod__      #求余运算
__pow__      #乘方

##运算符重载
class Vector:
   def __init__(self, a, b):
      self.a = a
      self.b = b
 
   def __str__(self):
      return 'Vector (%d, %d)' % (self.a, self.b)
   
   def __add__(self,other):
      return Vector(self.a + other.a, self.b + other.b)
 
v1 = Vector(2,10)
v2 = Vector(5,-2)
print (v1 + v2)


#常用标准库

##操作系统接口
dir(os)                  #返回os模块的所有功能
help(os)                 #返回os模块的文档
import os                #导入os模块
os.getcwd()              #返回当前工作目录
os.chdir('/tmp/log')     #修改当前工作目录
os.system('mkdir java')  #执行系统命令

import shutil                      #shutil模块主要用于日常文件和目录的管理
shutil.copyfile('1.log', '2.log')  #复制文件
shutil.move('/files', 'dir')       #移动文件

#文件通配符
import glob
glob.glob('*.py')   #返回匹配到的文件列表


#正则表达式      #python提供Perl风格的正则表达式模式;re模块提供全部正则表达式功能

##re.match()     #从字符串起始位置匹配一个模式;匹配成功返回match对象,否则返回None
re.match(pattern, string[, flags=0])
    #参数说明
    pattern	匹配的正则表达式
    string	要匹配的字符串。
    flags	标志位，表示匹配方式，如：是否区分大小写，多行匹配等等。
 
re.match('www', 'www.runoob.com')         #返回<re.Match object; span=(0, 3), match='www'>
re.match('www', 'www.runoob.com').span()  #返回(0,3)

import re 
line = "Cats are smarter than dogs"
# .* 表示任意匹配除换行符（\n、\r）之外的任何单个或多个字符
matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)
 
if matchObj:
   print ("matchObj.group() : ", matchObj.group())
   print ("matchObj.group(1) : ", matchObj.group(1))
   print ("matchObj.group(2) : ", matchObj.group(2))
else:
   print ("No match!!")

##re.search()   #扫描整个字符串并返回第一个成功的匹配
re.search(pattern, string[, flags=0])

re.search('www', 'www.runoob.com').span()  #返回(1,3)
re.search('com', 'www.runoob.com').span()  #返回(11,14)

##re.sub()
re.sub(pattern, repl, string[, count=0[, flags=0]])
    #参数说明
    pattern   #正则中的模式字符串。
    repl      #替换的字符串，也可为一个函数。
    string    #要被查找替换的原始字符串。
    count     #模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。
    flags     #编译时用的匹配模式，数字形式。

##re.compile()
##编译正则表达式，生成Pattern对象，供 match() 和 search() 这两个函数使用。
re.compile(pattern[, flags])
p = re.compile(r'\d+')              #生成pattern对象,匹配至少一个数字
m = p.match('one12twothree34four')  #进行匹配

##其他常用方法
re.findall(string[, pos[, endpos]])     #查找所有子串列表;后面两个参数分别指定查找指定位置
re.finditer(pattern, string[, flags=0]) #类似findall(),返回迭代器
re.split(pattern, string[, maxsplit=0, flags=0]) #返回字符串分割列表;maxsplit表示最大匹配次数

##pattern常见模式
.      #匹配任意字符(换行符除外),flag=re.DOTALL时可以匹配任意字符;其他情况需查看flag
^      #匹配开头
$      #匹配结尾
[]     #[]中的任意一个字符
[bnc]  #匹配'b'、'n'或'c'
[0-9]  #匹配任意一个数字
[a-z]  #匹配小写字母;大写字母同理
[^123] #匹配除1、2或3之外的字符
\d     #等价于[0-9]  
\D     #等价于[^0-9]  
\s     #匹配任何空白字符,等价于[\f\n\r\t\v]
\S     #匹配任何非空白字符,等价于[^\f\n\r\t\v]
\w     #匹配字母数字下划线,等价于[A-Za-z0-9_]
\W     #匹配非字母数字下划线,等价于[^A-Za-z0-9_]


#mysql数据库连接
##安装PyMySQL,python2使用PyMySQL
pip3 install PyMySQL

##示例
###select
import pymysql
 
db = pymysql.connect('主机地址','用户名','密码','数据库' )  #打开数据库连接
cursor = db.cursor()                     #创建一个游标对象 cursor
sql = 'SELECT VERSION()'                 #构建sql语句;语句较长时可使用'''/"""(使用 \ 也可以)构建换行的sql语句
cursor.execute(sql)                      #执行sql
data = cursor.fetchone()                 #获取单条返回数据;多条数据可使用fetchall()
print ('Database version : %s ' % data)  #打印获取的信息
db.close()                               #关闭数据库连接

###update
sql = '''INSERT INTO EMPLOYEE(FIRST_NAME,
         LAST_NAME, AGE, SEX, INCOME)
         VALUES ('Mac', 'Mohan', 20, 'M', 2000)'''
####sql另一种书写方式
sql = '''INSERT INTO EMPLOYEE(FIRST_NAME,
         LAST_NAME, AGE, SEX, INCOME)
         VALUES ('%s', '%s',  %s,  '%s',  %s)" % 
         ('Mac', 'Mohan', 20, 'M', 2000)'''        
try:   
   cursor.execute(sql)  #执行sql语句
   db.commit()          #提交;涉及修改库表的都需要commit()
except:  
   db.rollback()        #发生异常则回滚
   
##事务操作的简单封装
import pymysql

class DB():
    def __init__(self, host='localhost', port=3306, db='', user='root', passwd='root', charset='utf8'):
        #建立连接 
        self.conn = pymysql.connect(host=host, port=port, db=db, user=user, passwd=passwd, charset=charset)
        #创建游标,操作设置为字典类型        
        self.cur = self.conn.cursor(cursor = pymysql.cursors.DictCursor)

    def __enter__(self):       
        return self.cur   #返回游标

    def __exit__(self, exc_type, exc_val, exc_tb):      
        self.conn.commit()    #提交执行  
        self.cur.close()      #关闭游标
        self.conn.close()     #关闭数据库连接


if __name__ == '__main__':
    with DB(host='192.168.99.1',user='root',passwd='root',db='mysql') as db:
        db.execute('select * from course')
        print(db)
        for i in db:
            print(i)


#网络编程
1.Socket       #低级别网络服务支持,提供操作系统Socket接口的全部功能
2.SoketServer  #高级别网络服务,提供了服务中心类,简化了开发

##scoket
###实例
#!/usr/bin/python3
# 文件名：server.py
import socket
import sys

serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #创建 socket 对象
host = socket.gethostname()                    #获取本地主机名
port = 9999                                    #设置端口号
serversocket.bind((host, port))                #绑定端口号
serversocket.listen(5)                         #设置最大连接数，超过后排队
while True:   
    clientsocket,addr = serversocket.accept()  #建立客户端连接   
    print("连接地址: %s" % str(addr))    
    msg='欢迎访问菜鸟教程！'+ "\r\n"
    clientsocket.send(msg.encode('utf-8'))     #向客户端发送数据,数据指定为utf-8编码
    clientsocket.close()                       #关闭客户端连接

#!/usr/bin/python3
# 文件名：client.py

import socket
import sys

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #创建 socket 对象
host = socket.gethostname() #获取本地主机名
port = 9999                 #设置端口号
s.connect((host, port))     #连接服务，指定主机和端口
msg = s.recv(1024)          #接收小于 1024 字节的数据
s.close()

print (msg.decode('utf-8'))