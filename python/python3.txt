#Python3 

#参考资料
https://www.runoob.com/python3/python3-tutorial.html
https://www.yiibai.com/python

#标识符
##作用
用于开发者标识特定对象的名称，例如：变量、常量、函数、语句块、类名等
##规范
1.由字符(一般为字母、数字和下划线)构成，第一个字符不能是数字；长度不限制
2.区分大小写
3.python2仅仅支持ASCII字符
4.Python3支持Unicode字符，具体见unicodedata模块中的Unicode 字符数据库版本
5.不能使用保留字，可通过标准库的keyword模块获取保留字
  import keyword
  keyword.kwlist
6.常见习惯
a.尽量见名知意
b.包名全小写
c.常量全大写
d.变量、函数名小驼峰(例如：listSort)
e.类名大驼峰(例如：CheckList)
f.其他命名(例如：Hello_World)


#字面量
用于表示一些内置类型的常量


#注释
#                    单行注释
#!/usr/bin/python3   脚本中声明使用的Python版本
'''
多行注释  #或者声明跨多行的字符串
'''

"""
多行注释
"""


#行与缩进
缩进表示代码块，而不使用{}，多条语句写在同一行可使用分号隔开


#多行语句
单行字符建议不超过79
sum = a + \        
      b + \
      c         #等价于 sum = a + b + c ,在[],{},()中无需使用 \


#输入输出
input("\n\n 按下enter退出")
print(var_name)          #换行输出
print(var_name,end="")   #不换行输出


#模块导入
import somemodule                            #导入模块(somemodule)
from somemodule import *                     #同上
from somemodule import somefunction          #从某个模块中导入某个函数
from somemodule import firstfunc, secondfunc #从某个模块中导入多个函数 


#数据类型的判断
type()       #打印详细数据具体类型，例如 type(1) ,输出<class 'int'>;父子类类型不同
isinstance() #判断类型之间的关系，isinstance(1, int) ,输出 True;父子类类型相同


#数据类型：(标准类型)
##Python3 中有六个标准的数据类型：
Number      #数字
String      #字符串
List        #列表
Tuple       #元组
Set         #集合
Dictionary  #字典

Number/String/Tuple  #不可变数据
List/Dictionary/Set  #可变数据

##常见操作
var_name = value            #变量赋值
del var_name1,var_name2,... #删除对象引用
var_name = None             #置为未定义

##1)Number(数字)  #不可变

###bool
var_name = True/False    #bool;Python2中没有布尔型
bool()       #返回False
bool('')     #返回False;其他字符串返回True
bool(0)      #返回False;其余整数返回True
bool(0.0)    #返回False;其余浮点数返回True
bool(None)   #返回False
bool(list()) #返回False;包括空列表/字典/元组等空对象

###int
0b开头为二进制数
0o开头为八进制
0x开头为十六进制
var_name = 1             #int，python3无long;科学计数法参见float;
var_name = 0b101         #二进制整数，八进制和十六进制同理
var_name = -0b101        #同上;负数
var_name =  bin(5)       #int转二进制str
var_name =  oct(5)       #int转八进制str
var_name =  hex(5)       #int转二进制str
var_name =  int('11',2)  #二进制str转int
var_name =  int('11',8)  #八进制str转int
var_name =  int('11',16) #十六进制str转int;第二个参数可为其他进制(不仅限于2,8,16)
int(1.1)    #返回1
int(-1.1)   #返回-1
int(1.1e2)  #返回110
int(0b11)   #返回3
int(True)   #返回1;False返回0
int('11')   #返回11;不能转换非十进制字符串
int(' 11 ') #同上，去除左右空格(包含制表符、换行符等)

###float
var_name = 1.0     #float，浮点，无double
var_name = 1.      #同上;0可省略
var_name = .1      #表示0.1;0可省略hos   
var_name = 0.1e2   #科学计数法(不严谨);表示0.1 * 10 ** 2;e可以大写为E
var_name = 0.1e+2  #同上
var_name = 0.1e-2  #表示0.1 * 10 ** (-2)
float(x)           #将x转为浮点数
float()       #返回0.0
float(0)      #返回0.0
float(False)  #返回0.0
float(1)      #返回1.0;其他整数和进制数同理
float('11')   #返回11.0;不能转换非十进制字符串
float(' 11 ') #同上，去除左右空格(包含制表符、换行符等)

###complex
var_name = 1 + 2j   #complex，复数

##2)String(字符串)  #不可变
var_name = ''       #空字符串
var_name = str()    #同上
var_name = 'sdas'   #双引号也可以，使用完全相同；多行字符串可使用三引号指定
var_name = r'sd \n' #\为转义符，字符串前加r可使转义失效
###字符串切片
var_name = '123456789'
####正向索引为 [ 0, 8]
####反向索引为 [-9,-1]
####默认startIndex=0;endIndex=len(var_name)-1;step=1
####
var_name[starIndex:endIndex:step]

var_name[]

##3)Tuple(元组)      #不可变可重复
var_name = ('asda','asda',12)
var_name = 'asda','asda',12     #同上，不推荐使用
var_name = (20,)     #一个值tuple
var_name = ()        #空元组
var_name = tuple()   #空元组

##4)Sets(集合)        #可变无序不重复
var_name = {'asda','asda'}
var_name = set() #空集，不能使用{}，{}表示空字典

##5)List(列表)        #有序可变可重复
var_name = ['asda','asda',12]
var_name = []      #空列表
var_name = list()  #同上

##6)Dictionary(字典)  #可变,key-value形式，key不重复;
var_name = {}        #空字典
var_name = dict()    #同上
var_name = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}
var_name.keys()      #返回键的列表格式
var_name.values()    #返回值得列表格式


#运算符
##算术
a + b   #加
a - b   #减
a * b   #乘
a / b   #除
a % b   #取模(支持浮点)，值为余数部分
a // b  #整除，向(坐标轴)左取整
a ** b  #a的b次幂

##比较(关系)
==      #(对象)等于
!=      #不等于 
>       #大于
<       #小于
>=      #大于等于
<=      #小于等于

##赋值
a = b   #简单赋值     
a [算术运算符] = b  <=> a = a [算术运算符] b  #例如 a += b 等价于 a = a + b

#多变量赋值
a = b = c = 1            #多变量赋相同值，实际指向同一(内存)位置
a, b, c = 1, 2, "runoob" #多变量赋不同值
del var_name,var_name2   #删除变量
var_name = None          #变量重置(未定义)

##(二进制)位运算
###int(整型)数据存储方式
1.python中int一般分为普通整型(一般是32位)和长整型(大于32位);长度可认为无限制，存在sys.maxsize
2.数据存储方式
a)原码: 最高位为符号位，0为正1为负;其余代表数值本身绝对值;正数的原码、反码和补码都相同
b)反码: 除符号位外，其各位取反
c)补码: 反码加1
注: 0有 +0/-0之分
&        #(补码)按位与
|        #(补码)按位或
^        #(补码)异或
~ x      #(补码)取反;等价于 -1 - x 
x << n   #左移，23 << 3 等价于 9 * ( 2 ** 3 )
x >> n   #右移，23 >> 3 等价于 9 // ( 2 ** 3 )

##逻辑
###x/y为表达式，x=False/''/0/0.0/None/list() 等时表示False，不确定可使用bool(x)判断
x and y  #x表达式的值为False时返回False;否则返回y表达式的值
x or y   #x为True时返回x表达式的值;否则返回y表达式的值
not x    #x为True返回False;否则返回True

##成员
in，not in  #一般用于判断元素是否在序列中，返回True/False

##身份
###判断两个标识符是否引用同一对象
is，not is


#条件控制
1.if else         #else可不存在
if condition_1:   #condition为布尔表达式;True/False其他情况参见逻辑运算符x部分
    statement_block_1
else:
    statement_block_3
    
2.if elif else    #else可不存在;每个statement_block中均可嵌套条件控制语句
if condition_1:
    statement_block_1
elif condition_2:
    statement_block_2
else:
    statement_block_3
    

#循环控制
1.while     #else可不存在;一般很少出现else   
while condition:
    statement_block_1
else:
    statement_block_2
    
2.for       #else可不存在;一般很少出现else 
for <variable> in <sequence>:
    statement_block_1
else:
    statement_block_2

3.break/continue
break     #跳出当前循环体;对应else将不执行
continue  #跳出当前循环，执行下一次循环

4.pass  #空语句，是为了保持程序结构的完整性;一般用做占位语句


#迭代器(iterator)
##用于遍历集合(String/List/Tuple)元素
myList = [1,2,3,4]
it = iter(myList)   #iter()用于创建迭代器对象;
##方式一
for x in it:
    print(x, end='')
##方式二
while True:
    try:
        print(next(it))      #next()访问迭代器元素
    except StopIteration:
        sys.exit()           #退出程序


#生成器(generator)
##使用了yield的函数称为生成器;返回(生成)了迭代器对象
import sys
 
def fibonacci(n):  # 生成器函数 - 斐波那契
    a, b, counter = 0, 1, 0
    while True:
        if (counter > n): 
            return
        yield a
        a, b = b, a + b
        counter += 1
f = fibonacci(10)  # f 是一个迭代器，由生成器返回生成


列表 list
可修改
访问方式
list_name[i]   第i+1个元素      0<=i<len(list_name)
list_name[-j]  倒数第j个元素    0<j<=len(list_name)
list_name[x:y] x+1倒y之间的元素 0<=x<y<len(list_name)
list_name[k:]  k+1开始之后的元素
list_name[:t]  t之前的元素
del list_name[访问方式] 删除元素
list可以嵌套，访问方式同C语言中多维数组

元组 tuple
不可修改
tuple_name = ('sdfsd','s',1231)/'sdfsd','s',1231
访问方式类似于list
删除只能删除全部元素，不能删除特定元素。删除元组会出现异常

字典 dictionary
key不能为列表，可以为数字，字符串，元组；value无限制
dic_name = {key1 : value1, key2 : value2 }
访问方式
dic_name[key]


迭代器 iterator
迭代是Python最强大的功能之一，是访问集合元素的一种方式。
迭代器是一个可以记住遍历的位置的对象。
迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。
迭代器有两个基本的方法：iter() 和 next()。
字符串，列表或元组对象都可用于创建迭代器

#!/usr/bin/python3
 
list=[1,2,3,4]
it = iter(list)    # 创建迭代器对象
for x in it:
    print (x, end=" ")

输出：
1 2 3 4
  
#!/usr/bin/python3
 
import sys         # 引入 sys 模块
 
list=[1,2,3,4]
it = iter(list)    # 创建迭代器对象
 
while True:
    try:
        print (next(it))
    except StopIteration:
        sys.exit()

输出:
1
2
3
4


生成器  generator
使用了 yield 的函数被称为生成器

#!/usr/bin/python3

import sys

def fibonacci(n): # 生成器函数 - 斐波那契
    a, b, counter = 0,1,0
    while True
        if (counter > n):
            return
        yield a
        a, b = b, a + b
        counter += 1
f = fibonacci(10) # f 是一个迭代器，由生成器返回生成

while True:
    try:
        print (next(f), end = " ")
    except StopIteration:
        sys.exit()
 
输出:
0 1 1 2 3 5 8 13 21 34 55


函数

def 函数名(参数列表):
    函数体

匿名函数
python 使用 lambda 来创建匿名函数
lambda [arg1 [,arg2,.....argn]]:expression


变量作用域

L (Local)     局部作用域
E (Enclosing) 闭包函数外的函数中
G (Global)    全局作用域
B (Built-in)  内建作用域

以 L –> E –> G –>B 的规则查找 

例如：
x = int(2.9)         # 内建作用域
 
g_count = 0          # 全局作用域
def outer():
    o_count = 1      # 闭包函数外的函数中
    def inner():
        i_count = 2  # 局部作用域

Python 中只有模块(module)，类(class)以及函数(def、lambda)才会引入新的作用域，
其它的代码块(如 if/elif/else/、try/except、for/while等)是不会引入新的作用域的，
也就是说这些语句内定义的变量，外部也可以访问


模块 module
import语句
多次执行import，模块只会导入一次
import module1[, module2[,... moduleN] 导入模块

例如导入 support.py
import support
support.函数名(参数列表) 使用module中定义的函数

from ... import 语句
从模块中导入一个指定的部分到当前命名空间中
from modname import name1[, name2[, ... nameN]] 部分内容
from modname import *                           全部

内置函数 dir()
可以找到模块内定义的所有名称。以一个字符串列表的形式返回


>>> 主提示符由标准module sys.ps1定义，可修改
... 副提示符由标准module sys.ps2定义，亦可修改


包
模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 


输出
Python两种输出值的方式: 
表达式语句和 print() 函数。

第三种方式是使用文件对象的 write() 方法，
标准输出文件可以用 sys.stdout 引用。

如果你希望输出的形式更加多样，
可以使用 str.format() 函数来格式化输出值。

如果你希望将输出的值转成字符串，
可以使用 repr() 或 str() 函数来实现。

str()： 函数返回一个用户易读的表达形式，可以转义字符串中的特殊字符
repr()： 产生一个解释器易读的表达形式，其的参数可以是 Python 的任何对象


输入  
input()函数，读取键盘内容


文件的读写
open()返回一个file的文件对象
基本格式 open(filename,mode)

f = open("path/filename", "w")

文件对象的读写方法用于操作文件


基本数据的序列化合反序列化
pickle模块


os模块提供非常丰富的方法来处理文件和目录


异常处理

20

