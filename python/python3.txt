#Python3 

#参考资料
https://www.runoob.com/python3/python3-tutorial.html
https://www.yiibai.com/python

#标识符
##作用
用于开发者标识特定对象的名称，例如：变量、常量、函数、语句块、类名等
##规范
1.由字符(一般为字母、数字和下划线)构成，第一个字符不能是数字；长度不限制
2.区分大小写
3.python2仅仅支持ASCII字符
4.Python3支持Unicode字符，具体见unicodedata模块中的Unicode 字符数据库版本
5.不能使用保留字，可通过标准库的keyword模块获取保留字
  import keyword
  keyword.kwlist
6.常见习惯
a.尽量见名知意
b.包名全小写
c.常量全大写
d.变量、函数名小驼峰(例如：listSort)
e.类名大驼峰(例如：CheckList)
f.其他命名(例如：Hello_World)


#字面量
用于表示一些内置类型的常量


#注释
#                    单行注释
#!/usr/bin/python3   脚本中声明使用的Python版本
'''
多行注释  #或者声明跨多行的字符串
'''

"""
多行注释
"""


#行与缩进
缩进表示代码块，而不使用{}，多条语句写在同一行可使用分号隔开


#多行语句
单行字符建议不超过79
sum = a + \        
      b + \
      c         #等价于 sum = a + b + c ,在[],{},()中无需使用 \


#输入输出
input("\n\n 按下enter退出")
print(var)          #换行输出
print(var,end="")   #不换行输出


#模块导入
import somemodule                            #导入模块(somemodule)
from somemodule import *                     #同上
from somemodule import somefunction          #从某个模块中导入某个函数
from somemodule import firstfunc, secondfunc #从某个模块中导入多个函数 


#数据类型的判断
type()       #打印详细数据具体类型，例如 type(1) ,输出<class 'int'>;父子类类型不同
isinstance() #判断类型之间的关系，isinstance(1, int) ,输出 True;父子类类型相同


#数据类型：(标准类型)
##Python3 中有六个标准的数据类型：
Number      #数字
String      #字符串
List        #列表
Tuple       #元组
Set         #集合
Dictionary  #字典

Number/String/Tuple  #不可变数据
List/Dictionary/Set  #可变数据

##常见操作
var = value        #变量赋值
del var1,var2,...  #删除对象引用
var = None         #置为未定义

##1)Number(数字)  #不可变

###bool
var = True/False    #bool;Python2中没有布尔型
bool()       #返回False
bool('')     #返回False;其他字符串返回True
bool(0)      #返回False;其余整数返回True
bool(0.0)    #返回False;其余浮点数返回True
bool(None)   #返回False
bool(list()) #返回False;包括空列表/字典/元组等空对象

###int
0b开头为二进制数
0o开头为八进制
0x开头为十六进制
var = 1             #int，python3无long;科学计数法参见float;
var = 0b101         #二进制整数，八进制和十六进制同理
var = -0b101        #同上;负数

var =  bin(5)       #int转二进制str
var =  oct(5)       #int转八进制str
var =  hex(5)       #int转二进制str
var =  int('11',2)  #二进制str转int
var =  int('11',8)  #八进制str转int
var =  int('11',16) #十六进制str转int;第二个参数可为其他进制(不仅限于2,8,16)
int(1.1)    #返回1
int(-1.1)   #返回-1
int(1.1e2)  #返回110
int(0b11)   #返回3
int(True)   #返回1;False返回0
int('11')   #返回11;不能转换非十进制字符串
int(' 11 ') #同上，去除左右空格(包含制表符、换行符等)

###float
var = 1.0     #float，浮点，无double
var = 1.      #同上;0可省略
var = .1      #表示0.1;0可省略hos   
var = 0.1e2   #科学计数法(不严谨);表示0.1 * 10 ** 2;e可以大写为E
var = 0.1e+2  #同上
var = 0.1e-2  #表示0.1 * 10 ** (-2)

float(x)           #将x转为浮点数
float()       #返回0.0
float(0)      #返回0.0
float(False)  #返回0.0
float(1)      #返回1.0;其他整数和进制数同理
float('11')   #返回11.0;不能转换非十进制字符串
float(' 11 ') #同上，去除左右空格(包含制表符、换行符等)后处理

###complex
var = 1 + 2j   #complex，复数;默认表示 (1+2j)
var = (1 + 2j) #同上

var.real       #返回实部，浮点格式
var.imag       #返回虚部，浮点格式
complex(x)     #将x转为复数;x为数字类型或者数字类型(十进制)字符串

##2)String(字符串)  #不可变
var = ''        #空字符串
var = str()     #同上
var = 'sdas'    #双引号也可以，使用完全相同；多行字符串可使用三引号指定
var = r'sd \n'  #\为转义符，字符串前加r可使转义失效

len(var)        #返回字符数
var * n         #返回重复n次的字符串
var1 + var2     #连接字符串
str(x)          #将x转为字符串
str(5).zfill(2) #返回'05';
var1 [not] in var2   #判断字符串是否var1属于var2的子串

###字符串切片
var[starIndex:endIndex:step]  #返回 starIndex <= index < endIndex 的数据;索引表示相对位置
####     var = '1  2  3  4  5  6  7  8  9'     #实际无空格
####正向索引为  0  1  2  3  4  5  6  7  8
####反向索引为 -9 -8 -7 -6 -5 -4 -3 -2 -1 
####默认startIndex=0;endIndex=len(var);step=1
var[index]   #截取单个字符
var[2:6]     #返回'3456'
var[-7:-3]   #同上
var[-7:6]    #同上
var[2:6:2]   #返回'35'
var[6:2:-1]  #返回'7654';step为负数表示反向截取
var[2:]      #返回'3456789'
var[:2]      #返回'12'
var[2::-1]   #返回'321'
var[:2:-1]   #返回'987654'
var[:]       #返回字符串本身
var[::-1]    #取反，返回987654321

##3)Tuple(元组)      #不可变可重复
var = ('asda','asda',12)
var = 'asda','asda',12     #同上，不推荐使用
var = (20,)     #一个值tuple
var = ()        #空元组
var = tuple()   #空元组

var[n]          #按照索引访问
len(var)        #返回元素数
del var         #删除引用

##4)Sets(集合)         #可变无序不重复
var = {'asda','asda'}  #不支持var[n]形式的访问及修改
var = set()            #空集，不能使用{}，{}表示空字典

len(var)       #返回元素数
var.clear()    #删除(清空)所有元素
var.add(x)     #增加单个元素
var.update(x)  #向集合增加序列(list/tuple/dict)中的元素
var.remove(x)  #删除指定元素;不存在会报错
var.discard(x) #删除指定元素;不存在不报错 
var.pop()      #随机删除一个元素
var1 - var2    #返回在var1中且不在var2中元素的集合
var1 | var2    #合并集合
var1 & var2    #返回相同元素的集合
var1 ^ var2    #返回两集合不同元素的集合

##5)List(列表)        #有序可变可重复
var = ['asda','asda',12]
var = []      #空列表
var = list()  #同上

var[1:5:2]        #切片见String
len(var)          #返回元素数
var[n] = 123      #修改列表元素的值
del var[n]        #删除元素
var.clear()       #删除(清空)所有元素
var.pop(n)        #移除指定索引的元素;默认为最后一个
var.reverse()     #反向
var.sort()        #排序;会改变列表
var.insert(n,obj) #指定位置插入元素
var.append(var2)  #追加单个新元素(对象);列表嵌套
var.extend(var2)  #追加var2序列中的多个元素;序列为dict时，追加元素为key
var.copy()        #复制列表;浅复制，深复制使用var.copy.deedcopy(var)

##6)Dictionary(字典)  #可变,key-value形式，key不重复;key一般使用数字或字符串
var = {}        #空字典
var = dict()    #同上
var = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}

len(var)        #返回元素数
var.keys()      #返回键的迭代器
var.values()    #返回值的迭代器
var[key]        #返回key对应的值
del var[key]    #删除指定元素(键值对)
var.pop(key)    #同上
var.clear()     #删除(清空)所有元素


#运算符
##算术
a + b   #加
a - b   #减
a * b   #乘
a / b   #除
a % b   #取模(支持浮点)，值为余数部分
a // b  #整除，向(坐标轴)左取整
a ** b  #a的b次幂

##比较(关系)
==      #(对象)等于
!=      #不等于 
>       #大于
<       #小于
>=      #大于等于
<=      #小于等于

##赋值
a = b   #简单赋值     
a [算术运算符] = b  <=> a = a [算术运算符] b  #例如 a += b 等价于 a = a + b

#多变量赋值
a = b = c = 1            #多变量赋相同值，实际指向同一(内存)位置
a, b, c = 1, 2, "runoob" #多变量赋不同值
del var,var2   #删除变量
var = None          #变量重置(未定义)

##(二进制)位运算
###int(整型)数据存储方式
1.python中int一般分为普通整型(一般是32位)和长整型(大于32位);长度可认为无限制，存在sys.maxsize
2.数据存储方式
a)原码: 最高位为符号位，0为正1为负;其余代表数值本身绝对值;正数的原码、反码和补码都相同
b)反码: 除符号位外，其各位取反
c)补码: 反码加1
注: 0有 +0/-0之分
&        #(补码)按位与
|        #(补码)按位或
^        #(补码)异或
~ x      #(补码)取反;等价于 -1 - x 
x << n   #左移，23 << 3 等价于 9 * ( 2 ** 3 )
x >> n   #右移，23 >> 3 等价于 9 // ( 2 ** 3 )

##逻辑
###x/y为表达式，x=False/''/0/0.0/None/list() 等时表示False，不确定可使用bool(x)判断
x and y  #x表达式的值为False时返回False;否则返回y表达式的值
x or y   #x为True时返回x表达式的值;否则返回y表达式的值
not x    #x为True返回False;否则返回True

##成员
in，not in  #一般用于判断元素是否在序列(字符串、列表、元组等)中，返回True/False

##身份
###判断两个标识符是否引用同一对象
is，not is


#条件控制
1.if else         #else可不存在
if condition_1:   #condition为布尔表达式;True/False其他情况参见逻辑运算符x部分
    statement_block_1
else:
    statement_block_3
    
2.if elif else    #else可不存在;每个statement_block中均可嵌套条件控制语句
if condition_1:
    statement_block_1
elif condition_2:
    statement_block_2
else:
    statement_block_3
    

#循环控制
1.while     #else可不存在;一般很少出现else   
while condition:
    statement_block_1
else:
    statement_block_2
    
2.for       #else可不存在;一般很少出现else 
for <variable> in <sequence>:
    statement_block_1
else:
    statement_block_2

3.break/continue
break     #跳出当前循环体;对应else将不执行
continue  #跳出当前循环，执行下一次循环

4.pass  #空语句，是为了保持程序结构的完整性;一般用做占位语句


#迭代器(iterator)
##用于遍历集合(String/List/Tuple)元素
myList = [1,2,3,4]
it = iter(myList)   #iter()用于创建迭代器对象;
##方式一
for x in it:
    print(x, end='')
##方式二
while True:
    try:
        print(next(it))      #next()访问迭代器元素
    except StopIteration:
        sys.exit()           #退出程序


#生成器(generator)
##使用了yield的函数称为生成器;返回(生成)了迭代器对象
import sys
 
def fibonacci(n):  # 生成器函数 - 斐波那契
    a, b, counter = 0, 1, 0
    while True:
        if (counter > n): 
            return
        yield a
        a, b = b, a + b
        counter += 1
f = fibonacci(10)  # f 是一个迭代器，由生成器返回生成


#函数(function)
##定义
def function_name(args):
    statement

##函数调用
function_name(args)

##匿名函数    #使用lambda表达式;只能写一行;不能调用参数列表之外或全局参数
lambda [arg1 [,arg2,.....argn]]:expression
    
##参数传递
1.可变对象(list/set/dict等);可能会改变参数对象内容
2.不可变对象(num/str/tuple等);可能会生成新对象引用

##参数类型
1.必需参数
def func(str,num):    #func('a',1)调用时参数顺序需与定义时保持一致
2.关键字参数
def func(str,num):    #func(num=1,str='a')调用时参数顺序需与定义时不一致也是可以的
3.默认参数
def func(str,num=1):  #func('a')调用时默认参数可以不提供
4.不定长参数
def func(str,*num):   #num参数会以tuple的形式传入;如：func('a','b','c')中，num=('b','c')
def func(str,**num):  #num参数会以dict的形式传入;num参数以key=value的形式，如：func('a',2='b','c'=3)
def func(str,*,str2): #*后面的参数需关键字参数的形式传入;其余待补充

##return
return [expression]表达式用于退出函数，但不是函数必需的语句
return       #退出函数，不返回任何值
return None  #同上


#变量作用域(范围)
L (Local)       #局部作用域;一般为闭包函数或lambda表达式中
E (Enclosing)   #闭包函数外的函数中
G (Global)      #全局作用域;非闭包函数外
B (Built-in)    #内建(内置)作用域;python语言内建，任何语句中皆可使用

##使用规则
L –> E –> G –>B 的规则查找

例如：
x = int(2.9)         #内建作用域
 
g_count = 0          #全局作用域
def outer():
    o_count = 1      #闭包函数外的函数中
    def inner():
        i_count = 2  #局部作用域

##作用域的引入
1.模块(module)，类(class)以及函数(def、lambda)才会引入新的作用域，
2.if/elif/else/、try/except、for/while 等代码块不会引入新的作用域，其语句内定义的变量，外部也可以访问

##作用域修改
num = 1          #全局变量
def fun():
    global num   #函数内使用global声明全局变量，使得函数内部可以修改全局变量
    num = 10

def outer():
    num = 10           #Enclosing
    def inner():
        nonlocal num   #nonlocal关键字声明Enclosing作用域的变量，可以使得内部可以修改
        num = 100
        print(num)
    inner()

##内建作用域可使用下列语句查询
import builtins
dir(builtins)    #返回字符串格式列表

##特殊情况
###错误使用变量
a = 10
def test():
    a = a + 1  #局部变量a未声明
    print(a)
###修改后
a = 10
def test(a):   #通过参数传递
    a = a + 1
    print(a)


#数据结构
##列表作为堆栈(先进后出，后进先出)
stack = [1,2,3]
stack.append(4)  #进栈
stack.pop()      #出栈

##列表作为队列使用(先进先出，后进后出)
from collections import deque
queue = deque(["Eric", "John", "Michael"])
queue.append("Terry")    #进队
queue.popleft()          #出队

##列表推导(生成)式

模块 module
import语句
多次执行import，模块只会导入一次
import module1[, module2[,... moduleN] 导入模块

例如导入 support.py
import support
support.函数名(参数列表) 使用module中定义的函数

from ... import 语句
从模块中导入一个指定的部分到当前命名空间中
from modname import name1[, name2[, ... nameN]] 部分内容
from modname import *                           全部

内置函数 dir()
可以找到模块内定义的所有名称。以一个字符串列表的形式返回


>>> 主提示符由标准module sys.ps1定义，可修改
... 副提示符由标准module sys.ps2定义，亦可修改


包
模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 


输出
Python两种输出值的方式: 
表达式语句和 print() 函数。

第三种方式是使用文件对象的 write() 方法，
标准输出文件可以用 sys.stdout 引用。

如果你希望输出的形式更加多样，
可以使用 str.format() 函数来格式化输出值。

如果你希望将输出的值转成字符串，
可以使用 repr() 或 str() 函数来实现。

str()： 函数返回一个用户易读的表达形式，可以转义字符串中的特殊字符
repr()： 产生一个解释器易读的表达形式，其的参数可以是 Python 的任何对象


输入  
input()函数，读取键盘内容


文件的读写
open()返回一个file的文件对象
基本格式 open(filename,mode)

f = open("path/filename", "w")

文件对象的读写方法用于操作文件


基本数据的序列化合反序列化
pickle模块


os模块提供非常丰富的方法来处理文件和目录


异常处理

20

