
Linux使用


#shell脚本的运行方式
1 . xx.sh      #一般用于生效用户配置而不需要重新登录shell,xx.sh有读权限即可
2 source xx.sh #同上。常见用于执行 profile 配置,脚本本身在当前进程中执行
3 sh xx.sh     #读权限即可,脚本本身会在子进程中执行
4 ./xx.sh      #需执行权限,脚本本身会在子进程中执行;如不指定当前路径,会优先根据PATH查找相应命令


#shell命令类型
1.内置命令
  shell解释器包含的命令,只有内置命令能改变shell命令行环境变量。
  在当前进程(一般是bash,跟随shell版本)中执行
  内置命令可使用 compgen -b | column 显示     #column格式化显示
  man cmd 会显示无相关使用手册,一般可通过 help cmd 或 cmd --help 获取帮助
  内置命令可使用 type cmd 判断,内置命令会提示 cmd is a shell builtin
  常见内置命令 cd/help/pwd/export/set/alias/umask/kill/source/test等
2.shell函数
  shell编写的函数,可引用
3.外部命令
  独立的shell可执行命令,在子进程中执行(Linux内核调用fork()函数实现),不会改变父进程的环境变量


#常用基础命令
1.主要来源 
  https://www.yiibai.com/linux                       #易百教程
  https://www.runoob.com/linux/linux-tutorial.html  #菜鸟教程  
2.在上一条的基础上精简,只保留常用部分;还有部分是平时工作中能用的命令及技巧
3.命令注释会给出相对完整的名称(非官方);见名知意的命令不说明
4.file表示文件名,dir表示文件夹名称
5.[]中内容表示可选项

##命令帮助
man cmd       #manual(手册);命令详细说明
info cmd      #类似于man;info格式命令帮助
help cmd      #使用help命令获取简要帮助
cmd --help    #同上;部分命令也可使用cmd -h
which cmd     #显示命令绝对路径
type cmd      #判断命令类型;内置命令会提示 cmd is a shell builtin

##快速输入帮助      #以下使用ubuntu,其他发行版大同小异
##快速输入帮助      #以下使用ubuntu,其他发行版大同小异
1.命令开头 + Tab    #会提示用户 PATH 下所有可匹配命令
2.命令 + 空格 + Tab #提示命令选项或参数(文件或文件夹)

##用户及权限
adduser username        #增加用户,默认添加 /home/username 目录等
useradd username        #增加用户,不添加用户家目录
groupadd groupname      #增加用户组
usermod -aG gname uname #user modify;将用户增加到用户组(多个用户组可用逗号隔开)
su [username]           #switch user;简单切换用户,不加载环境变量;不跟用户名默认切换到root
su - [username]         #切换登录用户,加载环境变量;不跟用户名默认切换到root
su -l/--logon username  #同上
sudo passwd root        #switch user do(execute);ubuntu启用root用户
passwd [-u] [username]  #root用户修改指定用户密码,-u可不加;不跟用户名默认修改当前用户密码
id [username]           #显示指定用户uid、gid和groups等信息,不跟用户名显示当前用户相关信息
write user [ttyname]    #向其他用户发送给信息(message),ttyname可以使用w查询,Ctrl + c结束

##文件目录操作
ls -ltr [dir]  #list;按时间倒序排列指定文件夹下列表;默认显示当前文件夹列表非隐藏文件
ls -a          #显示所有文件列表,包含隐藏文件
ll             #ubunt系统中由 alias 指定,实际执行ls -alF
stat file/dir  #显示文件详细信息(大小、属组、访问/修改时间等);stat还可显示文件系统状态
cd             #change directory;切换到用户家目录,由当前用户$HOME指定
cd ~           #同上
cd -           #切换到切换前目录
cd path        #切换到指定路径目录;路径分为相对路径(相对于当前目录)和绝对路径(/开头)
cd ..          #切换到上层目录
cd ../..       #切换到上上层目录
pwd            #print working directory;打印当前工作目录绝对路径
mkdir [path/]dir        #make directory;创建文件夹,多文件夹可空格隔开;要求上层目录必须存在
mkdir -p dir1/dir2      #同上,不要st求上层目录存在;不存在会创建多级目录
mkdir -p a/{b,c/{d,e}}  #创建复杂目录;/表示子目录,{}中逗号隔开的为平级目录
mkdir -p {q,w}a{e,r}    #创建qae/qar/wae/war四个目录;{}中逗号必须存在,否则{}会解析为'{}'字符串
mkdir -m 777 dir        #创建指定权限目录
rmdir dir               #remove empty directory;删除空文件夹;多文件空格隔开
rm file                 #remove;删除文件;多文件空格隔开
rm -rf dir              #递归删除文件或文件夹(不要求非空);f表示强制删除不做提示;可跟多文件(夹)
mv file1 file2          #move;file1重命名为file2,要求file1必须存在,file2已存在则覆盖
mv file1 path/file2     #移动并重命名,其余同上
mv file dir             #移动file到dir,要求file和dir必须存在;file存在而dir不存在时表示重命名
mv file1 file2 dir      #移动多个文件到指定文件夹(dir);要求dir必须存在
mv file dir1 dir2       #移动文件或文件夹到指定目录(dir2);要求dir2必须存在
mv dir1 dir2            #移动或重命名,要求dir1必须存在;dir2存在表示移动否则表示重命名
cp file1 file2          #copy;复制file1为file2;要求file1必须存在,file存在时会提示覆盖
cp file dir             #复制并移动file到dir;要求file和dir存在;dir不存在时同上
touch file              #摸一下文件;文件不存在则创建文件;文件存在时更新文件时间戳;多文件空格隔开
touch -t                #设定文件时间戳,如 touch -t 201901010800.01 file;时间格式为[[CC]YY]MMDDhhmm[.SS]
vi file                 #文件不存在则创建并编辑;存在则编辑文件;相关操作见下文
cat file                #concatenate;显示文件内容
cat -A file             #同上,同时显示结束符($)和制表符(Tab,显示为^I);等价于-vET
cat -n file             #带行号输出
cat -b file             #非空行带行号输出;空行也会输出
view file               #只读模式查看文件;其他操作见vi
head file               #显示文件开始10行
head -n file            #显示文件开始n行
tail file               #显示文件最后10行
tail -n file            #显示文件最后n行
tail -f file            #循环读取某文件最后10行,一般用于文件实时查看
tail -nf file           #循环读取某文件最后n行
more file               #分页查看文件,一次性加载,空格/b 翻页;大文件不建议使用
less file               #分页查看文件,逐步加载,空格/b PgUp/PgDn 翻页
file file               #显示文件或文件夹类型
diff file1 file2        #文件差异对比
ln file link            #创建file的硬连接(hard link)为link
ln -s file link         #创建file的软连接(symbolic link,符号链接)为link;link不能创建前存在
    ##软链接：
     1.软链接,以路径的形式存在。类似于Windows操作系统中的快捷方式
     2.软链接可以跨文件系统,硬链接不可以
     3.软链接可以对一个不存在的文件名进行链接
     4.软链接可以对目录进行链接
    ##硬链接：
     1.硬链接,以文件副本的形式存在。但不占用实际空间。
     2.不允许给目录创建硬链接
     3.硬链接只有在同一个文件系统中才能创建
	 4.通过指索引节点（inode）来进行链接
###grep
grep abc file              #查找文件中包含abc的行
grep ^a file               #a开头
grep a$ file               #a结尾
grep -n ^$ file            #匹配空行并显示行号
grep ^[a-z] file           #小写字母开头,[]表示其中任意字符
grep -E 正则表达 file      #正则方式查找;等价于 egrep
grep -nE [0-9]\{4\} file   #匹配出现4次(需开启正则)数字的区域,并显示行号
grep -nE [0-9]\{2,4\} file #匹配出现2到4次(需开启正则)数字的区域,并显示行号
grep -i str file           #忽略大小写
grep -n str file           #显示行号
grep -A/B/C n str file     #显示匹配行及其之后(after)/之前(before)/前后(center)的n行
grep -nA m str file        #显示行号且显示匹配行之后的m行内容
grep -n -A m str file      #同上
###cut
cut -b/c N/N-/N-M/-M file  #按照字节(bytes)/字符(characters)截取文本(标准输出);截取列范围分别是 =N、>=N、N<=x<=M和<=M
cut -f N/N-/N-M/-M file    #按照Tab(制表符)截取文本(标准输出);-f表示fields(域)
cut -d ',' -f N file       #-d(delimiter)指定分隔符,与-f一起使用
echo '1234567'|cut -c 2    #结果为2;可写为 cut -c2,空格可省略
echo '1234567'|cut -c2-5   #结果为2;可写为 cut -c2,空格可省略
echo -e "123\t456"|cut -f2 #结果为456
###paste
paste file1 file2 ...      #列模式拼接,默认为Tab链接
paste file1 file2 -d ","   #指定分隔符拼接
###tr
echo 12345 | tr '0-9' '9876543210'  #按规则替换字符。结果为87654
cat file | tr '\t' ' '              #制表符替换为空格
cat file | tr -d '0-9'              #删除所有数字
cat file | tr -d -c '0-9\n'         #删除非数字数据,默认不换行,加上 \n
cat file | tr -s ' '                #去除重复空格
###split
split -n file str  #将文件每n行切割为多个str开头(默认为x)的小文件,不改变原文件
split -l n file    #同上
split -b n fiel    #按字节切割
split -C n fiel    #同上,尽量保证每行的完整性   
###sort
sort      #排序,默认按照字典顺序
    -n    #按数字进行排序
    -d    #按字典序进行排序,仅考虑空字符、字母和数字排序
    -r    #降序排序
    -k N  #指定按第N列排序
    -b    #忽略像空格之类的前导空白字符
sort -nrk 1 data.txt
sort -bd data
###wc
wc -c/m/w/l file            #按照字节/字符/单词(Tab或空格分隔,多个分隔符算一个)/行数 统计文本或标准输出
echo -e '1\t2  34 56'|wc -w #输出4
###uniq
sort unsort.txt | uniq      #排序并去除重复行
sort unsort.txt | uniq -c   #统计各行在文件中出现的次数
sort unsort.txt | uniq -d   #找出重复行
###sed   #stream editor(流编辑器)
#动作说明
    a ：新增,a 的后面可以接字串,而这些字串会在新的一行出现(目前的下一行)～
    c ：取代,c 的后面可以接字串,这些字串可以取代 n1,n2 之间的行！
    d ：删除
    i ：插入,i 的后面可以接字串,而这些字串会在新的一行出现(目前的上一行);
    p ：打印,亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～
    s ：取代,可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！
sed 's/text/replace_text/' file      #替换每一行的第一处匹配的text,''可换为"",区别在于""会对表达式求值
sed 's/text/replace_text/g' file     #全局替换
sed -i 's/text/repalce_text/g' file  #全局替换并替换原文件
sed '/^$/d' file                     #替换空行,会修改原文件
sed 's/ //g' file                    #替换所有空格
###awk   #数据流处理工具,逐行处理;上述文本处理命令都可用awk实现
###常见用法参见 https://www.runoob.com/linux/linux-comm-awk.html
awk '[BEGIN{statements}] {statements2} [END{statements}]'  #statements2是处理语句核心,BEGIN和END可不出现
    #特殊变量
	NR  #数据流行号
    NF  #数据流字段数
    $0  #数据流本身
    $n  #处理后第n个字段,n > 0
awk '{print $1,$4}' log.txt   #输出文本中第1,4列,默认以空格或Tab作为分隔符
awk -F, '{print $4}' log.txt  #输出文本以逗号为分隔符的第4列; -F, <=> -F , <=> -F ',' <=> -F ","
awk 'BEGIN{FS=","} ...'       #同上
awk -F '[ ,.;]'               #指定多个分隔符
awk -f cal.awk log.txt        #使用指定awk脚本处理文本
awk '$1>2 && $2=="Are" {print $1}' log.txt  #指定过滤条件

#文件查找
which cmd               #查找命令位置;返回用户PATH变量中第一个匹配位置
whereis cmd             #查找命令(程序)的二进制、man说明和源码文件的绝对路径
whereis -b/m/s cmd      #查找命令(程序)的二进制/man说明/源码文件的绝对路径
locate cmd              #查找cmd相关文件
locate /etc/sh          #查找/etc目录下sh开头的文件
find [path] [option value] [option2 value2] ... [operation]
    ##参数说明
    [path]         #默认为当前路径
    [option value] #匹配选项及值,部分选项不需要value,绝大部分成对出现,取结果交集。
                   #如：-type d 表示查找所有文件夹,选项前加上!表示不匹配
                   #选择性强的放前面可提高查询效率,例如 -depth/mindepth/maxdepth               
    [operation]    #对于查找结果的操作,常用操作如下：
                   #-print： 将匹配结果输出到标准输出,一般可不加。shell脚本中建议加上。
                   #-print0：同上,但不换行。
                   #-exec：  用于下一步的命令执行。形式为 "cmd {} \;" 
                   #         如：find . -type f -exec rm -rf {} \; 表示删除所有文件。{}表示每条查找结果
                   #         find . -type f|xargs rm -rf 可实现同-exec功能
                   #-ok：    同上,不同在于会让用户确认是否执行每个命令
                   #-delete: 删除文件或文件夹
                   #         如：find . -type f -delete 删除所有文件
    ##常用option(选项)
    -name file            #名称;最常用的选项
    -iname file           #忽略大小写
    -type b/d/c/p/l/f     #文件类型。块设备、目录、字符设备、管道、符号链接、普通文件
    -size [-/+]n[cwbkMG]  #大小为[小于/大于]n字节/字/块(一般为512bit)/KB/MB/GB的文件
    -depth                #使查找在进入子目录前先行查找完本目录
    -mindepth n           #指定目录的第n级目录开始查找
    -maxdepth n           #最多查询到指定目录的第n级目录
    -perm 755             #权限
    -empty                #空文件或文件夹
    -mtime [-/+]n         #n天[内(包含n)/外]修改的;无-/+时表示第n天(当天为0);下同
    -atime [-/+]n         #访问时间
    -ctime [-/+]n         #创建时间
    -amin [-/+]n          #n分钟
    -user username        #所属者
    -group groupname      #按组来查找
    -nogroup              #即文件的属组在/etc/groups中不存在
    -nouser               #查无有效属主的文件,即文件的属主在/etc/passwd中不存 
    -nogroup              #查无有效属组的文件,即文件的属组在/etc/groups中不存在
    -nouser               #查无有效属主的文件,即文件的属主在/etc/passwd中不存
    -newer f1 !f2         #查更改时间比f1新但比f2旧的文件
    -fstype               #查位于某一类型文件系统中的文件,这些文件系统类型通常可 在/etc/fstab中找到
    -mount                #查文件时不跨越文件系统mount点
    -follow               #如果遇到符号链接文件,就跟踪链接所指的文件
    -cpio                 #查位于某一类型文件系统中的文件,这些文件系统类型通常可 在/etc/fstab中找到
    -prune path           #忽略某个目录
find . -name   "*.txt" -print                  #.txt结尾的文件,双引号可不加
find . ! -name "*.txt" -print                  #查找所有非 .txt 结尾文件
find . -name "[a-z][0–9].txt" -print           #查以小写字母和数字开头的txt文件     
find . -name "*.txt" -o -name "*.pdf"  -print  #查找txt或pdf文件,-o表示或
find . -regex  ".*\(\.txt|\.pdf\)$" -print     #同上。-iregex:忽略大小写
find . -name 'xa*'|grep -v xaa|xargs rm -rf    #删除当前目录下所有除了xaa的xa*文件
find . -perm 755 -exec ls -ltr {} \;           #显示所有权限是755的文件(夹)
find . -size +512k                             #大于512k的文件
find . -type f -print | xargs rm -f            #逐条所有文件,不存在rm参数过长问题
###捕获命令输出;主要适用于第一个cmd不是标准输出的后续处理
cmd [options] | xargs [options] [cmd [options]] 

##文件权限
chmod [-R] [who] [+/-/=][mode] file/dir  #change file mode bits;文件(夹)属主和root可使用
    #参数说明
    -R     #作用于文件夹及子文件(夹)
    who    #可选a/u/g/o,表示所有用户/所属者/所属组/其他用户;ugo可同时使用,如：chmod ug+x file
    +/-/=  #分别表示增加/去除/设定
    mode   #可选r/w/x/s,表示读/写/执行/特殊权限
chmod a+x file          #所有用户增加执行权限;
chmod a+x,go-wx file    #多种模式逗号隔开,逐条执行;等价于chmod u+x,go-wx file
chmod a=r file          #设定所有用户对file只有读权限;等价于chmod 444 file
chmod 755 file          #数字分别表示u/g/o的权限;r/w/x分别表示4/2/1,各自权限加起来
chgrp group file        #change group ownership;设定文件(夹)所属组;组名需在/etc/group;文件(夹)所属者和root可使用
chgrp gid file          #同上,gid表示group的组ID
chgrp -R group dir      #设定文件夹及其子文件(夹)所属组;-R选项不加只作用于此文件夹
chown user:group file   #change group ownership;设定文件(夹)的属组;文件(夹)属主和root可使用
chown -R user:group dir #递归设置属主和属组
chown user: file        #适用于属主和属组名称一致的;等价于chown user:user file
chown user file         #设定文件属主
chown :group file       #设定文件属组

##系统资源
df         #disk file system;查看文件系统使用情况
df -i      #以inode(文件索引节点)显示
df -h/k/m  #以易读/KB(默认)/MB显示
df -l      #只显示本地文件系统
df -T      #显示文件系统类型
du                   #文件(夹)空间占用;默认递归显示当前文件夹下文件(夹)占用空间
du -h/b/k/m          #以易读/Byte/KB(默认)/MB递归显示当前文件夹下文件(夹)占用空间
du -h/b/k/m file/dir #指定显示特定文件或文件夹,其余同上;文件或文件夹可跟多个   
du -sh               #以易读方式显示当前文件夹占用总空间
du -sh *             #以易读方式显示当前文件夹每个文件或文件夹(汇总)占用空间
ps -ef | grep java   #snaps of prosess;搜索含java的进程快照,其他类似;标准语法
ps [-]aux |grep java #同上一条类似;BSD发行版语法
free [-h/k/m]        #以易读/KB(默认)/MB显示内存及虚拟内存(swap-交换区)使用情况;无参以KB显示
top                  #实时查看系统资源使用情况(快照)
    1                #top基本视图下,打开/关闭每个逻辑核心状况
	b                #top基本视图下,打开/关闭高亮(black)显示当前运行的进程
	x                #top基本视图下,打开/关闭高亮显示排序列;默认按cpu使用率排序
	shift + >/<      #top基本视图下,改变排序列视图
top -c               #cmd会显示完整命令
top -p pid           #查看指定进程(pid)的情况
watch 'cmd'                #每2秒执行一次cmd;可用于监控网络,文件,用户登录情况等等
watch -n m 'cmd'           #每m秒执行一次cmd
watch -n m -d 'cmd'        #每m秒执行一次cmd,变化部分会高亮显示
watch -n 1 -d netstat -ant #每1秒显示网络连接数情况
vmstat                     #虚拟内存统计;可对操作系统的虚拟内存、进程、CPU活动进行监控
lsof                       #查看当前系统打开文件(linux一切皆文件)的情况
lsof /bin/bash             #查看正在使用/bin/bash的进程情况
lsof /home                 #查看正在使用/home的情况
lsof -u [^]username        #查看[除了]某个用户打开文件状况
lsof -c bash               #查看命令bash开头的文件打开情况
lsof -c a -c b             #查看命令a或b开头的文件打开情况
lsof -p 1[,2,3]            #按照一个或多个进程号查看文件打开情况
lsof -i [tcp/udp]          #查看所有网络[tcp/udp]连接情况
lsof -i [tcp]:8080         #查看指定[TCP]端口使用情况
lscpu      #显示CPU信息
lshw       #显示所有硬件信息
uname -a   #显示系统信息                      

##打包压缩
tar [-]cvf file.tar dir  #打包;dir为文件或文件夹列表(空格隔开);-可不加;v表示打印过程,可不加
tar xvf file.tar         #解包;x表示extract(提取),f表示指定文件;打包中c表示create
tar -tf file.tar         #查看包中文件
tar zcvf file.tar.gz dir #打包并压缩,压缩包结尾可能是.tgz,dir为文件或文件夹列表(空格隔开)
tar zxvf file.tar.gz     #解压并解包,压缩包结尾可能是.tgz
gzip file1 file2         #压缩,压缩完成会删除每个原文件;压缩后文件名为file.gz
gzip -rv dir             #递归压缩dir下所有文件及子文件夹的文件
gzip -d file.gz          #解压,解压完成会删除.gz文件
gzip -rd dir             #递归解压dir下所有压缩文件
gzip -l file.gz          #查看每个压缩文件信息(文件名/压缩前后大小/压缩率);不解压
gunzip file.gz           #解压,同上
compress file            #压缩,比较古老的unix/linux命令;不常用,现在gzip应用更广泛
compress -d file.Z       #解压
uncompress file.Z        #同上

##网络相关
ip a                     #查看网络设备(已激活)信息
ifconfig                 #interface configure;查看网络设备(已激活)信息;部分发行版(CentOS7等)无此命令
ifconfig ens33 up/down   #启动或关闭ens33(网络设备,一般是网卡)
ifconfig eth0 add/del 33ffe:3240:800:1005::2/64 #为eth0(网卡)配置或删除IPv6地址
ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE        #设置(修改)eth0的Mac地址
####临时设置IPv4地址;建议通过修改配置文件实现,通过ifconfig修改的配置重启就不存在
ifconfig eth0 192.168.1.56 [netmask 255.255.255.0] [broadcast 192.168.1.255]
ifconfig eth0 arp/-arp   #开启和关闭eth0的arp协议
ifconfig eth0 mtu 1500   #设置最大传输单元
route [-n]               #查看路由表;-n不解析名称,直接显示地址
ping IP/hostname                     #测试与目标主机的连通性
ping localhost/127.0.0.1/127.1/::1/  #测试本机回环地址;localhost需要在/etc/hosts中配置为回环地址   
ping -c n -i m IP/hostname           #指定ping的次数为n,每隔m秒ping一次(默认一秒);默认不会停止
ping -i 3 -s 1024 -t 255 192.168.0.5 #-s指定发送数据包大小;-t指定TTL(time to live,路由跳转次数),最大为255,由发送方指定,一般为2^n
netstat           #检验本机各端口的网络连接情况
netstat -a        #显示所有端口
netstat -t/u/w/x  #显示tcp/udp/raw/unix当前连接情况;local address显示的是主机名和协议
netstat -nt       #同上;-n表示local address显示的是ip和port(端口)
netstat -apt      #显示tcp端口使用情况;-p表示显示使用程序名
netstat -i        #显示网络接口(网卡)列表 
netstat -l        #显示监听状态连接情况
ss -t/u/w/x       #显示tcp/udp/raw/unix的socket统计信息
ss -at[n]         #显示所有tcp的socket统计信息;-n表示local address显示的是ip和port(端口)
ss -s             #显示汇总(摘要)信息
ss -l[p]          #显示所有的网络端口;-p显示进程

##计划任务后台
at                         #指定一个时间执行一个任务,只能执行一次
crontab [-u user] file     #周期性的执行任务(脚本或其他命令等);file为任务文件,规则见Example
crontab [-u user] [-e|l|r] #参数分别是显示/编辑/删除(所有)某个用户自动任务;默认处理登录用户的自动任务

    # Example of job definition:
    # .---------------- 分钟(minute) (0 - 59)
    # |  .------------- 小时 hour (0 - 23)
    # |  |  .---------- 一个月中的第几天 day of month (1 - 31)
    # |  |  |  .------- 月份 month (1 - 12) OR jan,feb,mar,apr ...
    # |  |  |  |  .---- 周几 day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
    # |  |  |  |  |
    # *  *  *  *  * username  cmd 
### Examples
### , - / 可组合使用,范围见上面job定义
* * * * * sh /home/wangh/run.sh      #每分钟执行一次脚本
1,3,5 * * * * sh /home/wangh/run.sh  #每小时的第1,3,5分执行
0-30 * * * * sh /home/wanh/run.sh    #每小时的前30分钟每分钟执行
0-30/2 * * * * sh /home/wanh/run.sh  #每小时的前30分钟每2分钟执行
nohub cmd  #挂起命令永久执行并输出日志到当前目录nohup.out文件中;用户退出命令不会退出
cmd &      #后台运行命令;用户退出命令退出(部分命令会启动守护进程的除外)

##开关机   #建议使用shutdown命令
shutdown [-t n] -r/h   #指定n秒之后重启/关机;不指定-t,默认一分钟;shutdown -c取消当前命令
shutdown -h now        #立即关机
init n                 #切换运行级别;当前运行级别可使用runlevel查看
    #runlevel
	0:停机或者关机(千万不能将initdefault设置为0)
    1:单用户模式,只root用户进行维护
    2:多用户模式,不能使用NFS(Net File System)
    3:完全多用户模式(标准的运行级别)
    4:安全模式
    5:图形化(即图形界面)
    6:重启(千万不要把initdefault设置为6)
reboot     #重启
poweroff   #关机

##文件下载和传输
###命令差异见  https://blog.csdn.net/qujinhua19851006/article/details/8666254
curl -O url              #下载文件;O大写,不用O只是打印内容不会下载
curl -O newname url      #下载并重命名
wget -o newname url      #同上
wget url                 #下载文件
ftp ip/hostname          #ftp到指定服务器,输入用户密码即可登录;file transfer program
ftp username@ip/hostname #同上,指定用户名
    #常用子命令
	assii/binary/bi      #设置文件传输格式,非文本文件请使用bin
	prompt               #关闭或打开交互模式;默认是打开的
	lcd dir              #切换本地工作目录;dir缺省则切换到本地$HOME目录
	cd dir               #切换远程工作目录
	ls/dir               #列出远程目录及文件
	pwd                  #打印远程工作目录
	get/put file [file1] #上传/下载单文件,并重命名为file1;file1缺省时文件名保持一致
	mget/mput files      #上传/下载多文件;支持通配符
	?                    #帮助;同help
	!cmd                 #执行本地shell命令
	bye/quit             #退出ftp
sftp user@ip/hostname    #secure file transfer program;相比ftp安全但速度较慢
    #常用子命令
	ls/lls/cd/lcd/pwd/lpwd/get/mget/put/mput
lsftp
rcp
scp
rsync

##其他命令
echo 'str'            #显示字符串作为标准输出;严格输出
echo "str"            #显示字符串作为标准输出;可含变量
echo -e 'str'         #支持转义输出
sudo cmd              #以系统管理员(root)身份运行命令
sudo -u user cmd      #以指定用户身份执行命令
sudo -l               #显示当前用户可用sudo命令权限
history               #显示命令历史,一般是1000条
history n             #显示最近执行的n条命令
history | grep cmd    #搜索特定命令执行历史
!!           #执行上一条命令
!n           #执行历史记录的第n条命令
ctrl + r     #可搜索之前执行过的命令;用于较长命令较为实用
seq          #生成整数序列;以换行符为分隔符(一个序列一行)
seq 3        #返回1,2,3;设定序列最大值;默认最小值为1
seq 0 3      #返回0,1,2,3;设定最小值和最大值
seq -1 2     #返回-1,0,1,2;最小值可以小于0
seq 2 2 10   #返回2,4,6,8,10;中间数值为步长;两边为最小值和最大值
seq 5 -1 1   #返回5,3,1;步长为负数表示递减;两边为最大值和最小值



#问题处理
1.文件误删恢复
rm -f /root/selenium/Spider/MySql.Data.dll         #删除文件
ls -ltr /root/selenium/Spider/MySql.Data.dll       #提示无法访问改文件
lsof | grep /root/selenium/Spider/MySql.Data.dll   #查看访问此文件相关的进程
#找到相关进程利用重定向恢复文件,/proc/进程号/fd/文件描述符
#找到相关进程利用重定向恢复文件,/proc/进程号/fd/文件描述符
cat /proc/23778/fd/86 > /root/selenium/Spider/MySql.Data.dll


#vi/vim 常见操作
#三种模式
1.命令模式(cmd mode)       #用于光标移动、复制粘贴、搜索替换等
2.输入模式(Insert mode)    #用于基本输入
3.底线模式(Last line mode) #用于搜索替换

#其他命令
u           #undo;撤销上一个命令
<Ctrl> + r  #重复上一个命令
.           #小数点,功能同上

##命令模式
vi/vim [file] 进入命令模式
光标指定单个字符

###光标移动和翻页
←/h 、↓/j 、↑/k 、→/l  #上下左右移动光标。n→表示光标向右移动n个字符,不跨行;其余同理
PgUp/PgDn              #上下翻页
n<space>  #<space>表示空格。向后移动n个字符,可能会跨行
0/Home    #移动光标到行首。Home为键盘功能键Home
$/End     #移动光标到行尾。End为键盘功能键
G         #移动光标到最后一行行首
nG        #移动光标到第n行行首
n<Enter>  #光标向下移动n行
gg        #移动光标到第一行行首,等价于1G;G等价于gg
ngg       #移动光标到第n行行首,同nG

###删除
x/X    #向后删除单个字符/向前删除单个字符
nx/nX  #向后删除n个字符/向前删除n个字符
dd     #删除光标所在行
ndd    #删除光标开始行(包含)以下n行
D      #删除光标所在行内容,保留空行
d0     #删除光标位置到行首数据
d$     #删除光标位置到行尾数据
d1G    #删除当前行到第一行
dnG    #删除当前行(包含)到第n行
dG     #删除光标行到最后一行

###复制和粘贴
yy   #复制光标所在行
nyy  #复制光标行(包含)以下n行
y1G  #复制第一行到光标行
ynG  #复制光标所在行到第n行之间的数据
yG   #复制光标行到最后一行
y0   #复制行首到光标所在位置数据
y$   #复制光标位置到行尾数据
p/P  #粘贴到光标所在行下一行/上一行
J    #合并光标行与下一行,空格隔开    

##输入模式
以下为命令模式切换到输入模式
i/I     #光标处输入/光标所在行第一个非空格(一般就是行首)处输入
a/A     #光标处下一个字符处输入/光标所在行行尾处输入
o/O     #光标行之后/之前插入一行
r/R     #替换光标处字符一次/一直替换光标处字符,直到按下Esc

Insert  #功能键Insert用于输入模式中切换追加还是替换模式
ESC     #功能键ESC用于退出输入模式到命令模式

##底线模式
/str         #向下搜索字符str,?str表示向上搜索(不常用)
n/N          #执行上一个搜索命令/执行上一个方向相反的搜索命令
:set nu      #设置行号
:set nonu    #取消行号
:set ignorecase   #忽略大小写查找
:set noignorecase #取消忽略
:wq          #保存并退出。w,q可单独使用,!表示强制
:x           #同上
ZZ           #同上
:w file      #另存为file
:r file      #将file内容追加到光标所在行下一行
:n,m w file  #将第n,m行之间的内容另存为到file中
:!cmd        #暂时离开vi执行cmd


