Java设计模式


简介

设计模式代表有经验的面向对象软件开发人员使用的最佳实践。 
设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。 
这些解决方案是由许多软件开发人员在相当长的时间内通过试错获得的。

设计模式是与编程语言无关的，它是用于解决常见的面向对象的设计问题。
设计模式代表一个想法，而不是一个实现。
通过使用设计模式，可以使我们的代码更灵活，可重用和可维护。


GOF

1994年，由Erich Gamma，Richard Helm，Ralph Johnson和John Vlissides
发表了《设计模式 - 可重用的面向对象软件元素》的书，
该书在软件开发中开创了设计模式的概念。

设计模式主要基于以下面向对象设计的原则：
1.程序到一个接口不用实现。
2.有利于对继承对象组合。

主要用途
1.开发人员的通用平台
2.最佳实践


设计模式的类型

1.创造模式 
  -提供了一种创建对象而隐藏创建逻辑的方法，而不是直接使用 new 操作符来实例化对象。 
   这使程序在决定对于给定的用例需要创建哪些对象时具有更大的灵活性。
2.结构模式 
  -涉及类和对象组成。继承概念用于组成接口并定义方法组合对象以获得新功能。
3.行为模式 
  -特别侧重于对象之间的通信。
4.J2EE模式 
  -特别涉及表示层。这些模式由Sun Java Center标识。


在核心java中，主要有三种类型的设计模式，它们可进一步分为以下子部分：  
1. 创造设计模式
工厂模式
抽象工厂模式
单例模式
原型模式
Builder模式

2.结构设计模式
适配器（Adapter）模式
桥接（Bridge）模式
组合模式
装饰者（Decorator）模式
外观（Facade）模式
享元（Flyweight）模式
代理（Proxy）模式

3.行为设计模式
责任链模式
命令模式
解释器模式
迭代器模式
调解者(Mediator)模式
备忘录模式
观察者模式
状态模式
策略模式
模板模式
访问者模式


工厂设计模式/Factory
Java中最常用的设计模式之一。
在工厂模式中，使用一个通用的接口引用新创建的对象。

实现方法
https://www.yiibai.com/design_pattern/factory_pattern.html#article-start


抽象工厂模式/AbstractFactory
抽象工厂模式是一个超级工厂，用来创建其他工厂。 
在抽象工厂模式中，接口负责创建相关对象的工厂，而不明确指定它们的类。 
每个生成的工厂可以按照工厂模式提供对象。

实现方法
https://www.yiibai.com/design_pattern/abstract_factory_pattern.html#article-start


单例模式/Singleton

Java中最简单的设计模式之一。

这种模式涉及一个类，它负责创建一个对象，同时确保只创建一个对象。
这个类提供了一种方法来访问它的唯一对象，可以直接访问，而不需要实例化类的对象。

实现方法
https://www.yiibai.com/design_pattern/singleton_pattern.html


建造者模式/Builder

使用简单对象并使用逐步方法构建复杂对象。
构建器逐步构建最终对象，此构建器独立于其他对象。

实现方法
https://www.yiibai.com/design_pattern/builder_pattern.html#article-start


原型模式

在创建重复对象的同时保持性能。
这个模式涉及实现一个原型接口，它只创建当前对象的克隆。
有时直接创建对象时使用这种模式是昂贵的。
例如;
在昂贵的数据库操作之后创建对象。因此我们可以缓存对象，
在下一个请求时返回其克隆，并在需要时更新数据库，从而减少数据库调用。

实现方法
https://www.yiibai.com/design_pattern/prototype_pattern.html#article-start














