环境设置
1.1 编译运行java文件-HelloWorld.java
先配置好系统java运行环境
将代码通过文本编辑器(推荐使用Notepad++)写入HelloWorld.java文件中
命令行执行：
javac /path/HelloWorld.java  //编译java文件，生成.class字节码文件
java /path/HelloWorld        //调用jvm并加载java类库，解释执行字节码文件

1.2 查看java版本
命令行执行
java -version

1.3 获取当前时间与1970.01.01 00:00:00的差值
long startTime = System.currentTimeMillis(); //以毫秒计
long endTime = System.currentTimeMillis();
 
字符串
2.1 字符串比较
比较两个字符串，并返回字符串中第一个字母ASCII的差值
string1.compareTo(string2)
string1.compareToIgnoreCase(string2) //忽略大小写

2.2 字符串/字符查找
//返回string2在string1中最后出现的的位置(索引)，若返回-1说明无此字符串
int lastIndex = string1.lastIndexOf(string2)
//返回字符串出现第一个位置索引,不存在返回-1
int intIndex = str.IndexOf(string)

2.3 字符串截取
//截取[i,j)直接的字符串
String str = string.substring(int startIndex, int endIndex)
String str = string.substring(int startIndex)

2.4 字符串/字符替换
str.replace(char c1, char c2)
str.replaceFirst(String oldString, String newString)
str.replaceAll(String oldString, String newString)

2.5 字符串反转
String reverse = new StringBuffer(str).reverse().toString();

2.6 字符串切割
//delimeter为指定分隔符(特殊字符需要转义)，split()方法将字符串分割成字符串数组
String str = "asdas dwefradwe"
String[] strArray = str.split(String delimeter)
//StringTokenizer类
StringTokenizer st = new StringTokenizer(String str); //通过空格分割
StringTokenizer st = new StringTokenizer(String str, String delimeter); //通过delimeter分割
while(st.hasMoreElements()){
	System.out.println(st.nextElement());
}

2.7 字符串大小写转换
String str = new String(string).toUpperCase(); //转大写
String str = new String(string).toLowerCase(); //转小写

2.8 字符串区域是否相等
//ignoreCase:值为true是表示忽略大小写
//toffset:str的第(toffset - 1)位开始比较
//ooffset:otherStr的第(ooffset - 1)位开始比较
//len:比较位数
boolean isMath = str.regionMatches(boolean ignoreCase, int toffset, String otherStr, int ooffset, int len);
boolean isMath = str.regionMatches(int toffset, String otherStr, int ooffset, int len); //不忽略大小写	

2.8 字符串优化
String.intern(); 
//jdk1.7/1.8 常量池置于堆空间，可用于节约内存空间，
//减少垃圾回收(GC)时间,主要用于大量使用相同字符串的场景

//jdk1.6及以下 常量池置于Perm 区（属于方法区）中，与堆空间独立

2.9 格式化字符串
System.out.format()

2.10 字符串连接
//+连接
String str = String str1 + String str2;
//调用StringBuffer的append()方法
stringBuffer.append(String str);


数组
3.1 数组排序及查找
//常用排序算法及实现
https://blog.csdn.net/hguisu/article/details/7776068
Arrays.sort(array); //调用Array.sort()方法排序，从大到小
//Arrays.binarySearch()方法返回索引
int index = Arrays.binarySearch(array, array.Element);

3.2 数组长度
String[][] data = new String[2][5];
data.length = 2; //一维数组长度,列长度
data[0].length = 5;  //二维数组长度,行长度
注：string.length()为字符串方法，表示字符串中字符个数

3.3 数组反转
ArrayList<String> arrayList = new ArrayList<String>();  //集合字符串数组
arrayList.add(string_1); //通过add()方法添加字符串数组
...
arrayList.add(string_n);
Collections.reverse(arrayList);  //通过Collections.reverse()方法反转数组

3.4 数组访问
String[] str = new String[];
str[index];  //访问方式，index从0开始

3.5 获取数组最值
//通过Arrays.asList()转化成List集合，再调用Collections.min()方法取得最值
Integer[] numbers = { 8, 2, 7, 1, 4, 9, 5};
int min = (int) Collections.min(Arrays.asList(numbers));
int max = (int) Collections.max(Arrays.asList(numbers));

3.6 数组合并
List list = new ArrayList(Arrays.asList(String[] a));
list.addAll(Arrays.asList(String[] b));
String[] c = Arrays.toString(list.toArray())

3.7 数组填充
int[] array = new int[6];
//通过 Arrays.fill(arrayname,value)填充6个100
Arrays.fill(array, 100);
//通过下面方法可以对数组指定位置赋值
Arrays.fill(arrayname ,int startIndex ,int endIndex ,value)

3.8 数组扩容
//src_arrayname   源数组
//int src_index   从源数组取元素位置
//dest_arrayname  目的数组/需要填充数组
//int dest_index  目的数组扩充位置
//int length      填充长度
System.arraycopy(src_arrayname, int src_index, dest_arrayname, int dest_index, int length);

3.9  删除数组元素
ArrayList<String> arr = new ArrayList<String>();
arr.clear();  //清空元素
arr.add(0,"元素0"); 
arr.add(1,"元素1"); 
arr.add(2,"元素2"); 
arr.remove(1); //按照索引删除
arr.remove("元素0"); //按照值删除

3.10 数组差集
ArrayList arr = new ArrayList();
ArrayList arr1 = new ArrayList();
arr.removeAll(arr1); //返回arr，删除arr中arr1存在的元素

3.11 数组交集
ArrayList arr = new ArrayList();
ArrayList arr1 = new ArrayList();
arr.retainAll(arr1); //返回arr，结果arr和arr1交集元素

3.12 数组包含关系
ArrayList<String> arr = new ArrayList<String>();
ArrayList<String> arr1 = new ArrayList<String>();
boolean isContains = arr.contains(arr1); //arr1是否是arr的子集
boolean isContains = arr.contains(String str) //arr是否包含str字符串

3.13 判断数组是否相等
//判断str和str1是否相等
boolean isEqual = Arrays.equals(String[] str, String[] str1);

3.14 数组并集
String[] str = new String[];
String[] str1 = new String[];
String[] str2 = union(str, str1); //union()实现并集
//或者通过HashSet实现元素唯一性
public static String[] union(String[] str1, String[] str2) {
    Set<String> set = new HashSet<String>();
    for (String str : str1) {set.add(str);}
    for (String str : str2) {set.add(str);}
    String[] result = {};
    return set.toArray(result);
}


时间处理
4.1 时间格式化
Date date = new Date();
String strDateFormat = "yyyy-MM-dd HH:mm:ss";
SimpleDateFormat sdf = new SimpleDateFormat(strDateFormat);
System.out.println(sdf.format(date));

4.2 获取当前时间
SimpleDateFormat sdf = new SimpleDateFormat(); //格式化时间
sdf.applyPattern("yyyy-MM-dd HH:mm:ss a");  //a为am标记
Date date = new Date(); //获取当前时间
System.out.println("现在时间" + sdf.format(date));

4.3 获取年份/月份
Calendar cal = Calendar.getInstance();
int day = cal.get(Calendar.DATE); //当月多少号
int month = cal.get(Calendar.MONTH) + 1;
int year = cal.get(Calendar.YEAR);
int dow = cal.get(Calendar.DAY_OF_WEEK);
int dom = cal.get(Calendar.DAY_OF_MONTH);
int doy = cal.get(Calendar.DAY_OF_YEAR);
String time = cal.getTime(); //格式例如Fri Mar 27 21:44:15 CST 2015

4.4 时间戳转换成时间
Long timeStamp = System.currentTimeMillis(); //获取当前时间戳
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
Date date = new Date(Long.parseLong(String.valueof(timeStamp))); //转化时间对象
String sd = sdf(date); //格式化时间为字符串


方法
5.1 Overloading 重载/方法重写
主要用于继承，子类重载父类方法
方法名相同，返回类型不同或参数个数或参数类型或参数顺序等一个或多个差异
myFunction(); //原方法
myFunction(int i);
int myFunction(int i, int j);

5.2 输出数组元素
通过重载和foreach循环打印数组
例如：
void printArray(Integer[] inputArray)
for(Integer element : inputArry){
	System.out.printf("%s ", element)
}

5.3 递归算法-汉诺塔
三个杆子A,B,C ，A上有若干碟子从大到小依次从下往上排列，
要求：所有碟子从A杆移到C杆，每次只能移动一个盘子，大的不能放到小的上面
public class MainClass{
	public static void main(String[] args){
		int nDisks = 3;
		doTowers(nDisks, 'A', 'B', 'C');
	}
	public static void doTowers(int topN, char from, char inter, char to){
		if(topN == 1){
			System.out.println("Disk1 1 from" + from + " to " + to);
		}else{
			doTowers(topN -1, from, to, inter);
			System.out.println("Disk " + topN + " from " + from + " to " + to);
			doTowers(topN - 1, inter, from, to);
		}
	}
}

5.4 斐波那契数列
long fibonacci(int n){
	if((n == 0) || (n == 1))
		return n;
	else
		return fibonacci(n - 1) + fibonacci(n - 2);
}

5.5 阶乘
long factorial(int n){
	if(n <= 1)
		return 1;
	else
		return n * factorial(n - 1);
}

5.6 Overriding 方法覆盖
重写父类方法，不同的实现方式，方法名、参数签名完全一致，返回类型可以不同。

5.7 instanceof 二元操作符，用于判断对象实例
boolean i = a instanceof B; //判断a是否是B类的实例

5.8 循环标签break和continue
break    //跳出循环体
continue //跳出本次循环，进行下次循环

5.9 枚举类和switch语句
enum Car {lamborghini,tata,audi,fiat,honda}; //定义枚举类

Car c = Car.tata;
switch(c){
	case lamborghini:
		System.out.println("你选择了lamborghini!");
		break;
	case tata:
		System.out.println("你选择了tata!");
		break;
	...
	default:
		System.out.println("不知道你的车型!");
		break;
}

5.10 枚举类构造函数及方法的使用
enum关键字用于创建枚举类，隐含了所创建的类型都是java.lang.Enum的子类
enum Car{
	a(1231),b(12434),c(23453);
	private int price;
	Car(int p){
		price = p;
	}
	int getPrice(){
		return price;
	}
}
//foreach循环输出
for(Car x : Car.values()){
	System.out.println(x + " 需要 " + x.getPrice() + " 千美元。");
}

5.11 循环语句
//常规for循环
for(初始化;布尔表达式;更新语句){
	//代码语句
}
//加强for循环--foreach
for(元素类型 变量名：遍历对象){
	//语句
}

5.12 可变参数
//可变参数求和
int mySum(int... intArrays){
	int sum = 0;
	for(int i = 0; i < intArrays.length; i++){
		sum += intArrays[i];
	}
	return sum;
}
//引用
sum = mySum(new in[]{1,43,89,8,45})


文件操作
//需引入io库
import java.io.*;
6.1 文件写入
try{
	BufferedWriter out = new BufferedWriter(
	    new FileWriter("runoob.txt"));
	out.write("菜鸟教程")；
	out.close();
}catch(IOException e)

6.2 文件读取
try{
	BufferedReader in = new BufferedReader(
		new FileReader("test.log"));
	while((String str = in.readLine()) != null){
		System.out.println(str);
	}
	System.out.println(str);  //此时，str已经是null
}catch(IOException e)

6.3 文件删除
try{
	File file = new File("c:\\test.txt");
	if(file.delete()){
		System.out.println(file.getName() + "文件删除成功!");
	}else{
		System.out.println("文件删除失败！");
	}
}catch(IOException e){
	e.printStackTrace(); //捕获堆栈信息
}

6.4 文件内容复制
BufferedWriter out1 = new BufferedWriter(new FileWriter("src_file"));
out1.write("string to be copied\n");
out1.close();
InputStream in = new FileInputStream(new File("src_file"));
OutputStream out = new FileOutputSream(new File("deat_file"))
byte[] buf = new byte[1024];
int len;
while((len = in.read(buf)) > 0){
	out.write(buf,0,len);
}

6.5 文件内容追加
try{
	BufferedWriter out = new BufferedWriter(new FileWriter("filename"))；
	out.write("aString1\n");
	out.close();
	out = new BufferedWriter(new FileWriter("filename", true));
	out.write("aString2\n");
	out.close();
	BufferedReader in = new BufferedReader(new FileReader("filename"));
	while((String str = in.readLine()) != null){
		System.out.println(str);
	}
	in.close();
}catch (IOException e){
	Sysytem.out.println("Exception occoured" + e);
}

6.6 临时文件的创建
a)File.createTempFile(String prefix, String suffix) //参数分别为前缀、后缀
public static void main(String[] args) throws Exception{
	File temp = File.createTempFile("tmp", ".txt") //创建tmp.txt临时文件
	String path = temp.getAbsolutePath(); //获取文件绝对路径
	temp.deleteOnExit();  //执行后删除临时文件
	BufferedWriter out = new BufferedWriter(new FileWriter(temp));
	out.write("aString\n"); //向临时文件中写入数据
	out.close();
}
b)File.createTempFile(String prefix, String suffix, File directory)
File f = null;
try{
	f = File.createTempFile("tmp", ".txt", new File("C:/")); //创建临时文件
	f1 = File.createTempFile("tmp", null, new File("D:/")); //创建不带后缀的临时文件
	f.deleteOnExit(); //执行后删除文件
	f1.deleteOnExit(); //执行后删除文件	
}catch(Exception e){
	e.printStackTrace();  //如有错误输出内容
}

6.7 文件修改日期
File f = new File("C:/my.txt"); //创建文件
f.lastModified(); //修改最后修改时间
Date fTime = new Date(f.lastModified()); //获取修改时间
System.out.println(f.toString());  //将修改时间转换成String类型并输出
boolean b = f.setLastModified(System.currentTimeMillis()); //修改最后修改时间，返回值为布尔类型
fTime = new Date(f.lastModified()); //获取修改时间
System.out.println(f.toString());  //输出时间

6.8 获取文件大小
File f = new File(filename); //创建文件对象
boolean b1 = f.exists(); //判断文件是否存在
boolean b2 = f.isFile(); //判断是否为文件
long size = f.length(); //获取文件大小，以byte计

6.9 文件重命名
File f_old = new File(filename1);
file f_new = new File(filename2);
boolean b = f_old.renameTo(f_new); //重命名成功返回true

6.10 设置文件只读
File f = new File(filename);
boolean b1 = f.setReadOnly(); //设置只读
boolean b2 = f.canWrite(); //判断是否可写

6.11 指定目录创建文件
File dir = new File(path);
File file = File.createTempFile("文件名", "后缀名", dir);

6.12 创建文件
try{
	File f = new File("C:/myfile.txt"); //创建新文件
	boolean b = f.createNewFile(); //判断新文件是否创建
}catch(IOException e){
	e.printStackTrace();
}

6.13 判断文件是否在同一目录下
File f1 = new File("C:/File/123.txt");
File f2 = new File("C:/java/234.txt");
if(f1.compareTo(f2) == 0)  //判断文件路径是否一致
	System.out.println("文件路径一致");
else
	System.out.println("文件路径不一致");


目录操作
7.1 创建目录
String dir = "D:\\a\\b\\c\\d\\e"; //定义目录
File f = new File(dir); //创建文件对象
boolean b = f.mkdir(); //返回创建结果

7.2 删除目录
public static void main(String[] args) thorows Exceptiom{
	deleteDir(new File("./test")); //删除test
}

public static boolean deleteDir(File dir){
	if(dir.isDirectory()){ //判断是否为目录
		String[] children = dir.list(); //返回目录下所有文件及目录
		for(int i = 0;i < children.length; i++){ //递归删除
			boolean success = deleteDir(new File(dir, children[i]));
			if(!success){
				return false;
			}
		}
	}
	if(dir.delete()){
		System.out.println("目录已被删除！");
		return true;
	}else{
		System.out.println("目录删除失败！");
		return false;
	}
}

7.3 判断目录是否为空
File file = new File("./testdir");
file.isDirectory(); //判断是否为目录
file.list().length; //返回目录下目录和文件总数

7.4 判断目录是否隐藏
File file = new File("C:/test.txt");
boolean b = file.isHidden();

7.5 获取目录大小
long size = FileUtils.sizeOfDirctory(new Fiile("C:/test")); //以byte计

7.6 获取文件上级目录
File file = new File("C:/file/test.txt");
String strParenDir = file.getParent();

7.7 打印目录结构
public static void main(String[] args) throws IOException{
	showDir(1, new File("c:\\test"));
}
static viod showDir(int indent, File file) throws IOException{
	for(int i = 0; i < indent; i++)
		Systen.out.print('-');
	System.out.println(file.getNmae());
	if(file.isDirectory()){
		File[] files = file.listFiles();
		for(int i = 0; i < files.length; i++)
			showDir(indent + 4,files[i]);
	}
}

7.8 遍历指定目录下的所有目录
File dir = new File("c:");
File[] files = dir.listFiles();
FileFilter ff = new FileFilter(){
	public boolean accept(File file){
		return file.isDirectory();
	}
};
files = dir.listFiles();
if(files.length == 0){
	System.out.println("目录不存在或不是目录");
}else{
	for(int i = 0; i < files.length; i++){
		File f = Files[i];
		System.out.println(f.toString());
	}
}

7.9 遍历指定目录下所有文件及目录
File f = new File("C:");
String[] children = f.list(); //返回指定目录下的所有文件及目录列表的数组

7.10 遍历系统根目录
File[] roots = File.listRootd();
for(int i = 0; i < roots.length; i++){
	System.out.println(roots[i].toString());
}

7.11 获取当前工作目录
String curDir = System.getProperty("user.dir");

7.12 遍历目录
public static void main(String[] args) throws Exception{
	File dir = new File("c:/myDir"); //指定遍历的目录
	visitAllDirAndFiles(dir);
}
public static void visitAllDirAndFiles(File f){
	if(f.isDirectory()){
		String[] children = f.list();
		for(int i = 0; i < children.length; i++){
			visitAllDirAndFiles(new File(f, children[i]));
		}
	}
}


异常处理
8.1 System.err.println() 处理异常
try{
	throw new Exception("My Exception");
}catch(Exception e){
	System.err.println("Caught Exception");
	System.err.println(e.getMessage()); //获取异常错误消息字符串，不返回错误类型
	System.err.println(e.getLocalizedMessage());
	e.printStackTrace(); //打印错误位置及原因
}

8.2 多catch
try{
	throw new Type();
}catch(Type1 t1){
	//异常代码1
}catch(Type2 t2){
	//异常代码2
}catch(Type3){
	//异常代码3
}finally{
	//一般为资源关闭相关代码
}

8.3 多线程异常处理
class MyThread extends Thread{  //继承Thread类，并重写run()方法
	public void run(){
		throw new RuntimeException(); //跑出运行时异常
	}
}
class Main{
	public static void main(String[] args){
		MyThread t = new MyThread();
		t.start(); //开始进程
		try{
			Thread.sleep(1000); //休眠1000ms
		}catch(Exception e){ //捕获异常，并输出详情
			System.out.println("Caught it " + e);
		}
		System.out.println("Exiting main"); //输出推出信息
	}
}

8.4 链式异常
public static void main(String[] args) throws Exception{
	try{
		int result = 20/0;
		System.out.println("表达式结果为" + result);
	}catch(ArithmeticException ex){  //捕获算数异常
		System.out.println("算数异常" + ex)
		try{
			throw new NumberFormatException(); //手动/强制抛出数字格式异常
		}catch(NumberFormatException e){
			System.out.println("强制抛出异常：" + e)
		}
	}
}

8.5 自定义异常
class MyException extends Exception{ //创建自定义异常，继承于Exception类
	MyException(String str){
		super(str);
	}
}
class Input{
	void method() throws MyException{
		throw new Myexception("My Exception");  //抛出自定义异常
	}
}
class Test{
	public static void main(String[] args){
		try{
			new Input().method();
		}catch(Myexception e){
			System.out.println(e.getMessage());
		}
	}
}


数据结构
9.1 链表(LinkedList)
LinkedList<String> myList = new LinkedList<String>(); //实例化LinkedList
myList.add("1"); //添加元素，默认从链表尾部添加
myList.addFirst("0"); //在链表开头添加元素
myList.addLast("2"); //在链表结尾添加元素
System.out.println(myList); //输出  [0,1,2]
myList.getFirst(); //获取链表的栈顶元素
myList.removeFirst(); //移除栈顶元素
myList.subList(2,4).clear(); //删除指定位置元素，按照索引下标删除。[2,4)
myList.indexOf("1"); //返回指定元素第一次出现的位置
myList.last.IndexOf("1"); //返回指定元素最后一次出现的位置
myList.set(2, "3"); //修改指定位置元素的值

9.2 向量(Vector)
Vector v = new Vector();
v.add("A");
v.add("B");
v.add("C");
Collections.sort(v); //排序
int index = Collections.binarySearch(v, "A"); //查找指定位置索引
Object obj = Collections.max(v); //返回元素最大值
Collections.swap(v, 0, 2); //旋转指定元素，包括索引位置

9.3 队列(Quenue)
//一种特殊线性表，只允许表前端进行删除，后端进行插入
Quenue<String> q = new LinkedList<String>(); //实例化队列，LinkList类实现了Quenue接口
//添加元素。不使用add()添加，remove()删除，这两种方法在失败后会抛出异常，不推荐使用
q.offer("a");
q.offer("b");
q.offer("c");
q.poll(); //返回第一个元素并删除该元素，删除a
q.element(); //返回第一个元素
q.peek(); //返回第一个元素


集合
10.1 数组转集合
String[] str = new String[5];
for(int i =0; i < 5; i++){
	str[i] = String.valueOf(i); //数组赋值
}
List<String> list = Arrays.asList(str); //数组转集合

10.2 集合和元素比较
String[] coins = {"Penney","nickel","dime","Quarter","dollar"}; //创建字符串数组
Set<String> set = new TreeSet<String>(); //TreeSet类实现了Set接口
for(int i = 0; i < coins.length; i++){
	set.add(coins[i]); //数组转化成集合
}
Object obj = Collections.min(set); //返回最小元素
Collections.min(set, String.CASE_INSENSITIVE_ORDER); //忽略大小写返回最小值

10.3 HashMap遍历
HashMap<String, String> hm = new HashMap<String, String>();
hm.put("1", "1st"); //添加元素
hm.put("2", "2nd");
hm.put("3", "3rd");
boolean b = col.isEmpty(); //判断集合是否为空
int size = col.size(); //返回集合长度
Collection col = hm.values(); //获取HashMap元素集合
//迭代遍历
Iterator itr = col.iterator(); //创建集合迭代器
while(itr.hasNext()){
	System.out.println(itr.next());
}
//传统for循环遍历
for(int i = 0; i < size; i++){
	String value = col.get(i);
	System.out.println(value);
}
//foreach循环遍历
for(String value; col){
	System.out.println(value);
}

10.4 打乱集合元素
List<Integer> list = new ArrayList<Intrger>();
for(int i = 0; i < 10; i++){
	list.add(new Integer(i));
}
Collections.shuffle(list); //打乱集合元素

10.5 集合反转
Collections.reverse(List);

10.6 只读集合
public static void main(String[] args) throws Exception{
	List stuff = Array.asList(new String[]{"a", "b", "c"});
	List list = new ArrayList(stuff);
	list = Collections.unmodifiableList(list); //设置只读
	try{
		list.set(0, "new value");
	}catch(UnsupportedOperationException e){
		//捕获的异常代码
	}
	Set set = new HashSet(stuff);
	set = Collections.unmodifiableList(set); //设置只读
	Map map = new HashMap();
	map = Collection.unmodifiableList(map); //设置只读
}

10.7 集合输出
TreeMap tMap = new TreeMap();
tMap.put(1, "Sunday"); //插入数据
tMap.put(2, "Monday");
tMap.put(3, "Tuesday");
tMap.put(4, "Wedesday");
tMap.put(5, "Thursday");
tMap.put(6, "Friday");
tMap.put(7, "Saturday");
tMap.keySet(); //返回 key
tMap.values(); //返回 values
tMap.get(key); //返回指定键的值
tMap.firstKey();
tMap.lastKey();
tMap.remove(key); //移除指定键对应的键值对

10.8 循环移动元素
String str = "A B C B";
List list = Array.asList(str.split(" ")); //按照指定分隔符将字符串转化成集合
Collections.rotate(list, 2); //指定移动截止索引位置，输出结果[C, D, A, B]

10.9 遍历HashTable的键值
HashTable ht new HashTable();
ht.put("1", "one");
ht.put("2", "two");
Enumeration e = ht.keys(); 接收键
//Enumeration e = ht.value(); //接收值
while(e.hashMoreElements()){
	System.out.println(e.nextElement());
}

10.10 不同集合添加元素
List linkList = new LinkList();
List arrayList = new ArrayList();
Set hashSet = new HashSet();
SortedSet treeSet = new TreeSet();
LinkedHashSet linkedHashSet = new LinkedHashSet();
Map hashMap = new HashMap();
SortedMap treeMap = new TreeMap();
LinkedHashMap linkedHashMap = new LinkedHashMap();
linkList.add("v");
arrayList.add("v");
hashSet.add("v");
treeSet.add("v");
linkedHashSet.add("v");
hashMap.put("k", "v");
treeMap.put("k", "v");
//迭代器输出方法
void displayAll(Collection col){
	Iterator itr = col.iterator();
	while(itr.hasNext()){
		System.out.print(" " + (String)itr.next());
	}
}

10.11 集合元素替换
String str = "A B C D";
List list = Array.asList(str.split(" ")); //按照指定分隔符将字符串转化成集合
Collections.replaceAll(list, "A", "a"); //将A替换成a

10.12 List截取
String str = "A B C D";
List list = Array.asList(str.split(" ")); //按照指定分隔符将字符串转化成集合
String subStr = "B C";
List subList = Array.asList(str.split(" ")); 
int firstIndex = Collections.indexOfSubList(list, subList); //返回之列在列表中第一次出现的索引
int lastIndex = Collections.last.IndexOfSubList(list, subList); //返回之列在列表中最后一次出现的索引


网络实例
11.1 获取指定主机的IP地址
import java.net.InetAddress;
import java.net.UnknowHostException;
InetAddress address = null;
try{
	address = InetAddress.getByname("www.runoob.com");
}catch(UnknowHostException e){
	System.exit(2);
}
String str = address.getHostName(); //返回主机名
String str1 = address.getHostAddress(); //返回主机地址
System.exit(0); //正常退出，关闭JVM。方法为0为正常关闭；其他参数为非正常关闭。

11.2 检测本机端口是否被占用
import java.io.*;
import.java.net.*;
public static void main(String[] args){
	Socket s;
	String host = "localhost";
	if(args.length > 0){
		host = args[0];
	}
	for(int i = 0;i < 1024; i++){
		try{
			System.out.println("查看 " + i)
			s = new Socket(host, i);
			System.out.println("端口" + i +"已被使用！")
		}catch(UnknowHostException e){
			System.out.println("Exception occured " + e)
			break;
		}catch(IOException e){
			
		}
	}
}

11.3 获取本机IP地址及主机名
public static void main(String[] args) throws Exception{
	InetAddress addr = InetAddress.getLocalHost();
	String str = addr.getHostAddress(); //返回主机地址
	String str1 = addr.getHostName();   //返回主机名
}

11.4 获取远程文件大小
import java.net.URL;
import java.netURLConnection;
public static void main(String[] args) throws Exception{
	//定义连接
	URL url = new URL("http://www.runoob/wp-content/thems/runoob/assets/img/newlogo.png");
	URLConnection conn = url.openConnection(); //打开连接
	int size = conn.getContentLength(); //返回资源大小，以byte计。若size<0,表示无法获取文件大小。
	conn.getInputStream().close(); //关闭连接
}

11.5 Socket实现多线程服务器程序
public class MultiThreadServer implements Runnable{ //实现Runnable接口
	Socket csocket;
	MultiThreadServer(Socket csocket){
		this.csocket = csocket;
	}
	
	public static void main(String[] args) throws Exception{
		ServerSocket ss = new ServerSocket(1234); //创建服务器
		System.out.println("Listening");
		while(true){
			Socket s = ss.accept(); //连接服务器
			System.out.println("Connected");
			new Thread(new MultiThreadServer(s).start()); //创建多线程连接
		}
	}
	
	public void run(){ //重写run()方法
		try{
			PrintStream ps = new PrintStream(csocket.getOutputStream());
			for(int i = 100; i >= 0; i--){
				ps.println(i + " bottles of beer on the wall");
			}
			ps.close();
			csocket.close();
		}catch(IOException e){
			System.out.println(e);
		}
	}
}

11.6 查看主机指定文件最后修改时间
URL url = new URL("http://127.0.0.1/java.bmp");
URLConnection uc = url.openConnection(); //打开连接
uc.setUseCaches(flase); //设置请求不能使用缓存
long t = uc.getLastModified(); //返回时间戳

11.7 使用Scoket连接到指定主机
try{
	Scoket s = new Scoket("IPAddress", port); //创建Scoket连接，并指定端口
	InetAddress addr = s.getInetAddrress();
	s.close();
}catch(IOException e){
	System.out.println("无法连接 " + args[0]);
	System.out.println(e);
}

11.8 网页抓取
//抓取网页源码，存放当前目录的Data.html文件中
public static void main(String[] args) throws Exception{
	URL url = new URL("http://www.runoob.com");
	BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
	BufferedWriter writer = new BufferedWriter(new FileWriter("Data.html"));
	while((String line = reader.reader.readerline()) != null){
		System.out.println(line);
		Writer.write(line);
		Writer.newLine();
	}
	reader.close();
	writer.close();
}

11.9 获取URL响应头的日期信息
URL url = new URL("http://www.runoob.com");
HttpURLConnection httpCon = (HttpConnection)url.openConnection();
long date = httpCon.get.Date(); //返回响应时间，无响应返回0.
Date d = new Date(date); 

11.10 获取URL响应头信息
public static void main(String[] args) throws IOException{
	URL url = new URL("http://www.runooob.comm");
	URLConnection conn = url.openConnection(); //打开连接
	Map headers = conn.getHeaderFields(); //Map接收响应信息
	Set<String> keys = headers.keySet();
	for(String key : keys){
		String val = conn.getHeaderField(key);
		System.out.println(key + "   " + val);
	}
	System.out.println(conn.getLastModified());
}

11.11 解析URL
URL url = new URL("http://ip/?.html");
url.toString(); //返回URL
url.getProtocol(); //返回协议
url.getFile(); //返回文件名
url.getHost(); //返回主机名
url.getPath(); //返回文件路径
url.getPort(); //返回端口号
url.getDefaultPort(); //返回默认端口号

11.12 ServerSocket和Socket通信实例
服务端
public class Server{
	public static void main(String[] args){
		try{
			ServerSocket ss = new ServerSocket(88888);
			System.out.println("启动服务器....");
			Socket s = ss.accept();
			System.out.println("客户端：" + s.getInetAddress().getLocalHost() + " 已连接到服务器")；
			BufferedReader br = new BufferedReader(new InputSreamReader(s.getInputStream()));
			//读取客户端发来的消息
			String mess br.readline();
			System.out.println("客户端：" + mess);
			BufferedWriter bw = new BufferedWriter(new OutputStream(s.getOutputStream()));
			bw.write(mess + "\n");
			bw.flush();
		}catch(IOException e){
			e.printStackTrace();
		}
	}
}
客户端
try{
	Socket s = new Socket("127.0.0.1", 8888);
	//构建IO
	InputStream is = s.hetInputStream();
	OutputStream os = s.getOutputStream();
	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(os));
	String mess = br.readLine();
	System.out.println("服务器：" + mess);
}catch(UnknowHostException e){
	e.printStackTrace();
}catch(IOException e){
	e.printStackTrace();
}

线程
12.1 查看线程是否存活
public class TwoThreadAlive extends Thread{ //继承Thread接口
	public void run(){ //重写run()方法
		for(int i = 0; i < 10; i++){
			printMsg();
		}
	}
	public void printMsg(){
		Thread t = Thread.currentThread();
		String str = t.getName(); //获取线程名
		System.out.println("name:" + str);
	}
	public static void main(String[] args){
		TwoThreadAlive tt = new TwoThreadAlive(); //实例化对象
		tt.setName("Thread"); //设置线程名
		System.out.println("before start(),tt.isAlive()=" + tt.isAlive()); //判断线程是否存活
		tt.start(); //启动线程
		System.out.println("after start(),tt.isAlive()=" + tt.isAlive());
		for(int i = 0; i < 10; i++){
			tt.printMsg();
		}
		System.out.println("The and of main(),tt.isAlive()=" + tt.isAlive());
	}
}

12.2 线程状态监测
class MyThread extends Thread{
	boolean waiting = true;
	boolean ready = false;
	MyThread(){}
	public viod run(){
		String tName = Thread.currentThread().getName(); //获取当前进程名
		System.out.println(tName + "starting...");
		while(waiting)
			System.out.println("waiting is " + waiting);
	    System.out.println("waiting...");
		startWait();
		try{
			Thread,sleep(1000); //休眠1s
		}catch(Exception e){ //捕获异常返回进程被打断
			System.out.println(tName + " interrupted.");
		}
		System.out.println(tName + " terminating."); //输出进程结束
	}
	synchronized void startWait(){ //加锁
		try{
			while(!ready) wait();
		}catch(InterruptedException e){
			System.out.println("wait() interrupted!");
		}
	}
	synchronized void notice(){
		ready = true;
		notify();
	}
}
public class Main{
	public static void main(String[] args) throws Exception{
		MyThread mt = new MyThread();
		mt.setName("MyThread #1"); //设置进程名
		showThreadStatus(mt); //显示进程状态
		mt.start(); //启动进程
		Thread.sleep(50); //休眠50ms
		showThreadStatus(mt);
		mt.waiting = false;
		Thread.sleep(50);
		showThreadStatus(mt);
		mt.notice();
		Thread.sleep(50);
		showThreadStatus(mt);
		while(mt.isAlive())
			System.out.println("alive");
	    showThreadStatus(mt)
	}
	static void showThreadStatus(Thread t){
		System.out.println(t.getName() + "Alive=" + t.isAlive() +
			" state=" + t.getState());
	}
}

12.3 线程优先级设置
public class SimplePriorities extends Thread{
	private int countDown = 5;
	/*
	volatile(轻快的)，能部分实现synchronized功能，
	编译后代码量少，资源开销也更少;
	并提供对其他线程的可见性。
	使用场景：
	1）对变量的写操作不依赖于当前值
　　2）该变量没有包含在具有其他变量的不变式中
	*/
	private volatile double d = 0;
	public SimplePriorities(int priority){
		setPriority(priority); //设置线程优先级
		start();
	}
	public String toString(){
		return super.toString() + ":" + countDown;
	}
	public void run(){
		while(true){
			for(int i = 1; i < 100000; i++)
				d = d + (Math.PI + Math.E)/(double)i;
			System.out.println(this);
			if(--countDown == 0)
				return;
		}
	}
	public static void main(String[] args){
		new SimplePriorities(Thread.MAX_PRIORITY);
		for(int i = 0; i < 5; i++)
			new SimplePriorities(Thread.MIN_PRIORITY);
	}
}

12.4 死锁及解决方法
死锁：多个线程同时被阻塞，他们中一个或多个线程都在等待某个资源释放
产生的必要条件：
1.资源互斥
2.资源不可抢夺
3.请求和保持
4.循环等待
//死锁测试
public class LockTest{
	public static String str1 = "str1";
	public static String str2 = "str2";
	public static void main(String[] args){
		LockA la = new LockA();
		new Thread(la).start();
		LockB lb = new LockB();
		new Thread(lb).start();
	}
}
class LockA implements Runnable{
	public void run(){
		try{
			System.out.println(new Date().toString() + " LoackA开始执行")；
			while(true){
				synchronized (LockTest.str1){
					System.out.println(new Date().toString() + " locakA锁住str1");
					Thread.sleep(3 * 1000); //等待给B能锁住的机会
					synchronized (LockTest.str2){
						System.out.prinln(new Date().toString() + " LockA锁住str2")；
						Thread.sleep(60 * 1000); //为了测试，不释放资源
					} 
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
}
class LockB implements Runnable{
	public void run(){
		try{
			System.out.println(new Date().toString() + " LocakB开始执行");
			while(true){
				synchronized (LockTest.str2){
					System.out.println(new Date().toString() + " LockB锁住str2")；
					Thread.sleep(3 * 1000); //等待给A能锁住的机会
					synchronized (LockTest.str1){
						System.out.println(new Date().toString() + " LockB锁住str1");
						Thread.sleep(60 * 1000); //为了测试，不释放资源
					}
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
}
//解锁测试
import java.util.*;
public class UnlockTest{
	public static String str1 = "str1";
	public static final Semaphore a1 = new Semaphore(1);
	public static String str2 = "str2";
	public static final Semaphore a2 = new Semaphore(1);
	public static void main(String[] args){
		LockAa la = new LockAa();
		new Thread(la).start();
		LockBb lb = new LockBb();
		new Thread(lb).start();
	}
}
class LockAa implements Runnable{
	public void run(){
		try{
			System.out.println(new Date().toString() + " LockA开始执行")；
			while(true){
				if(UnlockTest.a1.tryAcqure(1, TimeUnit.SECONDS)){
					System.out.println(new Date().toString() + " LockA锁住str2");
					if(UnlockTest.a2.tryAcqure(1, TimeUnit.SECONDS)){
					    System.out.println(new Date().toString() + " LockA锁住str2");
					    Thread.sleep(60 * 1000);
					}else{
					System.out.println(new Date().toString() + " LockA锁str2失败");
					}
				}else{
					System.out.println(new Date().toString() + " LockA锁str1失败");
				}
				UnlockTest.a1.release(); //释放资源
				UnlockTest.a2.release();
				Thread.sleep(1000);
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
}
class LockBb implements Runnable{
	public void run(){
		try{
			System.out.println(new Date().toString() + " LockA开始执行")；
			while(true){
				if(UnlockTest.a2.tryAcqure(1, TimeUnit.SECONDS)){
					System.out.println(new Date().toString() + " LockA锁住str2");
					if(UnlockTest.a1.tryAcqure(1, TimeUnit.SECONDS)){
					    System.out.println(new Date().toString() + " LockA锁住str2");
					    Thread.sleep(60 * 1000);
					}else{
					System.out.println(new Date().toString() + " LockA锁str2失败");
					}
				}else{
					System.out.println(new Date().toString() + " LockA锁str1失败");
				}
				UnlockTest.a1.release(); //释放资源
				UnlockTest.a2.release();
				Thread.sleep(10 * 1000);
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
}

12.5 获取线程ID
public class Main extends Object implements Runnable{
	private ThreadID var;
	public Main(ThreadID v){
		this.var = v;
	}
	public void run(){
		try{
			print("var getThreadID = " + var.getThreadID());
			Thread.sleep(2 * 1000);
			print("var getThreadID = " + var.getThreadID());
		}catch(InterruptedException e){}
	}
	private static void print(String msg){
		String name Thread.currentThread().getName();
		System.out.println(name + ": " + msg);
	}
	public static void main(String[] args){
		ThreadID tid = new ThreadId();
		Main shared = new Main(tid);
		try{
			Thread t1 = new Thread(shared, "t1");
			t1.start();
			Thread.sleep(500);
			Thread t2 = new Thread(shared, "t2");
			t2.start();
			Thread.sleep(500);
			Thread t3 = new Thread(shared, "t3");
			t3.start();
		}catch(InterruptedException e){}		
	}
}
class ThreadID extends ThreadLocal{
	private int nextID;
	public ThreadID(){
		nextID = 10001;
	}
	private synchronized Integer getNewID(){
		Integer id = new Integer(nextID);
		nextID++；
		return id;
	}
	protected Object initialValue(){
		print("in initialValue()");
		return getNewID();
	}
	private static void print(String msg){
		String name = Thread.currentThread().getName();
		System.out.println(name + ": " + msg);
	}
}

12.6 线程挂起
public class SleepingThread extends Thread{
	private int countDown = 5;
	private static int threadCount = 0;
	public SleepingThread(){
		super("" + ++threadCount);
		start();
	}
	public String toString(){
		return "#" + getName() + ": " + countDown;
	}
	public void run(){
		while(true){
			System.out.println(this);
			if(--countDown == 0)
				return;
			try{
				sleep(100);
			}catch(InterruptedException e){
				throw new RuntimeException(e);
			}
		}
	}
	public static void main(String[] args) throws InterruptedException{
		for(int i = 0; i < 5; i++)
			new SleepingThread().join();
		System.out.println("线程已被挂起");
	}
}

12.7 终止线程
public class ThreadInterrupt extends Thread{
	public void run(){
		try{
			sleep(10 * 1000);
		}catch(InterruptedException e){
			Sysytem.out.println(e.getMessage());
		}
	}
	public static void main(String[] args) throws{
		Thread t = new ThreadInterrupt();
		t.start();
		System.out.println("在10s内按任意键中断线程")；
		System.in.read();
		t.interrupt();
		t.join();
		System.out.println("线程已经退出！");
	}
}

12.8 生产者/消费者问题
//处理资源共享、占用等问题
public class ProducerConsumerTest{
	public static void main(String[] args){
		CubbyHole c = new CubbyHole();
		Producer p1 = new Producer(c, 1);
		Consumer c1 = new Consumer(c, 1);
		p1.start();
		c1.start();
	}
}
class CubbyHole{
	private int contents;
	private boolean available = false;
	public synchronized int get(){
		while(available == false){
			try{
				wait();
			}catch(InterruptedException e){}
		}
		available = false;
		notifyAll();
		return contents;
	}
	public synchronized void put(int value){
		while(available == true){
			try{
				wait();
			}catch(InterruptedException e){}
		}
		contents = value;
		available = true'
		notifyAll();
	}
}
class Consumer extends Thread{
	private CubbyHole cubbyHole;
	private int number;
	public Consumer(CubbyHole c, int number){
		cubbyHole = c;
		this.number = number;
	}
	public void run(){
		int value = 0;
		for(int i = 0; i < 10; i++){
			value = cubbyHole.get();
			System.out.println("消费者 #" + this.number + " put: " + i);
			try{
				sleep((int) (Math.random() * 100));
			}catch(InterruptedException e){}
		}
	}
}

12.9 获取线程状态
java线程生命周期大致分为五种状态
1.新建状态（new）：新创建一个线程对象
2.就绪状态（Runnable）：调用了start()方法，线程位于运行线程池，等待CPU使用权
3.运行状态（Running）：获取了CPU使用权，执行代码
4.阻塞状态（Blocked）：线程因某种原因放弃CPU使用权，暂停运行，直到进入就绪状态才能转为运行状态
  阻塞情况分为三种：
  a)等待阻塞：执行wait()方法，JVM会把线程放到等待池
  b)同步阻塞：运行线程获取对象的同步锁被其他线程占用时，JVM会把该线程放入锁池
  c)其他阻塞：执行sleep()或join()方法，或者发出I/O请求时，JVM会将线程置为阻塞状态，直到方法或请求完成时，线程才会重新转入就绪状态
5.死亡状态（Dead）：线程执行完毕或因异常退出了run()方法，该线程结束生命周期
class MyThread extends Thread{
	boolean waiting = true;
	boolean ready = false;
	MyThread(){}
	public run(){
		String tName = Thread.currentThread().getName();
		System.out.println(tName + " 启动");
		while(waiting)
			System.out.println("等待: " + waiting);
		System.out.println("等待...");
		startWait();
		try{
			Thread.sleep(1000);
		}catch(Exception e){
			System.out.println(tName + " 中断");
		}
		System.out.println(tName + " 结束")
	}
	synchronized void startWait(){
		try{
			while(!ready)
				wait();
		}catch(InterruptedException e){
			System.out.println("wait() 中断");
		}
	}
	synchronized void notice(){
		ready = true;
		notify();
	}
}
public class Main{
	public static void main(String[] args) throws Exceptiom{
		MyThread thrd = new MyThread();
		thrd.setName("MyThread #1");
		showThreadStatus(thrd);
		thrd.start();
		Thread.sleep(50);
		showThreadStatus(thrd);
		thrd.waiting = false;
		Thread.sleep(50);
		showThreadStatus(thrd);
		thrd.notice();
		Thread.sleep(50);
		showThreadStatus(thrd);
		while(thrd.isAlive()){
			System.out.println("alive");
		}
		showThreadStatus(thrd);
	}
	static void showThreadStatus(Thread t){
		System.out.println(t.getName() + " 存活:" + t.isAlive() + " 状态:" + t.getState());
	}
}

12.10 获取所有线程
public class Main extends Thread{
	public static void main(String[] args){
		Main t1 = new Main();
		t1.setName("thread1");
		t1.start();
		ThreadGroup currentGroup = Thread.currentThread().getThreadGroup();
		int noThreads = currentGroup.activeCount();
		Thread[] lsThreads = new Thread[noThreads];
		currentGroup.enumerate(lsThreads);
		for(int i = 0; i < noThreads; i++){
			System.out.println("线程号：" + i " = " + lsThreads[i].getName());
		}
	}
}

12.11 查看线程优先级
public class Main extends Object{
	private static Runnable makeRunnable(){
		Runnable r = new Runnable(){
			public void run(){
				for(int i = 0; i < 5; i++){
					Thread t = Thread.currentThread();
					System.out.println("In run() - priority = " + t.getPriority() + ", name = " + t.getName());
					try{
						Thread.sleep(2000);
					}catch(InterruptedException e){}
				}
			}
		};
		return r;
	}
	public static void main(String[] args){
		System.out.println("In main() - Thread.currentThread().getPriority() = " + Thread.currentThread().getPriority());
		System.out.println("In main() - Thread.currentThread().getName() = " + Thread.currentThread().getName());
		Thread threadA = new Thread(makeRunnable(), "threadA");
		threadA.start();
		try{
			Thread.sleep(3000);
		}catch(InterruptedException e){}
		System.out.println("In main() - threadA.getPriority() = " + threadA.getPriority());
	}
}

12.12 中断线程
public class Main extends object implements Runnable{
	public void run(){
		try{
			System.out.println("In run() - 将运行work2()方法");
			work2();
			System.out.println("In run() - 从work()方法回来");
		}catch(InterruptedException e){
			System.out.println("In run() - 中断work2()方法");
			return;
		}
		System.out.println("In run() - 休眠后执行");
		System.out.println("In run() - 正常离开");
	}
	public work2() throws InterruptedException{
		while(true){
			if(Thread.currentThread().isInterrupted()){
				System.out.println("C isInterrupted() = " + Thread.currentThread().isInterrupted());
				Thread.sleep(2000);
				System.out.println("D isInterrupted() = " + Thread.currentThread().isInterrupted());
			}
		}
	}
	public static void main(String[] args){
		Main si = new Main();
		Thread t = new Thread(si);
		t.start();
		try{
			Thread.sleep(2000);
		}catch(InterruptedException e){}
		System.out.println("In main() - 中断其他线程");
		t.interrupt();
		System.out.println("In main - 离开");
	}
}


























