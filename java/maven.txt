Maven 教程  

简介
Maven原意为 专家、内行，是Apache下一个纯java开发的开源项目，可对 Java 项目进行构建、依赖管理。也可管理其他语言项目。
主要功能：项目构建/文档生成/报告/依赖/SCMs/发布/分发/邮件列表等


标准目录结构  //约定配置
目录								说明
${basedir}							存放pom.xml和所有的子目录
${basedir}/src/main/java			项目的java源代码
${basedir}/src/main/resources		项目的资源，比如说property文件，springmvc.xml
${basedir}/src/test/java			项目的测试类，比如说Junit代码
${basedir}/src/test/resources		测试用用的资源
${basedir}/src/main/webapp/WEB-INF	web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面
${basedir}/target					打包输出目录
${basedir}/target/classes			编译输出目录
${basedir}/target/test-classes		测试编译输出目录
Test.java							Maven只会自动运行符合该命名规则的测试类
~/.m2/repository					Maven默认的本地仓库目录位置


Maven 特点
01.项目设置遵循统一的规则。
02.任意工程中共享。
03.依赖管理包括自动更新。
04.一个庞大且不断增长的库。
05.可扩展，能够轻松编写 Java 或脚本语言的插件。
06.只需很少或不需要额外配置即可即时访问新功能。
07.基于模型的构建 − Maven能够将任意数量的项目构建到预定义的输出类型中，如 JAR，WAR 或基于项目元数据的分发，
    而不需要在大多数情况下执行任何脚本。
08.项目信息的一致性站点 − 使用与构建过程相同的元数据，Maven 能够生成一个网站或PDF，包括您要添加的任何文档，
    并添加到关于项目开发状态的标准报告中。
09.发布管理和发布单独的输出 − Maven 将不需要额外的配置，就可以与源代码管理系统（如 Subversion 或 Git）集成，
    并可以基于某个标签管理项目的发布。它也可以将其发布到分发位置供其他项目使用。Maven 能够发布单独的输出，如 JAR，包含其他依赖和文档的归档，或者作为源代码发布。
10.向后兼容性 − 您可以很轻松的从旧版本 Maven 的多个模块移植到 Maven 3 中。
11.子项目使用父项目依赖时，正常情况子项目应该继承父项目依赖，无需使用版本号，
12.并行构建 − 编译的速度能普遍提高20 - 50 %。
13.更好的错误报告 − Maven 改进了错误报告，它为您提供了 Maven wiki 页面的链接，您可以点击链接查看错误的完整描述。


版本JDK匹配
Maven 3.3 要求 JDK 1.7 或以上
Maven 3.2 要求 JDK 1.6 或以上
Maven 3.0/3.1 要求 JDK 1.5 或以上

各平台配置可参考以下教程
http://www.runoob.com/maven/maven-setup.html


Maven POM
POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，
用于描述项目如何构建，声明项目依赖，等等。
POM 中可以指定以下配置：
项目依赖
插件
执行目标
项目构建 profile
项目版本
项目开发者列表
相关邮件列表信息

pom.xml 示例
<project xmlns = "http://maven.apache.org/POM/4.0.0"  //工程的根标签
    xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation = "http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>  			  //模型版本
	//以下三个为必备标签
    <groupId>com.companyname.project-group</groupId>  //maven工程(项目)ID，路径由此ID生成
    <artifactId>project</artifactId>  				  //Java项目ID
    <version>1.0</version>  						  //Java项目版本号
	
</project>

Super POM
Maven 默认的 POM。所有的 POM 都继承自一个父 POM（无论是否显式定义了这个父 POM）。


Maven 构建生命周期
定义了一个项目构建跟发布的过程。
一个典型的 Maven 构建（build）生命周期是由以下几个阶段的序列组成的：
阶段           处理	     描述
验证 validate  验证项目	 验证项目是否正确且所有必须信息是可用的
编译 compile   执行编译	 源代码编译在此阶段完成
测试 Test	   测试	     使用适当的单元测试框架（例如JUnit）运行测试。
包装 package   打包	     创建JAR/WAR包如在 pom.xml 中定义提及的包
检查 verify	   检查	     对集成测试的结果进行检查，以保证质量达标
安装 install   安装	     安装打包的项目到本地仓库，以供其他项目使用
部署 deploy	   部署	     拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程

未完待续...


Maven 构建配置文件
构建配置文件是一系列的配置项的值，可以用来设置或者覆盖 Maven 构建默认值。使用构建配置文件，你可以为不同的环境，
比如说生产环境（Producation）和开发（Development）环境，定制构建方式。

配置文件在 pom.xml 文件中使用 activeProfiles 或者 profiles 元素指定，并且可以通过各种方式触发。配置文件在构建时
修改 POM，并且用来给参数设定不同的目标环境（比如说，开发（Development）、测试（Testing）和生产环境（Producation）
中数据库服务器的地址）。

构建配置文件的类型
构建配置文件大体上有三种类型:

类型	                在哪定义
项目级（Per Project）	定义在项目的POM文件pom.xml中
用户级（Per User）	    定义在Maven的设置xml文件中 (%USER_HOME%/.m2/settings.xml)
全局（Global）	        定义在 Maven 全局的设置 xml 文件中 (%M2_HOME%/conf/settings.xml)


Maven 仓库
在 Maven 的术语中，仓库是一个位置（place）。
Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。
在 Maven 中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件。
Maven 仓库能帮助我们管理构件（主要是JAR），它就是放置所有JAR文件（WAR，ZIP，POM等等）的地方。

Maven 仓库有三种类型：
本地（local）
中央（central）
远程（remote

本地仓库
.m2/respository/   //默认路径
%M2_HOME%\conf 目录中的 Maven 的 settings.xml  //可修改<localRepository>your-path</localRepository>

中央仓库
Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。

远程仓库
如果 Maven 在中央仓库中也找不到依赖的文件，它会停止构建过程并输出错误信息到控制台。为避免这种情况，Maven 提供了
远程仓库的概念，它是开发人员自己定制仓库，包含了所需要的代码库或者其他工程中用到的 jar 文件。
配置pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.companyname.projectgroup</groupId>
    <artifactId>project</artifactId>
    <version>1.0</version>
    <dependencies>
        <dependency>
            <groupId>com.companyname.common-lib</groupId>
            <artifactId>common-lib</artifactId>
            <version>1.0.0</version>
        </dependency>
    <dependencies>
    <repositories>
        <repository>
            <id>companyname.lib1</id>
            <url>http://download.companyname.org/maven2/lib1</url>
        </repository>
        <repository>
            <id>companyname.lib2</id>
            <url>http://download.companyname.org/maven2/lib2</url>
        </repository>
    </repositories>
</project>

Maven 依赖搜索顺序
当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：
1.在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。
2.在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中已被将来引用。
3.如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。
4.在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库已被将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。

Maven 阿里云(Aliyun)仓库
1.修改maven根目录下的conf文件夹中的setting.xml文件，在mirrors节点上，添加内容如下：
<mirrors>
    <mirror>
        <id>alimaven</id>
        <name>aliyun maven</name>
        <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
        <mirrorOf>central</mirrorOf>        
    </mirror>
</mirrors>

2.pom.xml文件里添加：
<repositories>  
    <repository>  
        <id>alimaven</id>  
        <name>aliyun maven</name>  
        <url>http://maven.aliyun.com/nexus/content/groups/public/</url>  
        <releases>  
            <enabled>true</enabled>  
        </releases>  
        <snapshots>  
            <enabled>false</enabled>  
        </snapshots>  
    </repository>  
</repositories>


Maven 构建 Java 项目
Maven 使用原型 archetype 插件创建项目。要创建一个简单的 Java 应用，我们将使用 maven-archetype-quickstart 插件。
在下面的例子中，我们将在 C:\MVN 文件夹下创建一个基于 maven 的 java 应用项目。
命令格式如下：
mvn archetype:generate -DgroupId=com.companyname.bank -DartifactId=consumerBanking -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

参数说明：
-DgourpId: 组织名，公司网址的反写 + 项目名称
-DartifactId: 项目名-模块名
-DarchetypeArtifactId: 指定 ArchetypeId，maven-archetype-quickstart，创建一个简单的 Java 应用
-DinteractiveMode: 是否使用交互模式

各个文件夹说明：
文件夹结构              描述
consumerBanking         包含 src 文件夹和 pom.xml
src/main/java contains	java 代码文件在包结构下（com/companyName/bank）。
src/main/test contains	测试代码文件在包结构下（com/companyName/bank）。
src/main/resources      包含了 图片 / 属性 文件（在上面的例子中，我们需要手动创建这个结构）。


Maven 引入外部依赖
pom.xml 的 dependencies 列表列出了我们的项目需要构建的所有外部依赖项。
<dependencies>
    <dependency>
        <groupId>ldapjdk</groupId>                               //库名称，也可以自定义
        <artifactId>ldapjdk</artifactId>                         //库名称，也可以自定义
        <version>1.0</version>                                   //版本号
        <scope>system</scope>                                    //作用域
        <systemPath>${basedir}\src\lib\ldapjdk.jar</systemPath>  //项目根目录下的lib文件夹下
    </dependency> 
</dependencies>





附录
POM 标签大全详解
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd">
	
    <parent>              //Super POM 标签,项目元素值未指定时,会继承此标签下的group ID，artifact ID和 version的值
        <artifactId />    //<artifactId> </artifactId>简写模式，下同
        <groupId />
        <version />
        <relativePath />  //Super POM相对路径，默认为 ../pom.xml
    </parent>
	
    <modelVersion>4.0.0</modelVersion>       //模型版本，一般不变，但必不可少
    <groupId>asia.banseon</groupId>          //maven工程(项目)ID，路径由此ID生成
    <artifactId>banseon-maven2</artifactId>  //Java项目ID
    <packaging>jar</packaging>  			 //构建(打包)类型,例如jar、war、ear、pom等
    <version>1.0-SNAPSHOT</version>  		 //项目当前版本，格式为:主版本.次版本.增量版本-限定版本号
    <name>banseon-maven</name>  			 //项目的名称, Maven产生的文档用
    <url>http://www.baidu.com/banseon</url>  //项目主页的URL, Maven产生的文档用    
	<description>A maven project to study maven.</description>  //项目的详细描述, Maven 产生的文档用

    <prerequisites>  //描述了这个项目构建环境中的前提条件
       <maven />     //构建该项目或使用该插件所需要的Maven的最低版本
    </prerequisites>
	
    <issueManagement>  							  //项目的问题管理系统,如Bugzilla, Jira, Scarab等
        <system>jira</system>  					  //问题管理系统（例如jira）的名字
        <url>http://jira.baidu.com/banseon</url>  //问题管理系统的URL
    </issueManagement>

    <ciManagement>   //项目持续集成信息        
        <system />   //持续集成系统的名字，例如continuum         
        <url />      //该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）      
        <notifiers>  //构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）                
            <notifier>     		   //配置一种方式，当构建中断时，以该方式通知用户/开发者                     
                <type />  		   //传送通知的途径                     
                <sendOnError />    //发生错误时是否通知                     
                <sendOnFailure />  //构建失败时是否通知                     
                <sendOnSuccess />  //构建成功时是否通知                     
                <sendOnWarning />  //发生警告时是否通知                     
                <address />  	   //不赞成使用。通知发送到哪里                     
                <configuration />  //扩展配置项
            </notifier>
        </notifiers>
    </ciManagement>
	    
    <inceptionYear />  //项目创建年份，4位数字。当产生版权信息时需要使用这个值
    
    <mailingLists>      //项目相关邮件列表信息            
        <mailingList>   //该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。                
            <name>Demo</name>             //邮件的名称                
            <post>banseon@126.com</post>  //发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建                
            <subscribe>banseon@126.com</subscribe>      //订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建                
            <unsubscribe>banseon@126.com</unsubscribe>  //取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建                
            <archive>http:/hi.baidu.com/banseon/demo/dev/</archive>  //你可以浏览邮件信息的URL
        </mailingList>
    </mailingLists>
    
    <developers>     			  			//项目开发者列表            
        <developer> 						//某个项目开发者的信息                
            <id>HELLO WORLD</id>  			//SCM里项目开发者的唯一标识符                
            <name>banseon</name>  			//项目开发者的全名                
            <email>banseon@126.com</email>  //项目开发者的email                
            <url />  						//项目开发者的主页的URL                
            <roles>  						//项目开发者在项目中扮演的角色，角色元素描述了各种角色
                <role>Project Manager</role>
                <role>Architect</role>
            </roles>                
            <organization>demo</organization>  	  //项目开发者所属组织                
            <organizationUrl> </organizationUrl>  //项目开发者所属组织的URL                
            <properties>  						  //项目开发者属性，如即时消息如何处理等
                 <dept>No</dept>
            </properties>                
            <timezone>-5</timezone>               //项目开发者所在时区， -11到12范围内的整数。
        </developer>
    </developers>
    
    <contributors>     //项目的其他贡献者列表          
        <contributor>  //项目的其他贡献者。参见developers/developer元素
            <name />
            <email />
            <url />
            <organization />
            <organizationUrl />
            <roles />
            <timezone />
            <properties />
        </contributor>
    </contributors>

    <licenses>     //该元素描述了项目所有License列表。建议只列出该项目的license列表，不要列出依赖项目的 license列表。          
        <license>  //描述了项目的license，用于生成项目的web站点的license页面                
           <name> </name>  				      //license用于法律上的名称                
           <url> </url>              		  //官方的license正文页面的URL                
           <distribution>repo</distribution>  //项目分发的主要方式： repo等                
           <comments>A business-friendly OSS license</comments>  //关于license的补充信息
        </license>
    </licenses>
       
    <scm>  //SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。
        <connection>           //SCM的URL,该URL描述了版本库和如何连接到版本库。
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)
        </connection>          
        <developerConnection>  //给开发者使用的，类似connection元素。即该连接不仅仅只读
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk
        </developerConnection>          
        <tag />                //当前代码的标签，在开发阶段默认为HEAD          
        <url>http://svn.baidu.com/banseon</url>  //指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。
    </scm>
    
    <organization>  	    //描述项目所属组织的各种属性。Maven产生的文档用          
        <name>demo</name>   //组织的全名          
        <url></url>  	    //组织主页的URL
    </organization>
    
    <build>  //构建项目需要的信息
        //该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。
        <sourceDirectory />
        //该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。
        <scriptSourceDirectory />
        //该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。
        <testSourceDirectory />          
        <outputDirectory />  	 //被编译过的应用程序class文件存放的目录。          
        <testOutputDirectory />  //被编译过的测试class文件存放的目录。          
        <extensions>  			 //使用来自该项目的一系列构建扩展              
            <extension>  		 //描述使用到的构建扩展                     
                <groupId />      //构建扩展的groupId                     
                <artifactId />   //构建扩展的artifactId                     
                <version />  	 //构建扩展的版本
            </extension>
        </extensions>          
        <defaultGoal />  		 //当项目没有规定目标（Maven2 叫做阶段）时的默认值             
	    //这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。
        <resources>                
            <resource>  //这个元素描述了项目相关或测试相关的所有资源路径
		        // 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。
                <targetPath />
                //是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。
                <filtering />                     
                <directory />  //描述存放资源的目录，该路径相对POM路径                     
                <includes />   //包含的模式列表，例如**/*.xml.                     
                <excludes />   //排除的模式列表，例如**/*.xml
            </resource>
        </resources>          
        <testResources>     //这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。                
            <testResource>  //这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明
                <targetPath />
                <filtering />
                <directory />
                <includes />
                <excludes />
            </testResource>
        </testResources>          
        <directory />  //构建产生的所有文件存放的目录          
        <finalName />  //产生的构件的文件名，默认值是${artifactId}-${version}          
        <filters />    //当filtering开关打开时，使用到的过滤器属性文件列表		
        //子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置
        <pluginManagement>                 
            <plugins> 				//使用的插件列表                     
                <plugin>  			//plugin元素包含描述插件所需要的信息                          
                    <groupId />     //插件在仓库里的group ID                          
                    <artifactId />  //插件在仓库里的artifact ID                          
                    <version />     //被使用的插件的版本（或版本范围）
                    //是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。
                    <extensions />                          
                    <executions>  		       //在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置                                
                        <execution>  	       //execution元素包含了插件执行需要的信息                                     
                            <id />  	       //执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标                                     
                            <phase />  	       //绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段                                     
                            <goals />  	       //配置的执行目标                                     
                            <inherited />      //配置是否被传播到子POM                                     
                            <configuration />  //作为DOM对象的配置
                        </execution>
                    </executions>                          
                    <dependencies>    //项目引入插件所需要的额外依赖             
                        <dependency>  //参见dependencies/dependency元素
                            ......
                        </dependency>
                    </dependencies>                            
                    <inherited />      //任何配置是否被传播到子项目                          
                    <configuration />  //作为DOM对象的配置
                </plugin>
            </plugins>
        </pluginManagement>          
        <plugins>     //使用的插件列表             
            <plugin>  //参见build/pluginManagement/plugins/plugin元素
                <groupId />
                <artifactId />
                <version />
                <extensions />
                <executions>
                    <execution>
                        <id />
                        <phase />
                        <goals />
                        <inherited />
                        <configuration />
                    </execution>
                </executions>
                <dependencies>                          
                    <dependency>  //参见dependencies/dependency元素
                        ......
                    </dependency>
                </dependencies>
                <goals />
                <inherited />
                <configuration />
            </plugin>
        </plugins>
    </build>
	    
    <profiles>  	//在列的项目构建profile，如果被激活，会修改构建处理          
        <profile>   //根据环境参数或命令行参数激活某个构建处理
            <id />  //构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile
            //自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。
            <activation>                     
                <activeByDefault />  //profile默认是否激活的标志
                //当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。
                <jdk />                     
                <os>  //当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。                          
                    <name>Windows XP</name>    	 //激活profile的操作系统的名字                          
                    <family>Windows</family>  	 //激活profile的操作系统所属家族(如 'windows')                          
                    <arch>x86</arch>  			 //激活profile的操作系统体系结构                          
                    <version>5.1.2600</version>  //激活profile的操作系统版本
                </os>
                //如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段
                <property>                          
                    <name>mavenVersion</name>  //激活profile的属性的名称                          
                    <value>2.0.3</value>  	   //激活profile的属性的值
                </property>
                //提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。
                <file>                          
                    <exists>  //如果指定的文件存在，则激活profile
			            /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/
                    </exists>
                    //如果指定的文件不存在，则激活profile。
                    <missing>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/
                    </missing>
                </file>
            </activation>
            
            <build>  //构建项目所需要的信息。参见build元素
                <defaultGoal />
                <resources>
                    <resource>
                        <targetPath />
                        <filtering />
                        <directory />
                        <includes />
                        <excludes />
                    </resource>
                </resources>
                <testResources>
                    <testResource>
                        <targetPath />
                        <filtering />
                        <directory />
                        <includes />
                        <excludes />
                    </testResource>
                </testResources>
                <directory />
                <finalName />
                <filters />
                <pluginManagement>
                    <plugins>                              
                        <plugin>  //参见build/pluginManagement/plugins/plugin元素
                            <groupId />
                            <artifactId />
                            <version />
                            <extensions />
                            <executions>
                                <execution>
                                    <id />
                                    <phase />
                                    <goals />
                                    <inherited />
                                    <configuration />
                                </execution>
                            </executions>
                            <dependencies>                                          
                                <dependency>  //参见dependencies/dependency元素
                                    ......
                                </dependency>
                            </dependencies>
                            <goals />
                            <inherited />
                            <configuration />
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>                          
                    <plugin>  //参见build/pluginManagement/plugins/plugin元素
                        <groupId />
                        <artifactId />
                        <version />
                        <extensions />
                        <executions>
                            <execution>
                                <id />
                                <phase />
                                <goals />
                                <inherited />
                                <configuration />
                            </execution>
                        </executions>
                        <dependencies>                                     
                            <dependency>  //参见dependencies/dependency元素
                                ......
                            </dependency>
                        </dependencies>
                        <goals />
                        <inherited />
                        <configuration />
                    </plugin>
                </plugins>
            </build>
            //模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径
            <modules />                
            <repositories>     //发现依赖和扩展的远程仓库列表。                     
                <repository>   //参见repositories/repository元素
                    <releases>
                        <enabled />
                        <updatePolicy />
                        <checksumPolicy />
                    </releases>
                    <snapshots>
                        <enabled />
                        <updatePolicy />
                        <checksumPolicy />
                    </snapshots>
                    <id />
                    <name />
                    <url />
                    <layout />
                </repository>
            </repositories>                
            <pluginRepositories>     //发现插件的远程仓库列表，这些插件用于构建和报表                     
                <pluginRepository>   //包含需要连接到远程插件仓库的信息.参见repositories/repository元素
                    <releases>
                        <enabled />
                        <updatePolicy />
                        <checksumPolicy />
                    </releases>
                    <snapshots>
                        <enabled />
                        <updatePolicy />
                        <checksumPolicy />
                    </snapshots>
                    <id />
                    <name />
                    <url />
                    <layout />
                </pluginRepository>
            </pluginRepositories>                
            <dependencies>     //该元素描述了项目相关的所有依赖                     
                <dependency>  //参见dependencies/dependency元素
                    ......
                </dependency>
            </dependencies>                
            <reports />  //不赞成使用. 现在Maven忽略该元素
            //该元素包括使用报表插件产生报表的规范。当用户执行"mvn site"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素
            <reporting>
                ......
            </reporting>                
            <dependencyManagement>    //参见dependencyManagement元素
                <dependencies>                          
                    <dependency>    //参见dependencies/dependency元素
                        ......
                    </dependency>
                </dependencies>
            </dependencyManagement>                
            <distributionManagement>  //参见distributionManagement元素
                 ......
            </distributionManagement>                
            <properties />            //参见properties元素
        </profile>
    </profiles>
     
	//模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径
    <modules />
    
    <repositories>  		 //发现依赖和扩展的远程仓库列表          
         <repository> 		 //包含需要连接到远程仓库的信息                
            <releases>  	 //如何处理远程仓库里发布版本的下载                     
            <enabled />  //true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启
            //该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。
            //这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。
            <updatePolicy />
            //当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。
            <checksumPolicy />
            </releases>
            //如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。
            //例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素
            <snapshots>
                <enabled />
                <updatePolicy />
                <checksumPolicy />
            </snapshots>                
            <id>banseon-repository-proxy</id>  	   //远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库                
            <name>banseon-repository-proxy</name>  //远程仓库名称                
            <url>url</url>  					   //远程仓库URL，按protocol://hostname/path形式               
            <layout>default</layout>  			   // 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）
        </repository>
    </repositories>
    
    <pluginRepositories>    //发现插件的远程仓库列表，这些插件用于构建和报表          
        <pluginRepository>  //包含需要连接到远程插件仓库的信息.参见repositories/repository元素
              ......
        </pluginRepository>
    </pluginRepositories>
  
    //该元素描述了项目相关的所有依赖
    <dependencies>
        <dependency>
            //下面三个为必须标签
            <groupId>org.apache.maven</groupId>  	 //依赖的group ID                
            <artifactId>maven-artifact</artifactId>  //依赖的artifact ID                
            <version>3.8.1</version>  				 //依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。
            //依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。
		    //类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar等。
		    //如果设置extensions为 true，就可以在 plugin里定义新的类型。
            <type>jar</type>
            //依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。
		    //例如，如果你想要构建两个单独的构件成 JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，
		    //你就可以使用分类器来生成两个单独的JAR构件。
            <classifier></classifier>
            //依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 
            //- compile ：默认范围，用于编译 
            //- provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath 
            //- runtime: 在执行时需要使用 
            //- test: 用于test任务时使用 
            //- system: 需要外在提供相应的元素。通过systemPath来取得 
            //- systemPath: 仅用于范围为system。提供相应的路径 
            //- optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用
            <scope>test</scope>
            //仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。
            <systemPath></systemPath>
            //当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题
            <exclusions>
                 <exclusion>
                      <artifactId>spring-core</artifactId>
                      <groupId>org.springframework</groupId>
                 </exclusion>
            </exclusions>
            //可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。
            <optional>true</optional>
        </dependency>
    </dependencies>
	    
    <reports></reports>  //不赞成使用. 现在Maven忽略该元素.
     
	//该元素描述使用报表插件产生报表的规范。当用户执行"mvn site"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。
    <reporting>          
        <excludeDefaults />  	    //true，则，网站不包括默认的报表。这包括"项目信息"菜单中的报表。          
        <outputDirectory />  	    //所有产生的报表存放到哪里。默认值是${project.build.directory}/site。          
        <plugins>  				    //使用的报表插件和他们的配置。                
            <plugin>  			    //plugin元素包含描述报表插件需要的信息                     
                <groupId />  	    //报表插件在仓库里的group ID                     
                <artifactId />      //报表插件在仓库里的artifact ID                     
                <version />  	    //被使用的报表插件的版本（或版本范围）                     
                <inherited />  	    //任何配置是否被传播到子项目                    
                <configuration />   //报表插件的配置
                //一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。
                //例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标
                <reportSets>                          
                    <reportSet>  		   //表示报表的一个集合，以及产生该集合的配置                                
                        <id />  		   //报表集合的唯一标识符，POM继承时用到                                
                        <configuration />  //产生报表集合时，被使用的报表的配置                                
                        <inherited />      //配置是否被继承到子POMs                                
                        <reports />        //这个集合里使用到哪些报表
                    </reportSet>
                </reportSets>    
            </plugin>
        </plugins>
    </reporting>
	
    //继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact 
    //ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。
    <dependencyManagement>
        <dependencies>                
            <dependency> //参见dependencies/dependency元素
                 ......
            </dependency>
        </dependencies>
    </dependencyManagement>
    
    //项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。
    <distributionManagement>           
        <repository>  //部署项目产生的构件到远程仓库需要的信息
            //是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素
            <uniqueVersion />
            <id>banseon-maven2</id>
            <name>banseon maven2</name>
            <url>file://${basedir}/target/deploy</url>
            <layout />
        </repository>
        //构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素
        <snapshotRepository>
            <uniqueVersion />
            <id>banseon-maven2</id>
            <name>Banseon-maven2 Snapshot Repository</name>
            <url>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot</url>
            <layout />
        </snapshotRepository>
        //部署项目的网站需要的信息
        <site>                
            <id>banseon-site</id>              //部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置                
            <name>business api website</name>  //部署位置的名称                
            <url></url>                        //部署位置的URL，按protocol://hostname/path形式
        </site>
        
        //项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。
        <downloadUrl />
        
        //如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。
        <relocation>                
           <groupId />     //构件新的group ID                
           <artifactId />  //构件新的artifact ID               
           <version />     //构件新的版本号                
           <message />     //显示给用户的，关于移动的额外信息，例如原因。
        </relocation>
        //给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 
        //Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。
        <status />
    </distributionManagement>
     
    //以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是<name>value</name>。
    <properties />
     
</project>