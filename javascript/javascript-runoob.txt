JavaScript-runoob

简介
JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，
更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。

JavaScript 是脚本语言
JavaScript 是一种轻量级的编程语言。
JavaScript 是可插入 HTML 页面的编程代码。
JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。
JavaScript 很容易学习。


用法
HTML 中的脚本必须位于 <script> 与 </script> 标签之间。
脚本可被放置在 HTML 页面的 <body> 和 <head> 部分中。
外部引用js文件：<script src="myScript.js"></script>


输出
JavaScript 没有任何打印或者输出的函数。

显示数据
1)window.alert() 弹出警告框。
2)document.write() 方法将内容写到 HTML 文档中。
3)innerHTML 写入到 HTML 元素。
4)console.log() 写入到浏览器的控制台。


语法
字面量/固定值
Number   //整数、小数和科学计数，8字节(64位)
String   //""或''包含的值。如:"John Doe"/'John Doe'
Array    //[]包围，元素逗号隔开。如：[40, 100, 1, 5, 25, 10]
Object   //{}包围，元素逗号隔开，键值对。如:{firstName:"John", lastName:"Doe", age:50}
Function //如：function myFunction(a, b) { return a * b;}

变量
var length = 16;                                  // Number 通过数字字面量赋值 
var points = x * 10;                              // Number 通过表达式字面量赋值
var lastName = "Johnson";                         // String 通过字符串字面量赋值
var cars = ["Saab", "Volvo", "BMW"];              // Array  通过数组字面量赋值
var person = {firstName:"John", lastName:"Doe"};  // Object 通过对象字面量赋值
var lastname="Doe", age=30, job="carpenter";      // 多变量同时赋值，可跨多行
var x; //x的值为 undefined
变量必须以字母开头
变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）
变量名称对大小写敏感（y 和 Y 是不同的变量）

注释
单行注释
//
多行
/*
...
*/

js对大小写敏感


数据类型
字符串（String）
数字(Number)
布尔(Boolean)  //true/false
数组(Array)    //var a = [1,2,4]或var a = new Array(1,2,4)
对象(Object)   //拥有属性和方法的数据
空（Null）     //用于清空数据
未定义（Undefined）


函数
function functionname(arg1,arg2,...)  //可以没有参数
{
执行代码
}

函数内声明的变量为局部变量，反之为全局变量


事件

JavaScript 事件
HTML 事件是发生在 HTML 元素上的事情。
当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。

HTML 事件
HTML 事件可以是浏览器行为，也可以是用户行为。
以下是 HTML 事件的实例：
1)HTML 页面完成加载
2)HTML input 字段改变时
3)HTML 按钮被点击

调用方式
<some-HTML-element some-event="JavaScript 代码"> //js代码也可使用单引号


字符串/String
用于存储和处理文本
var str = "adsfasd"; 
var sln = str.length;   //返回str长度
var character = str[0]; //访问str第一个字符
带有特殊字符的字符串可用转义字符"\"处理


比较运算符
===  //绝对等于（值和类型均相等）
!==  //不绝对等于（值和类型有一个不相等，或两个都不相等）

三元运算符
variablename=(condition)?value1:value2 

循环
for/in
var x;
var txt="";
var person={fname:"John",lname:"Doe",age:25}; 
for (x in person)  // x 为属性名
{
    txt=txt + person[x];
}
输出结果：JohnDoe25


标签
标签可以对 JavaScript 语句进行标记。
如需标记 JavaScript 语句，请在语句之前加上冒号：

label:
statements
break 和 continue 语句仅仅是能够跳出代码块的语句。

语法:
break labelname; 
continue labelname;

continue 语句（带有或不带标签引用）只能用在循环中。
break 语句（不带标签引用），只能用在循环或 switch 中。

通过标签引用，break 语句可用于跳出任何 JavaScript 代码块：

实例
cars=["BMW","Volvo","Saab","Ford"];
list: 
{
    document.write(cars[0] + "<br>"); 
    document.write(cars[1] + "<br>"); 
    document.write(cars[2] + "<br>"); 
    break list;
    document.write(cars[3] + "<br>"); 
    document.write(cars[4] + "<br>"); 
    document.write(cars[5] + "<br>"); 
}


typeof 操作符
你可以使用 typeof 操作符来检测变量的数据类型。

实例
typeof "John"                // 返回 string 
typeof 3.14                  // 返回 number
typeof false                 // 返回 boolean
typeof [1,2,3,4]             // 返回 object
typeof {name:'John', age:34} // 返回 object

undefined 和 null 的区别
实例
null 和 undefined 的值相等，但类型不等：
typeof undefined             // undefined
typeof null                  // object
null === undefined           // false
null == undefined            // true


constructor 属性
返回所有 JavaScript 变量的构造函数。
实例
"John".constructor                 // 返回函数 String()  { [native code] }
(3.14).constructor                 // 返回函数 Number()  { [native code] }
false.constructor                  // 返回函数 Boolean() { [native code] }
[1,2,3,4].constructor              // 返回函数 Array()   { [native code] }
{name:'John', age:34}.constructor  // 返回函数 Object()  { [native code] }
new Date().constructor             // 返回函数 Date()    { [native code] }
function () {}.constructor         // 返回函数 Function(){ [native code] }


类型转换
1.通过使用 JavaScript 函数
2.通过 JavaScript 自身自动转换

其他数据类型转为字符串
String(x)         // 将变量 x 转换为字符串并返回
x.toString()      // 将变量 x 转换为字符串并返回

字符串转为数字
Number("3.14")    // 返回 3.14
Number(" ")       // 空格，返回 0 
Number("")        // 空字符串，返回 0
Number("99 88")   // 其他字符串，返回 NaN
var y = "5";      // y 是一个字符串
var x = + y;      // x 是一个数字，若y为其他字符串，x的值为NaN

布尔转数字
Number(false)     // 返回 0
Number(true)      // 返回 1

日期转数字
Number(new Date())  // 返回 1404568027739

自动转类型
5 + null    // 返回 5       null 转换为 0
"5" + null  // 返回"5null"  null 转换为 "null"
"5" + 1     // 返回 "51"    1 转换为 "1"  
"5" - 1     // 返回 4       "5" 转换为 5

原始值				转换为数字	转换为字符串		转换为布尔值
false				0			"false"				false
true				1			"true"				true
0					0			"0"					false
1					1			"1"					true
"0"					0			"0"					true
"000"				0			"000"				true
"1"					1			"1"					true
NaN					NaN			"NaN"				false
Infinity			Infinity	"Infinity"			true
-Infinity			-Infinity	"-Infinity"			true
""					0			""					false
"20"				20			"20"				true
"Runoob"			NaN			"Runoob"			true
[ ]					0			""					true
[20]				20			"20"				true
[10,20]				NaN			"10,20"				true
["Runoob"]			NaN			"Runoob"			true
["Runoob","Google"]	NaN			"Runoob,Google"		true
function(){}		NaN			"function(){}"		true
{ }					NaN			"[object Object]"	true
null				0			"null"				false
undefined			NaN			"undefined"			false


正则表达式

在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。
search() 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。
replace() 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。


JSON/JavaScript Object Notation
JSON 是用于存储和传输数据的格式。
JSON 通常用于服务端向网页传递数据 。
JSON 是一种轻量级的数据交换格式。
JSON是独立的语言 *

JSON 语法规则
1.数据为 键/值 对
2.数据由逗号分隔
3.大括号保存对象
4.方括号保存数组

如：
//以下 JSON 语法定义了 sites 对象: 3 条网站信息（对象）的数组:
{"sites":[
    {"name":"Runoob", "url":"www.runoob.com"}, 
    {"name":"Google", "url":"www.google.com"},
    {"name":"Taobao", "url":"www.taobao.com"}
]}

var text = '{ "sites" : [' + //定义JSON字符串
    '{ "name":"Runoob" , "url":"www.runoob.com" },' +
    '{ "name":"Google" , "url":"www.google.com" },' +
    '{ "name":"Taobao" , "url":"www.taobao.com" } ]}';
    
obj = JSON.parse(text);  //将JSON字符串转化为js对象
//访问数据内容
document.getElementById("demo").innerHTML = obj.sites[1].name + " " + obj.sites[1].url;

JSON.parse()	  //用于将一个 JSON 字符串转换为 JavaScript 对象。
JSON.stringify()  //用于将 JavaScript 值转换为 JSON 字符串。


Fuction/函数

函数声明
function functionName(parameters) { //可以没有参数
  执行的代码
}

函数表达式
var x = function (a, b) {return a * b};  //匿名函数
var z = x(4, 3);

Function() 构造函数
var myFunction = new Function("a", "b", "return a * b");  //也可写成函数表达式的形式
var x = myFunction(4, 3);

函数提升（Hoisting） //变量提升也类似，即先使用后声明。使用函数表达式时无法提升
myFunction(5);
function myFunction(y) {
    return y * y;
}

自调用函数  //匿名自我调用的函数 
(function () {  
    var x = "Hello!!";      // 我将调用自己
})();

函数是对象
在JS中使用 typeof 操作符判断函数类型将返回 "function" 。
但是JS函数描述为一个对象更加准确。
JS 函数有属性和方法(函数)。
如：
function myFunction(a, b) {
    return arguments.length;  //返回参数数量
}

function myFunction(a, b) {
    return a * b;
}
var txt = myFunction.toString(); //返回function myFunction(a, b) { return a * b; }


函数参数

参数规则
函数定义时显式参数没有指定数据类型。
函数对隐式参数没有进行类型检测。
函数对隐式参数的个数没有进行检测。

默认参数
如果函数在调用时未提供隐式参数，参数会默认设置为：undefined

Arguments 对象
函数有个内置的对象 arguments 对象。
arguments 对象包含了函数调用的参数数组。

通过值传递参数
在函数中调用的参数是函数的隐式参数。
隐式参数通过值来传递：函数仅仅只是获取值。
如果函数修改参数的值，不会修改显式参数的初始值（在函数外定义）。
隐式参数的改变在函数外是不可见的。

通过对象传递参数
在JavaScript中，可以引用对象的值。
因此我们在函数内部修改对象的属性就会修改其初始的值。
修改对象属性可作用于函数外部（全局变量）。
修改对象属性在函数外是可见的。


函数调用

JavaScript 函数有 4 种调用方式。
每种方式的不同在于 this 的初始化。

this 关键字
一般而言，在Javascript中，this指向函数执行时的当前对象。


闭包
主要在需要私有变量的场景

var add = (function () {
    var counter = 0;
    return function () {return counter += 1;}
})();
add();
add();
add(); // 计数器为 3
 
实例解析
变量 add 指定了函数自我调用的返回字值。
自我调用函数只执行一次。设置计数器为 0。并返回函数表达式。
add变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。
这个叫作 JavaScript 闭包。它使得函数拥有私有变量变成可能。
计数器受匿名函数的作用域保护，只能通过 add 方法修改。


JavaScript HTML DOM
通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。
DOM  //Document Object Model，即文档对象模型

通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。
JavaScript 能够改变页面中的所有 HTML 元素
JavaScript 能够改变页面中的所有 HTML 属性
JavaScript 能够改变页面中的所有 CSS 样式
JavaScript 能够对页面中的所有事件做出反应

查找 HTML 元素
有三种方法来做这件事：
1.通过 id 找到 HTML 元素
  var x=document.getElementById("intro");
2.通过标签名找到 HTML 元素
  var x=document.getElementById("main");
  var y=x.getElementsByTagName("p"); //获取ID为main下所有标签为p的元素
3.通过类名找到 HTML 元素
  var x=document.getElementsByClassName("intro");


改变 HTML
document.write(Date()); //改变 HTML 输出流
document.getElementById(id).innerHTML="新内容"  //改变 HTML 内容
document.getElementById(id).attribute="新属性值"  //改变 HTML 属性 

改变 CSS
document.getElementById(id).style.property="新样式"


HTML DOM 事件

对事件做出反应
我们可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时。

如需在用户点击某个元素时执行代码，请向一个 HTML 事件属性添加 JavaScript 代码：
onclick="JS代码"
如：
<h1 onclick="this.innerHTML='Ooops!'">点击文本!</h1>
或
<script>
function changetext(id){id.innerHTML="Ooops!";}
</script>
<h1 onclick="changetext(this)">点击文本!</h1>

HTML 事件的例子：
当用户点击鼠标时
当网页已加载时
当图像已加载时
当鼠标移动到元素上时
当输入字段被改变时
当提交 HTML 表单时
当用户触发按键时


HTML 事件属性

向HTML元素分配事件
<button onclick="displayDate()">点这里</button>  //向 button 元素分配 onclick 事件
或
<script>
document.getElementById("myBtn").onclick=function(){displayDate()};
</script>

onload 和 onunload 事件
会在用户进入或离开页面时被触发。
onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。
onload 和 onunload 事件可用于处理 cookie。

onchange 事件
常结合对输入字段的验证来使用。

当用户改变输入字段的内容时，会调用 upperCase() 函数。
<input type="text" id="fname" onchange="upperCase()">

onmouseover 和 onmouseout 事件 //鼠标移动和移开事件
onmousedown、onmouseup 以及 onclick 事件


HTML DOM EventListener  //事件监听器

addEventListener() 方法
addEventListener() 方法用于向指定元素添加事件句柄。
addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。
你可以向一个元素添加多个事件句柄。
你可以向同个元素添加多个同类型的事件句柄，如：两个 "click" 事件。
你可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。
addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。
当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制HTML标记时也可以添加事件监听。
你可以使用 removeEventListener() 方法来移除事件的监听。

语法
element.addEventListener(event, function, useCapture); //elementke可使用HTML查找方法实现
第一个参数是事件的类型 (如 "click" 或 "mousedown").  //点击事件为click，没有on
第二个参数是事件触发后调用的函数。
第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。默认是flase(冒泡)

事件传递有两种方式：冒泡与捕获。
事件传递定义了元素事件触发的顺序。 <div><p></p></div>，用户点击 <p> 元素, 哪个元素的 "click" 事件先被触发呢？
在 冒泡 中，内部元素的事件会先被触发，然后再触发外部元素，即： <p> 元素的点击事件先触发，然后会触发 <div> 元素的点击事件。
在 捕获 中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： <div> 元素的点击事件先触发 ，然后再触发 <p> 元素的点击事件。

removeEventListener() 方法
移除由 addEventListener() 方法添加的事件句柄:
element.removeEventListener("mousemove", myFunction);


HTML DOM 元素 (节点)

创建新的 HTML 元素 (节点) - appendChild()
<script>
var para = document.createElement("p"); //创建一个元素p
var node = document.createTextNode("这是一个新的段落。"); //创建一个元素内容
para.appendChild(node); //将内容追加到元素中,此时元素是带有内容的
 
var element = document.getElementById("div1"); //查找元素节点
element.appendChild(para); //追加元素，位置为父元素的所有子元素的最后
</script>

创建新的 HTML 元素 (节点) - insertBefore() 
<script>
var para = document.createElement("p"); //创建一个元素p
var node = document.createTextNode("这是一个新的段落。"); //创建一个元素内容
para.appendChild(node); //将内容追加到元素中,此时元素是带有内容的
 
var element = document.getElementById("div1"); //查找元素节点
var child = document.getElementById("p1"); //查找元素节点
element.insertBefore(para, child); //追加元素，位置为父元素的指定子元素的前面
</script>

移除元素  
DOM 需要清楚您需要删除的元素，以及它的父元素。不能单独移除指定元素。
<script>
var parent = document.getElementById("div1");
var child = document.getElementById("p1");
parent.removeChild(child); //从父元素中移除指定的子元素
</script>

替换 HTML 元素 - replaceChild()
<script>
var para = document.createElement("p");
var node = document.createTextNode("这是一个新的段落。");
para.appendChild(node);
 
var parent = document.getElementById("div1");
var child = document.getElementById("p1");
parent.replaceChild(para, child); //指定父元素parent，用para替换child
</script>


HTML DOM 集合 / HTML Collection

//返回所有p元素的HTML Collection对象，类似于数组，但不是数组。
var myCollection = document.getElementsByTagName("p");
document.getElementById("demo").innerHTML = myCollection.length; //显示集合长度


HTML DOM 节点列表 / NodeList

var myNodeList = document.querySelectorAll("p"); //获取节点列表对象，类似于HTML Collection对象

HTMLCollection 与 NodeList 的区别
HTMLCollection 是 HTML 元素的集合。

NodeList 是一个文档节点的集合。
NodeList 与 HTMLCollection 有很多类似的地方。
NodeList 与 HTMLCollection 都与数组对象有点类似，可以使用索引 (0, 1, 2,...) 来获取元素。
NodeList 与 HTMLCollection 都有 length 属性。
HTMLCollection 元素可以通过 name，id 或索引来获取。
NodeList 只能通过索引来获取。
只有 NodeList 对象有包含属性节点和文本节点。


JS高级教程

JS对象
所有事物都是对象，包括属性和方法

访问对象
objectName.propertyName;  //访问属性
objectName.methodName();  //访问方法

创建对象
创建新对象有两种不同的方法：
1.定义并创建对象的实例
2.使用函数来定义对象，然后创建新的对象实例

var person=new Object();
person.firstname="John";
person.lastname="Doe";
person.age=50;
person.eyecolor="blue";
或
var person={firstname:"John",lastname:"Doe",age:50,eyecolor:"blue"}; //使用对象 literals
或
function person(firstname,lastname,age,eyecolor)  //使用对象构造器
{
    this.firstname=firstname;
    this.lastname=lastname;
    this.age=age;
    this.eyecolor=eyecolor;
};

//使用构造器形式创建对象
var myFather=new person("John","Doe",50,"blue");
var myMother=new person("Sally","Rally",48,"green");


Number 对象
所有 JavaScript 数字均为 64 位
var y = 0377;  //八进制数
var z = 0xFF;  //十六进制数

指定进制转换
var myNumber=128;
myNumber.toString(16);   // 返回 80
myNumber.toString(8);    // 返回 200
myNumber.toString(2);    // 返回 10000000


JS浏览器BOM

浏览器对象模型 (BOM)
使 JS 有能力与浏览器"对话"
浏览器对象模型（Browser Object Model (BOM)）尚无正式标准
由于现代浏览器已经（几乎）实现了 JS 交互性方面的相同方法和属性，因此常被认为是 BOM 的方法和属性。

Window 对象
所有浏览器都支持 window 对象。它表示浏览器窗口。
所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。
全局变量是 window 对象的属性。
全局函数是 window 对象的方法。
甚至 HTML DOM 的 document 也是 window 对象的属性之一

window.document.getElementById("header"); <=> document.getElementById("header");

获取Windows尺寸
var w=window.innerWidth                   //绝大部分浏览器，ie9及以上版本
|| document.documentElement.clientWidth   //ie5-ie8
|| document.body.clientWidth;             //绝大部分浏览器

var h=window.innerHeight
|| document.documentElement.clientHeight
|| document.body.clientHeight;

Windows其他方法
window.open()      //打开新窗口
window.close()     //关闭当前窗口
window.moveTo()    //移动当前窗口
window.resizeTo()  //调整当前窗口的尺寸

Window Screen
此对象包含有关用户屏幕的信息。
screen.availWidth   //可用的屏幕宽度,以像素计
screen.availHeight  //可用的屏幕高度,以像素计

Window Location
此对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。
location.hostname  //返回 web 主机的域名
location.pathname  //返回当前页面的相对路径和文件名
location.port      //返回 web 主机的端口 （80 或 443）
location.protocol  //返回所使用的 web 协议（http:// 或 https://）
location.href      //返回当前页面的 URL
location.assign()  //加载新的资源

Window History
window.history 对象包含浏览器的历史。

Window History
此对象包含浏览器的历史。
history.back()      //与在浏览器点击后退按钮相同
history.forward()   //与在浏览器中点击向前按钮相同

Window Navigator
此对象对象包含有关访问者浏览器的信息。
navigator.appCodeName     //返回浏览器代号 
navigator.appName         //返回浏览器名称 
navigator.appVersion      //返回浏览器版本 
navigator.cookieEnabled   //返回启用Cookies
navigator.platform        //返回硬件平台
navigator.userAgent       //返回用户代理
navigator.systemLanguage  //返回用户代理语言

JavaScript 弹窗
可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。
alert("sometext");                 //警告框
confirm("sometext");               //确认框
prompt("sometext","defaultvalue"); //提示框

JavaScript 计时事件
通过使用 JS，可以在设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。
在 JavaScritp 中使用计时事件是很容易的，两个关键方法是:
setInterval() - 间隔指定的毫秒数不停地执行指定的代码。
setTimeout()  - 在指定的毫秒数后执行指定代码。

setInterval("javascript function",milliseconds); //设置指定时间间隔不停地执行js代码
clearInterval(intervalVariable); //停止事件，intervalVariable为全局事件名

setTimeout("javascript function", milliseconds); //设置指定时间间隔后执行js代码
clearTimeout(timeoutVariable);  //停止事件，timeoutVariable为全局事件名


Cookie
Cookie 用于存储 web 页面的用户信息。
Cookie 是一些数据, 存储于客户端的文本文件中。

当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。
Cookie 的作用就是用于解决 "如何记录客户端的用户信息":
当用户访问 web 页面时，他的名字可以记录在 cookie 中。
在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。

创建Cookie
可使用 document.cookie 属性来创建 、读取、及删除 cookie。

JavaScript 中，创建 cookie 如下所示：
document.cookie="username=John Doe"; //默认情况下，cookie 在浏览器关闭时删除：
document.cookie="username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT"; //expires用于设置过期时间
document.cookie="username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/"; //path用于指定cookie存储路径
var x = document.cookie; //读取cookie

修改和删除cookie可使用重新创建cookie实现

Cookie完整实例
通过一个load(载入)事件检测cookie，在检测函数中调用设置和获取cookie的方法
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>菜鸟教程(runoob.com)</title>
</head>
<head>
<script>
function setCookie(cname,cvalue,exdays){
	var d = new Date();
	d.setTime(d.getTime()+(exdays*24*60*60*1000));
	var expires = "expires="+d.toGMTString();
	document.cookie = cname+"="+cvalue+"; "+expires;
}
function getCookie(cname){
	var name = cname + "=";
	var ca = document.cookie.split(';');
	for(var i=0; i<ca.length; i++) {
		var c = ca[i].trim();
		if (c.indexOf(name)==0) { return c.substring(name.length,c.length); }
	}
	return "";
}
function checkCookie(){
	var user=getCookie("username");
	if (user!=""){
		alert("欢迎 " + user + " 再次访问");
	}
	else {
		user = prompt("请输入你的名字:","");
  		if (user!="" && user!=null){
    		setCookie("username",user,30); //设置30天过期
    	}
	}
}
</script>
</head>
	
<body onload="checkCookie()"></body>
	
</html>









